/*Copyright 2019-2024 CasualYouTuber31 <naysar@protonmail.com>

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify,
merge, publish, distribute, sublicense, and/or sell copies of the
Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

/**@file bank-v2-macros.tpp
 * This header file was generated by the macgen.py tool.
 * It contains macros used to define game property classes.
 */

/* Generates code necessary to define a field in a game property class.
	cc: C++ game property class the field belongs to.
	ac: String literal containing the game property class's AngelScript typename.
	 n: The name of the property in C++ and AngelScript.
	ct: The C++ type of the property, without qualifiers.
	 i: Depth of the hierarchy desired (see awe::property_field).
     o: true if this field is optional, false if not.
     d: The default value of the field. Has access to `scripts`.
	 e: Extra processing that's applied to the property. Can be nothing.
*/
#define PROPERTY(cc, ac, n, ct, i, o, d, e) class n##_ { \
	awe::property_field<ct, i> _##n; \
public: \
	n##_(engine::json& j, const std::string& scriptName, engine::logger& logger, const std::shared_ptr<engine::scripts>& scripts) : _##n(j, scriptName, { #n }, logger, scripts, o, [](ct& defVal, const std::shared_ptr<engine::scripts>& scripts) { d; }) { e } \
	static void Register(asIScriptEngine* engine, const std::shared_ptr<DocumentationGenerator>& document) { \
		engine->RegisterObjectMethod(ac, std::string(awe::bank_return_type<ct>()).append(" " #n "(const Overrides&in) const").c_str(), \
			asMETHODPR(n##_, operator(), (const awe::overrides&) const, \
				typename boost::call_traits<ct>::const_reference), \
			asCALL_THISCALL, nullptr, asOFFSET(cc, n), false); \
	} \
	typename boost::call_traits<ct>::reference operator()( \
		const awe::overrides& overrides = {}) { \
		return _##n[overrides]; \
	} \
	typename boost::call_traits<ct>::const_reference operator()( \
		const awe::overrides& overrides = {}) const { \
		return _##n[overrides]; \
	} \
} n;

/**
 * Used to initialise the default value of a field.
 */
#define DEFAULT_VALUE(v) defVal = v;

/**
 * Must be given as the default value of bank_array property fields.
 */
#define INIT_BANK_ARRAY() defVal.scripts = scripts; defVal.array = std::make_unique<engine::CScriptWrapper<CScriptArray>>(scripts->createArray(engine::script_type<std::remove_reference<decltype(defVal)>::type::type>()));

/* These macros generate a game property class with N fields.
	Unfortunately, I can't come up with a cleaner solution to support variable
	numbers of fields in macros beyond manually defining each N-field macro. To
	simplify the process, I've written a Python script that can generate them.
	cc: C++ name of the game property type.
	ac: String literal containing the typename to give this game property in AS.
	gp: String literal containing the name of the global property of the bank type
	    that stores this game property type.
	 i: Depth of the hierarchy desired for every field (see awe::property_field).
	p1: The name of the first field.
	t1: The C++ type of the first field, without qualifiers.
    o1: true if this field is optional, false if not.
    d1: The field's default value. Has access to `scripts`.
	e1: Extra processing that's applied to the first field.
     d: Allows you to register any script interface dependencies (you have access
        to the engine pointer). This is mandatory for all bank_array fields.
	 e: Extra processing that's applied to every field after every field has been
	    processed. Can be nothing.
	 a: Append extra code to the end of the class.
*/

#define GAME_PROPERTY_1(cc, ac, gp, i, p1, t1, o1, d1, e1, d, e, a) class cc { \
    std::string _scriptName; \
public: \
	inline static const std::string type = ac; \
	inline static const std::string global_property = gp; \
    inline static const std::array<std::string, 1> fields = { #p1, }; \
    inline static const std::size_t overrideID = i; \
    cc(const std::string& scriptName, engine::json& j, engine::logger& logger, const std::shared_ptr<engine::scripts>& scripts) : \
        p1(j, scriptName, logger, scripts), \
        _scriptName(scriptName) { e } \
	static void Register(asIScriptEngine* engine, const std::shared_ptr<DocumentationGenerator>& document) { \
        d \
		engine->RegisterObjectMethod(ac, "const string& scriptName() const", \
			asMETHOD(cc, scriptName), asCALL_THISCALL); \
        p1##_::Register(engine, document); \
    } \
	inline const std::string& scriptName() const { return _scriptName; } \
    PROPERTY(cc, ac, p1, t1, i, o1, d1, e1) \
    inline static bool hasField(const std::string_view field) { \
        return field == #p1 || false; \
    } \
	inline static std::string getFieldAngelScriptType(const std::string_view field) { \
		if (field == #p1) return engine::script_type<t1>(); \
		return ""; \
	} \
	static std::any readFieldOverrideVariable(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		const asUINT variable) { \
		if (field == #p1) return awe::OverrideVariable<t1>::read(scripts, variable); \
		return {}; \
	} \
	static std::any readFieldOverrideFunction(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		asIScriptFunction* const function, const std::any& parent) { \
		if (field == #p1) return awe::OverrideFunction<t1>::read(scripts, function, parent); \
		return {}; \
	} \
    static bool isFieldOverrideable(const std::string& field) { \
        if (field == #p1) return !engine::script_type<t1>().empty(); \
        return false; \
    } \
    std::any getFieldDefaultValue(const std::string& field) { \
        if (field == #p1) return p1(); \
        return {}; \
    } \
    void setFieldValue(const std::string& field, const std::any& value, const awe::overrides& overrides) { \
        if (field == #p1) p1(overrides) = std::any_cast<t1>(value); \
    } \
    a \
};

#define GAME_PROPERTY_2(cc, ac, gp, i, p1, t1, o1, d1, e1, p2, t2, o2, d2, e2, d, e, a) class cc { \
    std::string _scriptName; \
public: \
	inline static const std::string type = ac; \
	inline static const std::string global_property = gp; \
    inline static const std::array<std::string, 2> fields = { #p1, #p2, }; \
    inline static const std::size_t overrideID = i; \
    cc(const std::string& scriptName, engine::json& j, engine::logger& logger, const std::shared_ptr<engine::scripts>& scripts) : \
        p1(j, scriptName, logger, scripts), p2(j, scriptName, logger, scripts), \
        _scriptName(scriptName) { e } \
	static void Register(asIScriptEngine* engine, const std::shared_ptr<DocumentationGenerator>& document) { \
        d \
		engine->RegisterObjectMethod(ac, "const string& scriptName() const", \
			asMETHOD(cc, scriptName), asCALL_THISCALL); \
        p1##_::Register(engine, document); p2##_::Register(engine, document); \
    } \
	inline const std::string& scriptName() const { return _scriptName; } \
    PROPERTY(cc, ac, p1, t1, i, o1, d1, e1) PROPERTY(cc, ac, p2, t2, i, o2, d2, e2) \
    inline static bool hasField(const std::string_view field) { \
        return field == #p1 || field == #p2 || false; \
    } \
	inline static std::string getFieldAngelScriptType(const std::string_view field) { \
		if (field == #p1) return engine::script_type<t1>(); if (field == #p2) return engine::script_type<t2>(); \
		return ""; \
	} \
	static std::any readFieldOverrideVariable(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		const asUINT variable) { \
		if (field == #p1) return awe::OverrideVariable<t1>::read(scripts, variable); if (field == #p2) return awe::OverrideVariable<t2>::read(scripts, variable); \
		return {}; \
	} \
	static std::any readFieldOverrideFunction(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		asIScriptFunction* const function, const std::any& parent) { \
		if (field == #p1) return awe::OverrideFunction<t1>::read(scripts, function, parent); if (field == #p2) return awe::OverrideFunction<t2>::read(scripts, function, parent); \
		return {}; \
	} \
    static bool isFieldOverrideable(const std::string& field) { \
        if (field == #p1) return !engine::script_type<t1>().empty(); if (field == #p2) return !engine::script_type<t2>().empty(); \
        return false; \
    } \
    std::any getFieldDefaultValue(const std::string& field) { \
        if (field == #p1) return p1(); if (field == #p2) return p2(); \
        return {}; \
    } \
    void setFieldValue(const std::string& field, const std::any& value, const awe::overrides& overrides) { \
        if (field == #p1) p1(overrides) = std::any_cast<t1>(value); if (field == #p2) p2(overrides) = std::any_cast<t2>(value); \
    } \
    a \
};

#define GAME_PROPERTY_3(cc, ac, gp, i, p1, t1, o1, d1, e1, p2, t2, o2, d2, e2, p3, t3, o3, d3, e3, d, e, a) class cc { \
    std::string _scriptName; \
public: \
	inline static const std::string type = ac; \
	inline static const std::string global_property = gp; \
    inline static const std::array<std::string, 3> fields = { #p1, #p2, #p3, }; \
    inline static const std::size_t overrideID = i; \
    cc(const std::string& scriptName, engine::json& j, engine::logger& logger, const std::shared_ptr<engine::scripts>& scripts) : \
        p1(j, scriptName, logger, scripts), p2(j, scriptName, logger, scripts), p3(j, scriptName, logger, scripts), \
        _scriptName(scriptName) { e } \
	static void Register(asIScriptEngine* engine, const std::shared_ptr<DocumentationGenerator>& document) { \
        d \
		engine->RegisterObjectMethod(ac, "const string& scriptName() const", \
			asMETHOD(cc, scriptName), asCALL_THISCALL); \
        p1##_::Register(engine, document); p2##_::Register(engine, document); p3##_::Register(engine, document); \
    } \
	inline const std::string& scriptName() const { return _scriptName; } \
    PROPERTY(cc, ac, p1, t1, i, o1, d1, e1) PROPERTY(cc, ac, p2, t2, i, o2, d2, e2) PROPERTY(cc, ac, p3, t3, i, o3, d3, e3) \
    inline static bool hasField(const std::string_view field) { \
        return field == #p1 || field == #p2 || field == #p3 || false; \
    } \
	inline static std::string getFieldAngelScriptType(const std::string_view field) { \
		if (field == #p1) return engine::script_type<t1>(); if (field == #p2) return engine::script_type<t2>(); if (field == #p3) return engine::script_type<t3>(); \
		return ""; \
	} \
	static std::any readFieldOverrideVariable(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		const asUINT variable) { \
		if (field == #p1) return awe::OverrideVariable<t1>::read(scripts, variable); if (field == #p2) return awe::OverrideVariable<t2>::read(scripts, variable); if (field == #p3) return awe::OverrideVariable<t3>::read(scripts, variable); \
		return {}; \
	} \
	static std::any readFieldOverrideFunction(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		asIScriptFunction* const function, const std::any& parent) { \
		if (field == #p1) return awe::OverrideFunction<t1>::read(scripts, function, parent); if (field == #p2) return awe::OverrideFunction<t2>::read(scripts, function, parent); if (field == #p3) return awe::OverrideFunction<t3>::read(scripts, function, parent); \
		return {}; \
	} \
    static bool isFieldOverrideable(const std::string& field) { \
        if (field == #p1) return !engine::script_type<t1>().empty(); if (field == #p2) return !engine::script_type<t2>().empty(); if (field == #p3) return !engine::script_type<t3>().empty(); \
        return false; \
    } \
    std::any getFieldDefaultValue(const std::string& field) { \
        if (field == #p1) return p1(); if (field == #p2) return p2(); if (field == #p3) return p3(); \
        return {}; \
    } \
    void setFieldValue(const std::string& field, const std::any& value, const awe::overrides& overrides) { \
        if (field == #p1) p1(overrides) = std::any_cast<t1>(value); if (field == #p2) p2(overrides) = std::any_cast<t2>(value); if (field == #p3) p3(overrides) = std::any_cast<t3>(value); \
    } \
    a \
};

#define GAME_PROPERTY_4(cc, ac, gp, i, p1, t1, o1, d1, e1, p2, t2, o2, d2, e2, p3, t3, o3, d3, e3, p4, t4, o4, d4, e4, d, e, a) class cc { \
    std::string _scriptName; \
public: \
	inline static const std::string type = ac; \
	inline static const std::string global_property = gp; \
    inline static const std::array<std::string, 4> fields = { #p1, #p2, #p3, #p4, }; \
    inline static const std::size_t overrideID = i; \
    cc(const std::string& scriptName, engine::json& j, engine::logger& logger, const std::shared_ptr<engine::scripts>& scripts) : \
        p1(j, scriptName, logger, scripts), p2(j, scriptName, logger, scripts), p3(j, scriptName, logger, scripts), p4(j, scriptName, logger, scripts), \
        _scriptName(scriptName) { e } \
	static void Register(asIScriptEngine* engine, const std::shared_ptr<DocumentationGenerator>& document) { \
        d \
		engine->RegisterObjectMethod(ac, "const string& scriptName() const", \
			asMETHOD(cc, scriptName), asCALL_THISCALL); \
        p1##_::Register(engine, document); p2##_::Register(engine, document); p3##_::Register(engine, document); p4##_::Register(engine, document); \
    } \
	inline const std::string& scriptName() const { return _scriptName; } \
    PROPERTY(cc, ac, p1, t1, i, o1, d1, e1) PROPERTY(cc, ac, p2, t2, i, o2, d2, e2) PROPERTY(cc, ac, p3, t3, i, o3, d3, e3) PROPERTY(cc, ac, p4, t4, i, o4, d4, e4) \
    inline static bool hasField(const std::string_view field) { \
        return field == #p1 || field == #p2 || field == #p3 || field == #p4 || false; \
    } \
	inline static std::string getFieldAngelScriptType(const std::string_view field) { \
		if (field == #p1) return engine::script_type<t1>(); if (field == #p2) return engine::script_type<t2>(); if (field == #p3) return engine::script_type<t3>(); if (field == #p4) return engine::script_type<t4>(); \
		return ""; \
	} \
	static std::any readFieldOverrideVariable(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		const asUINT variable) { \
		if (field == #p1) return awe::OverrideVariable<t1>::read(scripts, variable); if (field == #p2) return awe::OverrideVariable<t2>::read(scripts, variable); if (field == #p3) return awe::OverrideVariable<t3>::read(scripts, variable); if (field == #p4) return awe::OverrideVariable<t4>::read(scripts, variable); \
		return {}; \
	} \
	static std::any readFieldOverrideFunction(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		asIScriptFunction* const function, const std::any& parent) { \
		if (field == #p1) return awe::OverrideFunction<t1>::read(scripts, function, parent); if (field == #p2) return awe::OverrideFunction<t2>::read(scripts, function, parent); if (field == #p3) return awe::OverrideFunction<t3>::read(scripts, function, parent); if (field == #p4) return awe::OverrideFunction<t4>::read(scripts, function, parent); \
		return {}; \
	} \
    static bool isFieldOverrideable(const std::string& field) { \
        if (field == #p1) return !engine::script_type<t1>().empty(); if (field == #p2) return !engine::script_type<t2>().empty(); if (field == #p3) return !engine::script_type<t3>().empty(); if (field == #p4) return !engine::script_type<t4>().empty(); \
        return false; \
    } \
    std::any getFieldDefaultValue(const std::string& field) { \
        if (field == #p1) return p1(); if (field == #p2) return p2(); if (field == #p3) return p3(); if (field == #p4) return p4(); \
        return {}; \
    } \
    void setFieldValue(const std::string& field, const std::any& value, const awe::overrides& overrides) { \
        if (field == #p1) p1(overrides) = std::any_cast<t1>(value); if (field == #p2) p2(overrides) = std::any_cast<t2>(value); if (field == #p3) p3(overrides) = std::any_cast<t3>(value); if (field == #p4) p4(overrides) = std::any_cast<t4>(value); \
    } \
    a \
};

#define GAME_PROPERTY_5(cc, ac, gp, i, p1, t1, o1, d1, e1, p2, t2, o2, d2, e2, p3, t3, o3, d3, e3, p4, t4, o4, d4, e4, p5, t5, o5, d5, e5, d, e, a) class cc { \
    std::string _scriptName; \
public: \
	inline static const std::string type = ac; \
	inline static const std::string global_property = gp; \
    inline static const std::array<std::string, 5> fields = { #p1, #p2, #p3, #p4, #p5, }; \
    inline static const std::size_t overrideID = i; \
    cc(const std::string& scriptName, engine::json& j, engine::logger& logger, const std::shared_ptr<engine::scripts>& scripts) : \
        p1(j, scriptName, logger, scripts), p2(j, scriptName, logger, scripts), p3(j, scriptName, logger, scripts), p4(j, scriptName, logger, scripts), p5(j, scriptName, logger, scripts), \
        _scriptName(scriptName) { e } \
	static void Register(asIScriptEngine* engine, const std::shared_ptr<DocumentationGenerator>& document) { \
        d \
		engine->RegisterObjectMethod(ac, "const string& scriptName() const", \
			asMETHOD(cc, scriptName), asCALL_THISCALL); \
        p1##_::Register(engine, document); p2##_::Register(engine, document); p3##_::Register(engine, document); p4##_::Register(engine, document); p5##_::Register(engine, document); \
    } \
	inline const std::string& scriptName() const { return _scriptName; } \
    PROPERTY(cc, ac, p1, t1, i, o1, d1, e1) PROPERTY(cc, ac, p2, t2, i, o2, d2, e2) PROPERTY(cc, ac, p3, t3, i, o3, d3, e3) PROPERTY(cc, ac, p4, t4, i, o4, d4, e4) PROPERTY(cc, ac, p5, t5, i, o5, d5, e5) \
    inline static bool hasField(const std::string_view field) { \
        return field == #p1 || field == #p2 || field == #p3 || field == #p4 || field == #p5 || false; \
    } \
	inline static std::string getFieldAngelScriptType(const std::string_view field) { \
		if (field == #p1) return engine::script_type<t1>(); if (field == #p2) return engine::script_type<t2>(); if (field == #p3) return engine::script_type<t3>(); if (field == #p4) return engine::script_type<t4>(); if (field == #p5) return engine::script_type<t5>(); \
		return ""; \
	} \
	static std::any readFieldOverrideVariable(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		const asUINT variable) { \
		if (field == #p1) return awe::OverrideVariable<t1>::read(scripts, variable); if (field == #p2) return awe::OverrideVariable<t2>::read(scripts, variable); if (field == #p3) return awe::OverrideVariable<t3>::read(scripts, variable); if (field == #p4) return awe::OverrideVariable<t4>::read(scripts, variable); if (field == #p5) return awe::OverrideVariable<t5>::read(scripts, variable); \
		return {}; \
	} \
	static std::any readFieldOverrideFunction(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		asIScriptFunction* const function, const std::any& parent) { \
		if (field == #p1) return awe::OverrideFunction<t1>::read(scripts, function, parent); if (field == #p2) return awe::OverrideFunction<t2>::read(scripts, function, parent); if (field == #p3) return awe::OverrideFunction<t3>::read(scripts, function, parent); if (field == #p4) return awe::OverrideFunction<t4>::read(scripts, function, parent); if (field == #p5) return awe::OverrideFunction<t5>::read(scripts, function, parent); \
		return {}; \
	} \
    static bool isFieldOverrideable(const std::string& field) { \
        if (field == #p1) return !engine::script_type<t1>().empty(); if (field == #p2) return !engine::script_type<t2>().empty(); if (field == #p3) return !engine::script_type<t3>().empty(); if (field == #p4) return !engine::script_type<t4>().empty(); if (field == #p5) return !engine::script_type<t5>().empty(); \
        return false; \
    } \
    std::any getFieldDefaultValue(const std::string& field) { \
        if (field == #p1) return p1(); if (field == #p2) return p2(); if (field == #p3) return p3(); if (field == #p4) return p4(); if (field == #p5) return p5(); \
        return {}; \
    } \
    void setFieldValue(const std::string& field, const std::any& value, const awe::overrides& overrides) { \
        if (field == #p1) p1(overrides) = std::any_cast<t1>(value); if (field == #p2) p2(overrides) = std::any_cast<t2>(value); if (field == #p3) p3(overrides) = std::any_cast<t3>(value); if (field == #p4) p4(overrides) = std::any_cast<t4>(value); if (field == #p5) p5(overrides) = std::any_cast<t5>(value); \
    } \
    a \
};

#define GAME_PROPERTY_6(cc, ac, gp, i, p1, t1, o1, d1, e1, p2, t2, o2, d2, e2, p3, t3, o3, d3, e3, p4, t4, o4, d4, e4, p5, t5, o5, d5, e5, p6, t6, o6, d6, e6, d, e, a) class cc { \
    std::string _scriptName; \
public: \
	inline static const std::string type = ac; \
	inline static const std::string global_property = gp; \
    inline static const std::array<std::string, 6> fields = { #p1, #p2, #p3, #p4, #p5, #p6, }; \
    inline static const std::size_t overrideID = i; \
    cc(const std::string& scriptName, engine::json& j, engine::logger& logger, const std::shared_ptr<engine::scripts>& scripts) : \
        p1(j, scriptName, logger, scripts), p2(j, scriptName, logger, scripts), p3(j, scriptName, logger, scripts), p4(j, scriptName, logger, scripts), p5(j, scriptName, logger, scripts), p6(j, scriptName, logger, scripts), \
        _scriptName(scriptName) { e } \
	static void Register(asIScriptEngine* engine, const std::shared_ptr<DocumentationGenerator>& document) { \
        d \
		engine->RegisterObjectMethod(ac, "const string& scriptName() const", \
			asMETHOD(cc, scriptName), asCALL_THISCALL); \
        p1##_::Register(engine, document); p2##_::Register(engine, document); p3##_::Register(engine, document); p4##_::Register(engine, document); p5##_::Register(engine, document); p6##_::Register(engine, document); \
    } \
	inline const std::string& scriptName() const { return _scriptName; } \
    PROPERTY(cc, ac, p1, t1, i, o1, d1, e1) PROPERTY(cc, ac, p2, t2, i, o2, d2, e2) PROPERTY(cc, ac, p3, t3, i, o3, d3, e3) PROPERTY(cc, ac, p4, t4, i, o4, d4, e4) PROPERTY(cc, ac, p5, t5, i, o5, d5, e5) PROPERTY(cc, ac, p6, t6, i, o6, d6, e6) \
    inline static bool hasField(const std::string_view field) { \
        return field == #p1 || field == #p2 || field == #p3 || field == #p4 || field == #p5 || field == #p6 || false; \
    } \
	inline static std::string getFieldAngelScriptType(const std::string_view field) { \
		if (field == #p1) return engine::script_type<t1>(); if (field == #p2) return engine::script_type<t2>(); if (field == #p3) return engine::script_type<t3>(); if (field == #p4) return engine::script_type<t4>(); if (field == #p5) return engine::script_type<t5>(); if (field == #p6) return engine::script_type<t6>(); \
		return ""; \
	} \
	static std::any readFieldOverrideVariable(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		const asUINT variable) { \
		if (field == #p1) return awe::OverrideVariable<t1>::read(scripts, variable); if (field == #p2) return awe::OverrideVariable<t2>::read(scripts, variable); if (field == #p3) return awe::OverrideVariable<t3>::read(scripts, variable); if (field == #p4) return awe::OverrideVariable<t4>::read(scripts, variable); if (field == #p5) return awe::OverrideVariable<t5>::read(scripts, variable); if (field == #p6) return awe::OverrideVariable<t6>::read(scripts, variable); \
		return {}; \
	} \
	static std::any readFieldOverrideFunction(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		asIScriptFunction* const function, const std::any& parent) { \
		if (field == #p1) return awe::OverrideFunction<t1>::read(scripts, function, parent); if (field == #p2) return awe::OverrideFunction<t2>::read(scripts, function, parent); if (field == #p3) return awe::OverrideFunction<t3>::read(scripts, function, parent); if (field == #p4) return awe::OverrideFunction<t4>::read(scripts, function, parent); if (field == #p5) return awe::OverrideFunction<t5>::read(scripts, function, parent); if (field == #p6) return awe::OverrideFunction<t6>::read(scripts, function, parent); \
		return {}; \
	} \
    static bool isFieldOverrideable(const std::string& field) { \
        if (field == #p1) return !engine::script_type<t1>().empty(); if (field == #p2) return !engine::script_type<t2>().empty(); if (field == #p3) return !engine::script_type<t3>().empty(); if (field == #p4) return !engine::script_type<t4>().empty(); if (field == #p5) return !engine::script_type<t5>().empty(); if (field == #p6) return !engine::script_type<t6>().empty(); \
        return false; \
    } \
    std::any getFieldDefaultValue(const std::string& field) { \
        if (field == #p1) return p1(); if (field == #p2) return p2(); if (field == #p3) return p3(); if (field == #p4) return p4(); if (field == #p5) return p5(); if (field == #p6) return p6(); \
        return {}; \
    } \
    void setFieldValue(const std::string& field, const std::any& value, const awe::overrides& overrides) { \
        if (field == #p1) p1(overrides) = std::any_cast<t1>(value); if (field == #p2) p2(overrides) = std::any_cast<t2>(value); if (field == #p3) p3(overrides) = std::any_cast<t3>(value); if (field == #p4) p4(overrides) = std::any_cast<t4>(value); if (field == #p5) p5(overrides) = std::any_cast<t5>(value); if (field == #p6) p6(overrides) = std::any_cast<t6>(value); \
    } \
    a \
};

#define GAME_PROPERTY_7(cc, ac, gp, i, p1, t1, o1, d1, e1, p2, t2, o2, d2, e2, p3, t3, o3, d3, e3, p4, t4, o4, d4, e4, p5, t5, o5, d5, e5, p6, t6, o6, d6, e6, p7, t7, o7, d7, e7, d, e, a) class cc { \
    std::string _scriptName; \
public: \
	inline static const std::string type = ac; \
	inline static const std::string global_property = gp; \
    inline static const std::array<std::string, 7> fields = { #p1, #p2, #p3, #p4, #p5, #p6, #p7, }; \
    inline static const std::size_t overrideID = i; \
    cc(const std::string& scriptName, engine::json& j, engine::logger& logger, const std::shared_ptr<engine::scripts>& scripts) : \
        p1(j, scriptName, logger, scripts), p2(j, scriptName, logger, scripts), p3(j, scriptName, logger, scripts), p4(j, scriptName, logger, scripts), p5(j, scriptName, logger, scripts), p6(j, scriptName, logger, scripts), p7(j, scriptName, logger, scripts), \
        _scriptName(scriptName) { e } \
	static void Register(asIScriptEngine* engine, const std::shared_ptr<DocumentationGenerator>& document) { \
        d \
		engine->RegisterObjectMethod(ac, "const string& scriptName() const", \
			asMETHOD(cc, scriptName), asCALL_THISCALL); \
        p1##_::Register(engine, document); p2##_::Register(engine, document); p3##_::Register(engine, document); p4##_::Register(engine, document); p5##_::Register(engine, document); p6##_::Register(engine, document); p7##_::Register(engine, document); \
    } \
	inline const std::string& scriptName() const { return _scriptName; } \
    PROPERTY(cc, ac, p1, t1, i, o1, d1, e1) PROPERTY(cc, ac, p2, t2, i, o2, d2, e2) PROPERTY(cc, ac, p3, t3, i, o3, d3, e3) PROPERTY(cc, ac, p4, t4, i, o4, d4, e4) PROPERTY(cc, ac, p5, t5, i, o5, d5, e5) PROPERTY(cc, ac, p6, t6, i, o6, d6, e6) PROPERTY(cc, ac, p7, t7, i, o7, d7, e7) \
    inline static bool hasField(const std::string_view field) { \
        return field == #p1 || field == #p2 || field == #p3 || field == #p4 || field == #p5 || field == #p6 || field == #p7 || false; \
    } \
	inline static std::string getFieldAngelScriptType(const std::string_view field) { \
		if (field == #p1) return engine::script_type<t1>(); if (field == #p2) return engine::script_type<t2>(); if (field == #p3) return engine::script_type<t3>(); if (field == #p4) return engine::script_type<t4>(); if (field == #p5) return engine::script_type<t5>(); if (field == #p6) return engine::script_type<t6>(); if (field == #p7) return engine::script_type<t7>(); \
		return ""; \
	} \
	static std::any readFieldOverrideVariable(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		const asUINT variable) { \
		if (field == #p1) return awe::OverrideVariable<t1>::read(scripts, variable); if (field == #p2) return awe::OverrideVariable<t2>::read(scripts, variable); if (field == #p3) return awe::OverrideVariable<t3>::read(scripts, variable); if (field == #p4) return awe::OverrideVariable<t4>::read(scripts, variable); if (field == #p5) return awe::OverrideVariable<t5>::read(scripts, variable); if (field == #p6) return awe::OverrideVariable<t6>::read(scripts, variable); if (field == #p7) return awe::OverrideVariable<t7>::read(scripts, variable); \
		return {}; \
	} \
	static std::any readFieldOverrideFunction(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		asIScriptFunction* const function, const std::any& parent) { \
		if (field == #p1) return awe::OverrideFunction<t1>::read(scripts, function, parent); if (field == #p2) return awe::OverrideFunction<t2>::read(scripts, function, parent); if (field == #p3) return awe::OverrideFunction<t3>::read(scripts, function, parent); if (field == #p4) return awe::OverrideFunction<t4>::read(scripts, function, parent); if (field == #p5) return awe::OverrideFunction<t5>::read(scripts, function, parent); if (field == #p6) return awe::OverrideFunction<t6>::read(scripts, function, parent); if (field == #p7) return awe::OverrideFunction<t7>::read(scripts, function, parent); \
		return {}; \
	} \
    static bool isFieldOverrideable(const std::string& field) { \
        if (field == #p1) return !engine::script_type<t1>().empty(); if (field == #p2) return !engine::script_type<t2>().empty(); if (field == #p3) return !engine::script_type<t3>().empty(); if (field == #p4) return !engine::script_type<t4>().empty(); if (field == #p5) return !engine::script_type<t5>().empty(); if (field == #p6) return !engine::script_type<t6>().empty(); if (field == #p7) return !engine::script_type<t7>().empty(); \
        return false; \
    } \
    std::any getFieldDefaultValue(const std::string& field) { \
        if (field == #p1) return p1(); if (field == #p2) return p2(); if (field == #p3) return p3(); if (field == #p4) return p4(); if (field == #p5) return p5(); if (field == #p6) return p6(); if (field == #p7) return p7(); \
        return {}; \
    } \
    void setFieldValue(const std::string& field, const std::any& value, const awe::overrides& overrides) { \
        if (field == #p1) p1(overrides) = std::any_cast<t1>(value); if (field == #p2) p2(overrides) = std::any_cast<t2>(value); if (field == #p3) p3(overrides) = std::any_cast<t3>(value); if (field == #p4) p4(overrides) = std::any_cast<t4>(value); if (field == #p5) p5(overrides) = std::any_cast<t5>(value); if (field == #p6) p6(overrides) = std::any_cast<t6>(value); if (field == #p7) p7(overrides) = std::any_cast<t7>(value); \
    } \
    a \
};

#define GAME_PROPERTY_8(cc, ac, gp, i, p1, t1, o1, d1, e1, p2, t2, o2, d2, e2, p3, t3, o3, d3, e3, p4, t4, o4, d4, e4, p5, t5, o5, d5, e5, p6, t6, o6, d6, e6, p7, t7, o7, d7, e7, p8, t8, o8, d8, e8, d, e, a) class cc { \
    std::string _scriptName; \
public: \
	inline static const std::string type = ac; \
	inline static const std::string global_property = gp; \
    inline static const std::array<std::string, 8> fields = { #p1, #p2, #p3, #p4, #p5, #p6, #p7, #p8, }; \
    inline static const std::size_t overrideID = i; \
    cc(const std::string& scriptName, engine::json& j, engine::logger& logger, const std::shared_ptr<engine::scripts>& scripts) : \
        p1(j, scriptName, logger, scripts), p2(j, scriptName, logger, scripts), p3(j, scriptName, logger, scripts), p4(j, scriptName, logger, scripts), p5(j, scriptName, logger, scripts), p6(j, scriptName, logger, scripts), p7(j, scriptName, logger, scripts), p8(j, scriptName, logger, scripts), \
        _scriptName(scriptName) { e } \
	static void Register(asIScriptEngine* engine, const std::shared_ptr<DocumentationGenerator>& document) { \
        d \
		engine->RegisterObjectMethod(ac, "const string& scriptName() const", \
			asMETHOD(cc, scriptName), asCALL_THISCALL); \
        p1##_::Register(engine, document); p2##_::Register(engine, document); p3##_::Register(engine, document); p4##_::Register(engine, document); p5##_::Register(engine, document); p6##_::Register(engine, document); p7##_::Register(engine, document); p8##_::Register(engine, document); \
    } \
	inline const std::string& scriptName() const { return _scriptName; } \
    PROPERTY(cc, ac, p1, t1, i, o1, d1, e1) PROPERTY(cc, ac, p2, t2, i, o2, d2, e2) PROPERTY(cc, ac, p3, t3, i, o3, d3, e3) PROPERTY(cc, ac, p4, t4, i, o4, d4, e4) PROPERTY(cc, ac, p5, t5, i, o5, d5, e5) PROPERTY(cc, ac, p6, t6, i, o6, d6, e6) PROPERTY(cc, ac, p7, t7, i, o7, d7, e7) PROPERTY(cc, ac, p8, t8, i, o8, d8, e8) \
    inline static bool hasField(const std::string_view field) { \
        return field == #p1 || field == #p2 || field == #p3 || field == #p4 || field == #p5 || field == #p6 || field == #p7 || field == #p8 || false; \
    } \
	inline static std::string getFieldAngelScriptType(const std::string_view field) { \
		if (field == #p1) return engine::script_type<t1>(); if (field == #p2) return engine::script_type<t2>(); if (field == #p3) return engine::script_type<t3>(); if (field == #p4) return engine::script_type<t4>(); if (field == #p5) return engine::script_type<t5>(); if (field == #p6) return engine::script_type<t6>(); if (field == #p7) return engine::script_type<t7>(); if (field == #p8) return engine::script_type<t8>(); \
		return ""; \
	} \
	static std::any readFieldOverrideVariable(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		const asUINT variable) { \
		if (field == #p1) return awe::OverrideVariable<t1>::read(scripts, variable); if (field == #p2) return awe::OverrideVariable<t2>::read(scripts, variable); if (field == #p3) return awe::OverrideVariable<t3>::read(scripts, variable); if (field == #p4) return awe::OverrideVariable<t4>::read(scripts, variable); if (field == #p5) return awe::OverrideVariable<t5>::read(scripts, variable); if (field == #p6) return awe::OverrideVariable<t6>::read(scripts, variable); if (field == #p7) return awe::OverrideVariable<t7>::read(scripts, variable); if (field == #p8) return awe::OverrideVariable<t8>::read(scripts, variable); \
		return {}; \
	} \
	static std::any readFieldOverrideFunction(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		asIScriptFunction* const function, const std::any& parent) { \
		if (field == #p1) return awe::OverrideFunction<t1>::read(scripts, function, parent); if (field == #p2) return awe::OverrideFunction<t2>::read(scripts, function, parent); if (field == #p3) return awe::OverrideFunction<t3>::read(scripts, function, parent); if (field == #p4) return awe::OverrideFunction<t4>::read(scripts, function, parent); if (field == #p5) return awe::OverrideFunction<t5>::read(scripts, function, parent); if (field == #p6) return awe::OverrideFunction<t6>::read(scripts, function, parent); if (field == #p7) return awe::OverrideFunction<t7>::read(scripts, function, parent); if (field == #p8) return awe::OverrideFunction<t8>::read(scripts, function, parent); \
		return {}; \
	} \
    static bool isFieldOverrideable(const std::string& field) { \
        if (field == #p1) return !engine::script_type<t1>().empty(); if (field == #p2) return !engine::script_type<t2>().empty(); if (field == #p3) return !engine::script_type<t3>().empty(); if (field == #p4) return !engine::script_type<t4>().empty(); if (field == #p5) return !engine::script_type<t5>().empty(); if (field == #p6) return !engine::script_type<t6>().empty(); if (field == #p7) return !engine::script_type<t7>().empty(); if (field == #p8) return !engine::script_type<t8>().empty(); \
        return false; \
    } \
    std::any getFieldDefaultValue(const std::string& field) { \
        if (field == #p1) return p1(); if (field == #p2) return p2(); if (field == #p3) return p3(); if (field == #p4) return p4(); if (field == #p5) return p5(); if (field == #p6) return p6(); if (field == #p7) return p7(); if (field == #p8) return p8(); \
        return {}; \
    } \
    void setFieldValue(const std::string& field, const std::any& value, const awe::overrides& overrides) { \
        if (field == #p1) p1(overrides) = std::any_cast<t1>(value); if (field == #p2) p2(overrides) = std::any_cast<t2>(value); if (field == #p3) p3(overrides) = std::any_cast<t3>(value); if (field == #p4) p4(overrides) = std::any_cast<t4>(value); if (field == #p5) p5(overrides) = std::any_cast<t5>(value); if (field == #p6) p6(overrides) = std::any_cast<t6>(value); if (field == #p7) p7(overrides) = std::any_cast<t7>(value); if (field == #p8) p8(overrides) = std::any_cast<t8>(value); \
    } \
    a \
};

#define GAME_PROPERTY_9(cc, ac, gp, i, p1, t1, o1, d1, e1, p2, t2, o2, d2, e2, p3, t3, o3, d3, e3, p4, t4, o4, d4, e4, p5, t5, o5, d5, e5, p6, t6, o6, d6, e6, p7, t7, o7, d7, e7, p8, t8, o8, d8, e8, p9, t9, o9, d9, e9, d, e, a) class cc { \
    std::string _scriptName; \
public: \
	inline static const std::string type = ac; \
	inline static const std::string global_property = gp; \
    inline static const std::array<std::string, 9> fields = { #p1, #p2, #p3, #p4, #p5, #p6, #p7, #p8, #p9, }; \
    inline static const std::size_t overrideID = i; \
    cc(const std::string& scriptName, engine::json& j, engine::logger& logger, const std::shared_ptr<engine::scripts>& scripts) : \
        p1(j, scriptName, logger, scripts), p2(j, scriptName, logger, scripts), p3(j, scriptName, logger, scripts), p4(j, scriptName, logger, scripts), p5(j, scriptName, logger, scripts), p6(j, scriptName, logger, scripts), p7(j, scriptName, logger, scripts), p8(j, scriptName, logger, scripts), p9(j, scriptName, logger, scripts), \
        _scriptName(scriptName) { e } \
	static void Register(asIScriptEngine* engine, const std::shared_ptr<DocumentationGenerator>& document) { \
        d \
		engine->RegisterObjectMethod(ac, "const string& scriptName() const", \
			asMETHOD(cc, scriptName), asCALL_THISCALL); \
        p1##_::Register(engine, document); p2##_::Register(engine, document); p3##_::Register(engine, document); p4##_::Register(engine, document); p5##_::Register(engine, document); p6##_::Register(engine, document); p7##_::Register(engine, document); p8##_::Register(engine, document); p9##_::Register(engine, document); \
    } \
	inline const std::string& scriptName() const { return _scriptName; } \
    PROPERTY(cc, ac, p1, t1, i, o1, d1, e1) PROPERTY(cc, ac, p2, t2, i, o2, d2, e2) PROPERTY(cc, ac, p3, t3, i, o3, d3, e3) PROPERTY(cc, ac, p4, t4, i, o4, d4, e4) PROPERTY(cc, ac, p5, t5, i, o5, d5, e5) PROPERTY(cc, ac, p6, t6, i, o6, d6, e6) PROPERTY(cc, ac, p7, t7, i, o7, d7, e7) PROPERTY(cc, ac, p8, t8, i, o8, d8, e8) PROPERTY(cc, ac, p9, t9, i, o9, d9, e9) \
    inline static bool hasField(const std::string_view field) { \
        return field == #p1 || field == #p2 || field == #p3 || field == #p4 || field == #p5 || field == #p6 || field == #p7 || field == #p8 || field == #p9 || false; \
    } \
	inline static std::string getFieldAngelScriptType(const std::string_view field) { \
		if (field == #p1) return engine::script_type<t1>(); if (field == #p2) return engine::script_type<t2>(); if (field == #p3) return engine::script_type<t3>(); if (field == #p4) return engine::script_type<t4>(); if (field == #p5) return engine::script_type<t5>(); if (field == #p6) return engine::script_type<t6>(); if (field == #p7) return engine::script_type<t7>(); if (field == #p8) return engine::script_type<t8>(); if (field == #p9) return engine::script_type<t9>(); \
		return ""; \
	} \
	static std::any readFieldOverrideVariable(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		const asUINT variable) { \
		if (field == #p1) return awe::OverrideVariable<t1>::read(scripts, variable); if (field == #p2) return awe::OverrideVariable<t2>::read(scripts, variable); if (field == #p3) return awe::OverrideVariable<t3>::read(scripts, variable); if (field == #p4) return awe::OverrideVariable<t4>::read(scripts, variable); if (field == #p5) return awe::OverrideVariable<t5>::read(scripts, variable); if (field == #p6) return awe::OverrideVariable<t6>::read(scripts, variable); if (field == #p7) return awe::OverrideVariable<t7>::read(scripts, variable); if (field == #p8) return awe::OverrideVariable<t8>::read(scripts, variable); if (field == #p9) return awe::OverrideVariable<t9>::read(scripts, variable); \
		return {}; \
	} \
	static std::any readFieldOverrideFunction(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		asIScriptFunction* const function, const std::any& parent) { \
		if (field == #p1) return awe::OverrideFunction<t1>::read(scripts, function, parent); if (field == #p2) return awe::OverrideFunction<t2>::read(scripts, function, parent); if (field == #p3) return awe::OverrideFunction<t3>::read(scripts, function, parent); if (field == #p4) return awe::OverrideFunction<t4>::read(scripts, function, parent); if (field == #p5) return awe::OverrideFunction<t5>::read(scripts, function, parent); if (field == #p6) return awe::OverrideFunction<t6>::read(scripts, function, parent); if (field == #p7) return awe::OverrideFunction<t7>::read(scripts, function, parent); if (field == #p8) return awe::OverrideFunction<t8>::read(scripts, function, parent); if (field == #p9) return awe::OverrideFunction<t9>::read(scripts, function, parent); \
		return {}; \
	} \
    static bool isFieldOverrideable(const std::string& field) { \
        if (field == #p1) return !engine::script_type<t1>().empty(); if (field == #p2) return !engine::script_type<t2>().empty(); if (field == #p3) return !engine::script_type<t3>().empty(); if (field == #p4) return !engine::script_type<t4>().empty(); if (field == #p5) return !engine::script_type<t5>().empty(); if (field == #p6) return !engine::script_type<t6>().empty(); if (field == #p7) return !engine::script_type<t7>().empty(); if (field == #p8) return !engine::script_type<t8>().empty(); if (field == #p9) return !engine::script_type<t9>().empty(); \
        return false; \
    } \
    std::any getFieldDefaultValue(const std::string& field) { \
        if (field == #p1) return p1(); if (field == #p2) return p2(); if (field == #p3) return p3(); if (field == #p4) return p4(); if (field == #p5) return p5(); if (field == #p6) return p6(); if (field == #p7) return p7(); if (field == #p8) return p8(); if (field == #p9) return p9(); \
        return {}; \
    } \
    void setFieldValue(const std::string& field, const std::any& value, const awe::overrides& overrides) { \
        if (field == #p1) p1(overrides) = std::any_cast<t1>(value); if (field == #p2) p2(overrides) = std::any_cast<t2>(value); if (field == #p3) p3(overrides) = std::any_cast<t3>(value); if (field == #p4) p4(overrides) = std::any_cast<t4>(value); if (field == #p5) p5(overrides) = std::any_cast<t5>(value); if (field == #p6) p6(overrides) = std::any_cast<t6>(value); if (field == #p7) p7(overrides) = std::any_cast<t7>(value); if (field == #p8) p8(overrides) = std::any_cast<t8>(value); if (field == #p9) p9(overrides) = std::any_cast<t9>(value); \
    } \
    a \
};

#define GAME_PROPERTY_10(cc, ac, gp, i, p1, t1, o1, d1, e1, p2, t2, o2, d2, e2, p3, t3, o3, d3, e3, p4, t4, o4, d4, e4, p5, t5, o5, d5, e5, p6, t6, o6, d6, e6, p7, t7, o7, d7, e7, p8, t8, o8, d8, e8, p9, t9, o9, d9, e9, p10, t10, o10, d10, e10, d, e, a) class cc { \
    std::string _scriptName; \
public: \
	inline static const std::string type = ac; \
	inline static const std::string global_property = gp; \
    inline static const std::array<std::string, 10> fields = { #p1, #p2, #p3, #p4, #p5, #p6, #p7, #p8, #p9, #p10, }; \
    inline static const std::size_t overrideID = i; \
    cc(const std::string& scriptName, engine::json& j, engine::logger& logger, const std::shared_ptr<engine::scripts>& scripts) : \
        p1(j, scriptName, logger, scripts), p2(j, scriptName, logger, scripts), p3(j, scriptName, logger, scripts), p4(j, scriptName, logger, scripts), p5(j, scriptName, logger, scripts), p6(j, scriptName, logger, scripts), p7(j, scriptName, logger, scripts), p8(j, scriptName, logger, scripts), p9(j, scriptName, logger, scripts), p10(j, scriptName, logger, scripts), \
        _scriptName(scriptName) { e } \
	static void Register(asIScriptEngine* engine, const std::shared_ptr<DocumentationGenerator>& document) { \
        d \
		engine->RegisterObjectMethod(ac, "const string& scriptName() const", \
			asMETHOD(cc, scriptName), asCALL_THISCALL); \
        p1##_::Register(engine, document); p2##_::Register(engine, document); p3##_::Register(engine, document); p4##_::Register(engine, document); p5##_::Register(engine, document); p6##_::Register(engine, document); p7##_::Register(engine, document); p8##_::Register(engine, document); p9##_::Register(engine, document); p10##_::Register(engine, document); \
    } \
	inline const std::string& scriptName() const { return _scriptName; } \
    PROPERTY(cc, ac, p1, t1, i, o1, d1, e1) PROPERTY(cc, ac, p2, t2, i, o2, d2, e2) PROPERTY(cc, ac, p3, t3, i, o3, d3, e3) PROPERTY(cc, ac, p4, t4, i, o4, d4, e4) PROPERTY(cc, ac, p5, t5, i, o5, d5, e5) PROPERTY(cc, ac, p6, t6, i, o6, d6, e6) PROPERTY(cc, ac, p7, t7, i, o7, d7, e7) PROPERTY(cc, ac, p8, t8, i, o8, d8, e8) PROPERTY(cc, ac, p9, t9, i, o9, d9, e9) PROPERTY(cc, ac, p10, t10, i, o10, d10, e10) \
    inline static bool hasField(const std::string_view field) { \
        return field == #p1 || field == #p2 || field == #p3 || field == #p4 || field == #p5 || field == #p6 || field == #p7 || field == #p8 || field == #p9 || field == #p10 || false; \
    } \
	inline static std::string getFieldAngelScriptType(const std::string_view field) { \
		if (field == #p1) return engine::script_type<t1>(); if (field == #p2) return engine::script_type<t2>(); if (field == #p3) return engine::script_type<t3>(); if (field == #p4) return engine::script_type<t4>(); if (field == #p5) return engine::script_type<t5>(); if (field == #p6) return engine::script_type<t6>(); if (field == #p7) return engine::script_type<t7>(); if (field == #p8) return engine::script_type<t8>(); if (field == #p9) return engine::script_type<t9>(); if (field == #p10) return engine::script_type<t10>(); \
		return ""; \
	} \
	static std::any readFieldOverrideVariable(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		const asUINT variable) { \
		if (field == #p1) return awe::OverrideVariable<t1>::read(scripts, variable); if (field == #p2) return awe::OverrideVariable<t2>::read(scripts, variable); if (field == #p3) return awe::OverrideVariable<t3>::read(scripts, variable); if (field == #p4) return awe::OverrideVariable<t4>::read(scripts, variable); if (field == #p5) return awe::OverrideVariable<t5>::read(scripts, variable); if (field == #p6) return awe::OverrideVariable<t6>::read(scripts, variable); if (field == #p7) return awe::OverrideVariable<t7>::read(scripts, variable); if (field == #p8) return awe::OverrideVariable<t8>::read(scripts, variable); if (field == #p9) return awe::OverrideVariable<t9>::read(scripts, variable); if (field == #p10) return awe::OverrideVariable<t10>::read(scripts, variable); \
		return {}; \
	} \
	static std::any readFieldOverrideFunction(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		asIScriptFunction* const function, const std::any& parent) { \
		if (field == #p1) return awe::OverrideFunction<t1>::read(scripts, function, parent); if (field == #p2) return awe::OverrideFunction<t2>::read(scripts, function, parent); if (field == #p3) return awe::OverrideFunction<t3>::read(scripts, function, parent); if (field == #p4) return awe::OverrideFunction<t4>::read(scripts, function, parent); if (field == #p5) return awe::OverrideFunction<t5>::read(scripts, function, parent); if (field == #p6) return awe::OverrideFunction<t6>::read(scripts, function, parent); if (field == #p7) return awe::OverrideFunction<t7>::read(scripts, function, parent); if (field == #p8) return awe::OverrideFunction<t8>::read(scripts, function, parent); if (field == #p9) return awe::OverrideFunction<t9>::read(scripts, function, parent); if (field == #p10) return awe::OverrideFunction<t10>::read(scripts, function, parent); \
		return {}; \
	} \
    static bool isFieldOverrideable(const std::string& field) { \
        if (field == #p1) return !engine::script_type<t1>().empty(); if (field == #p2) return !engine::script_type<t2>().empty(); if (field == #p3) return !engine::script_type<t3>().empty(); if (field == #p4) return !engine::script_type<t4>().empty(); if (field == #p5) return !engine::script_type<t5>().empty(); if (field == #p6) return !engine::script_type<t6>().empty(); if (field == #p7) return !engine::script_type<t7>().empty(); if (field == #p8) return !engine::script_type<t8>().empty(); if (field == #p9) return !engine::script_type<t9>().empty(); if (field == #p10) return !engine::script_type<t10>().empty(); \
        return false; \
    } \
    std::any getFieldDefaultValue(const std::string& field) { \
        if (field == #p1) return p1(); if (field == #p2) return p2(); if (field == #p3) return p3(); if (field == #p4) return p4(); if (field == #p5) return p5(); if (field == #p6) return p6(); if (field == #p7) return p7(); if (field == #p8) return p8(); if (field == #p9) return p9(); if (field == #p10) return p10(); \
        return {}; \
    } \
    void setFieldValue(const std::string& field, const std::any& value, const awe::overrides& overrides) { \
        if (field == #p1) p1(overrides) = std::any_cast<t1>(value); if (field == #p2) p2(overrides) = std::any_cast<t2>(value); if (field == #p3) p3(overrides) = std::any_cast<t3>(value); if (field == #p4) p4(overrides) = std::any_cast<t4>(value); if (field == #p5) p5(overrides) = std::any_cast<t5>(value); if (field == #p6) p6(overrides) = std::any_cast<t6>(value); if (field == #p7) p7(overrides) = std::any_cast<t7>(value); if (field == #p8) p8(overrides) = std::any_cast<t8>(value); if (field == #p9) p9(overrides) = std::any_cast<t9>(value); if (field == #p10) p10(overrides) = std::any_cast<t10>(value); \
    } \
    a \
};

#define GAME_PROPERTY_11(cc, ac, gp, i, p1, t1, o1, d1, e1, p2, t2, o2, d2, e2, p3, t3, o3, d3, e3, p4, t4, o4, d4, e4, p5, t5, o5, d5, e5, p6, t6, o6, d6, e6, p7, t7, o7, d7, e7, p8, t8, o8, d8, e8, p9, t9, o9, d9, e9, p10, t10, o10, d10, e10, p11, t11, o11, d11, e11, d, e, a) class cc { \
    std::string _scriptName; \
public: \
	inline static const std::string type = ac; \
	inline static const std::string global_property = gp; \
    inline static const std::array<std::string, 11> fields = { #p1, #p2, #p3, #p4, #p5, #p6, #p7, #p8, #p9, #p10, #p11, }; \
    inline static const std::size_t overrideID = i; \
    cc(const std::string& scriptName, engine::json& j, engine::logger& logger, const std::shared_ptr<engine::scripts>& scripts) : \
        p1(j, scriptName, logger, scripts), p2(j, scriptName, logger, scripts), p3(j, scriptName, logger, scripts), p4(j, scriptName, logger, scripts), p5(j, scriptName, logger, scripts), p6(j, scriptName, logger, scripts), p7(j, scriptName, logger, scripts), p8(j, scriptName, logger, scripts), p9(j, scriptName, logger, scripts), p10(j, scriptName, logger, scripts), p11(j, scriptName, logger, scripts), \
        _scriptName(scriptName) { e } \
	static void Register(asIScriptEngine* engine, const std::shared_ptr<DocumentationGenerator>& document) { \
        d \
		engine->RegisterObjectMethod(ac, "const string& scriptName() const", \
			asMETHOD(cc, scriptName), asCALL_THISCALL); \
        p1##_::Register(engine, document); p2##_::Register(engine, document); p3##_::Register(engine, document); p4##_::Register(engine, document); p5##_::Register(engine, document); p6##_::Register(engine, document); p7##_::Register(engine, document); p8##_::Register(engine, document); p9##_::Register(engine, document); p10##_::Register(engine, document); p11##_::Register(engine, document); \
    } \
	inline const std::string& scriptName() const { return _scriptName; } \
    PROPERTY(cc, ac, p1, t1, i, o1, d1, e1) PROPERTY(cc, ac, p2, t2, i, o2, d2, e2) PROPERTY(cc, ac, p3, t3, i, o3, d3, e3) PROPERTY(cc, ac, p4, t4, i, o4, d4, e4) PROPERTY(cc, ac, p5, t5, i, o5, d5, e5) PROPERTY(cc, ac, p6, t6, i, o6, d6, e6) PROPERTY(cc, ac, p7, t7, i, o7, d7, e7) PROPERTY(cc, ac, p8, t8, i, o8, d8, e8) PROPERTY(cc, ac, p9, t9, i, o9, d9, e9) PROPERTY(cc, ac, p10, t10, i, o10, d10, e10) PROPERTY(cc, ac, p11, t11, i, o11, d11, e11) \
    inline static bool hasField(const std::string_view field) { \
        return field == #p1 || field == #p2 || field == #p3 || field == #p4 || field == #p5 || field == #p6 || field == #p7 || field == #p8 || field == #p9 || field == #p10 || field == #p11 || false; \
    } \
	inline static std::string getFieldAngelScriptType(const std::string_view field) { \
		if (field == #p1) return engine::script_type<t1>(); if (field == #p2) return engine::script_type<t2>(); if (field == #p3) return engine::script_type<t3>(); if (field == #p4) return engine::script_type<t4>(); if (field == #p5) return engine::script_type<t5>(); if (field == #p6) return engine::script_type<t6>(); if (field == #p7) return engine::script_type<t7>(); if (field == #p8) return engine::script_type<t8>(); if (field == #p9) return engine::script_type<t9>(); if (field == #p10) return engine::script_type<t10>(); if (field == #p11) return engine::script_type<t11>(); \
		return ""; \
	} \
	static std::any readFieldOverrideVariable(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		const asUINT variable) { \
		if (field == #p1) return awe::OverrideVariable<t1>::read(scripts, variable); if (field == #p2) return awe::OverrideVariable<t2>::read(scripts, variable); if (field == #p3) return awe::OverrideVariable<t3>::read(scripts, variable); if (field == #p4) return awe::OverrideVariable<t4>::read(scripts, variable); if (field == #p5) return awe::OverrideVariable<t5>::read(scripts, variable); if (field == #p6) return awe::OverrideVariable<t6>::read(scripts, variable); if (field == #p7) return awe::OverrideVariable<t7>::read(scripts, variable); if (field == #p8) return awe::OverrideVariable<t8>::read(scripts, variable); if (field == #p9) return awe::OverrideVariable<t9>::read(scripts, variable); if (field == #p10) return awe::OverrideVariable<t10>::read(scripts, variable); if (field == #p11) return awe::OverrideVariable<t11>::read(scripts, variable); \
		return {}; \
	} \
	static std::any readFieldOverrideFunction(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		asIScriptFunction* const function, const std::any& parent) { \
		if (field == #p1) return awe::OverrideFunction<t1>::read(scripts, function, parent); if (field == #p2) return awe::OverrideFunction<t2>::read(scripts, function, parent); if (field == #p3) return awe::OverrideFunction<t3>::read(scripts, function, parent); if (field == #p4) return awe::OverrideFunction<t4>::read(scripts, function, parent); if (field == #p5) return awe::OverrideFunction<t5>::read(scripts, function, parent); if (field == #p6) return awe::OverrideFunction<t6>::read(scripts, function, parent); if (field == #p7) return awe::OverrideFunction<t7>::read(scripts, function, parent); if (field == #p8) return awe::OverrideFunction<t8>::read(scripts, function, parent); if (field == #p9) return awe::OverrideFunction<t9>::read(scripts, function, parent); if (field == #p10) return awe::OverrideFunction<t10>::read(scripts, function, parent); if (field == #p11) return awe::OverrideFunction<t11>::read(scripts, function, parent); \
		return {}; \
	} \
    static bool isFieldOverrideable(const std::string& field) { \
        if (field == #p1) return !engine::script_type<t1>().empty(); if (field == #p2) return !engine::script_type<t2>().empty(); if (field == #p3) return !engine::script_type<t3>().empty(); if (field == #p4) return !engine::script_type<t4>().empty(); if (field == #p5) return !engine::script_type<t5>().empty(); if (field == #p6) return !engine::script_type<t6>().empty(); if (field == #p7) return !engine::script_type<t7>().empty(); if (field == #p8) return !engine::script_type<t8>().empty(); if (field == #p9) return !engine::script_type<t9>().empty(); if (field == #p10) return !engine::script_type<t10>().empty(); if (field == #p11) return !engine::script_type<t11>().empty(); \
        return false; \
    } \
    std::any getFieldDefaultValue(const std::string& field) { \
        if (field == #p1) return p1(); if (field == #p2) return p2(); if (field == #p3) return p3(); if (field == #p4) return p4(); if (field == #p5) return p5(); if (field == #p6) return p6(); if (field == #p7) return p7(); if (field == #p8) return p8(); if (field == #p9) return p9(); if (field == #p10) return p10(); if (field == #p11) return p11(); \
        return {}; \
    } \
    void setFieldValue(const std::string& field, const std::any& value, const awe::overrides& overrides) { \
        if (field == #p1) p1(overrides) = std::any_cast<t1>(value); if (field == #p2) p2(overrides) = std::any_cast<t2>(value); if (field == #p3) p3(overrides) = std::any_cast<t3>(value); if (field == #p4) p4(overrides) = std::any_cast<t4>(value); if (field == #p5) p5(overrides) = std::any_cast<t5>(value); if (field == #p6) p6(overrides) = std::any_cast<t6>(value); if (field == #p7) p7(overrides) = std::any_cast<t7>(value); if (field == #p8) p8(overrides) = std::any_cast<t8>(value); if (field == #p9) p9(overrides) = std::any_cast<t9>(value); if (field == #p10) p10(overrides) = std::any_cast<t10>(value); if (field == #p11) p11(overrides) = std::any_cast<t11>(value); \
    } \
    a \
};

#define GAME_PROPERTY_12(cc, ac, gp, i, p1, t1, o1, d1, e1, p2, t2, o2, d2, e2, p3, t3, o3, d3, e3, p4, t4, o4, d4, e4, p5, t5, o5, d5, e5, p6, t6, o6, d6, e6, p7, t7, o7, d7, e7, p8, t8, o8, d8, e8, p9, t9, o9, d9, e9, p10, t10, o10, d10, e10, p11, t11, o11, d11, e11, p12, t12, o12, d12, e12, d, e, a) class cc { \
    std::string _scriptName; \
public: \
	inline static const std::string type = ac; \
	inline static const std::string global_property = gp; \
    inline static const std::array<std::string, 12> fields = { #p1, #p2, #p3, #p4, #p5, #p6, #p7, #p8, #p9, #p10, #p11, #p12, }; \
    inline static const std::size_t overrideID = i; \
    cc(const std::string& scriptName, engine::json& j, engine::logger& logger, const std::shared_ptr<engine::scripts>& scripts) : \
        p1(j, scriptName, logger, scripts), p2(j, scriptName, logger, scripts), p3(j, scriptName, logger, scripts), p4(j, scriptName, logger, scripts), p5(j, scriptName, logger, scripts), p6(j, scriptName, logger, scripts), p7(j, scriptName, logger, scripts), p8(j, scriptName, logger, scripts), p9(j, scriptName, logger, scripts), p10(j, scriptName, logger, scripts), p11(j, scriptName, logger, scripts), p12(j, scriptName, logger, scripts), \
        _scriptName(scriptName) { e } \
	static void Register(asIScriptEngine* engine, const std::shared_ptr<DocumentationGenerator>& document) { \
        d \
		engine->RegisterObjectMethod(ac, "const string& scriptName() const", \
			asMETHOD(cc, scriptName), asCALL_THISCALL); \
        p1##_::Register(engine, document); p2##_::Register(engine, document); p3##_::Register(engine, document); p4##_::Register(engine, document); p5##_::Register(engine, document); p6##_::Register(engine, document); p7##_::Register(engine, document); p8##_::Register(engine, document); p9##_::Register(engine, document); p10##_::Register(engine, document); p11##_::Register(engine, document); p12##_::Register(engine, document); \
    } \
	inline const std::string& scriptName() const { return _scriptName; } \
    PROPERTY(cc, ac, p1, t1, i, o1, d1, e1) PROPERTY(cc, ac, p2, t2, i, o2, d2, e2) PROPERTY(cc, ac, p3, t3, i, o3, d3, e3) PROPERTY(cc, ac, p4, t4, i, o4, d4, e4) PROPERTY(cc, ac, p5, t5, i, o5, d5, e5) PROPERTY(cc, ac, p6, t6, i, o6, d6, e6) PROPERTY(cc, ac, p7, t7, i, o7, d7, e7) PROPERTY(cc, ac, p8, t8, i, o8, d8, e8) PROPERTY(cc, ac, p9, t9, i, o9, d9, e9) PROPERTY(cc, ac, p10, t10, i, o10, d10, e10) PROPERTY(cc, ac, p11, t11, i, o11, d11, e11) PROPERTY(cc, ac, p12, t12, i, o12, d12, e12) \
    inline static bool hasField(const std::string_view field) { \
        return field == #p1 || field == #p2 || field == #p3 || field == #p4 || field == #p5 || field == #p6 || field == #p7 || field == #p8 || field == #p9 || field == #p10 || field == #p11 || field == #p12 || false; \
    } \
	inline static std::string getFieldAngelScriptType(const std::string_view field) { \
		if (field == #p1) return engine::script_type<t1>(); if (field == #p2) return engine::script_type<t2>(); if (field == #p3) return engine::script_type<t3>(); if (field == #p4) return engine::script_type<t4>(); if (field == #p5) return engine::script_type<t5>(); if (field == #p6) return engine::script_type<t6>(); if (field == #p7) return engine::script_type<t7>(); if (field == #p8) return engine::script_type<t8>(); if (field == #p9) return engine::script_type<t9>(); if (field == #p10) return engine::script_type<t10>(); if (field == #p11) return engine::script_type<t11>(); if (field == #p12) return engine::script_type<t12>(); \
		return ""; \
	} \
	static std::any readFieldOverrideVariable(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		const asUINT variable) { \
		if (field == #p1) return awe::OverrideVariable<t1>::read(scripts, variable); if (field == #p2) return awe::OverrideVariable<t2>::read(scripts, variable); if (field == #p3) return awe::OverrideVariable<t3>::read(scripts, variable); if (field == #p4) return awe::OverrideVariable<t4>::read(scripts, variable); if (field == #p5) return awe::OverrideVariable<t5>::read(scripts, variable); if (field == #p6) return awe::OverrideVariable<t6>::read(scripts, variable); if (field == #p7) return awe::OverrideVariable<t7>::read(scripts, variable); if (field == #p8) return awe::OverrideVariable<t8>::read(scripts, variable); if (field == #p9) return awe::OverrideVariable<t9>::read(scripts, variable); if (field == #p10) return awe::OverrideVariable<t10>::read(scripts, variable); if (field == #p11) return awe::OverrideVariable<t11>::read(scripts, variable); if (field == #p12) return awe::OverrideVariable<t12>::read(scripts, variable); \
		return {}; \
	} \
	static std::any readFieldOverrideFunction(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		asIScriptFunction* const function, const std::any& parent) { \
		if (field == #p1) return awe::OverrideFunction<t1>::read(scripts, function, parent); if (field == #p2) return awe::OverrideFunction<t2>::read(scripts, function, parent); if (field == #p3) return awe::OverrideFunction<t3>::read(scripts, function, parent); if (field == #p4) return awe::OverrideFunction<t4>::read(scripts, function, parent); if (field == #p5) return awe::OverrideFunction<t5>::read(scripts, function, parent); if (field == #p6) return awe::OverrideFunction<t6>::read(scripts, function, parent); if (field == #p7) return awe::OverrideFunction<t7>::read(scripts, function, parent); if (field == #p8) return awe::OverrideFunction<t8>::read(scripts, function, parent); if (field == #p9) return awe::OverrideFunction<t9>::read(scripts, function, parent); if (field == #p10) return awe::OverrideFunction<t10>::read(scripts, function, parent); if (field == #p11) return awe::OverrideFunction<t11>::read(scripts, function, parent); if (field == #p12) return awe::OverrideFunction<t12>::read(scripts, function, parent); \
		return {}; \
	} \
    static bool isFieldOverrideable(const std::string& field) { \
        if (field == #p1) return !engine::script_type<t1>().empty(); if (field == #p2) return !engine::script_type<t2>().empty(); if (field == #p3) return !engine::script_type<t3>().empty(); if (field == #p4) return !engine::script_type<t4>().empty(); if (field == #p5) return !engine::script_type<t5>().empty(); if (field == #p6) return !engine::script_type<t6>().empty(); if (field == #p7) return !engine::script_type<t7>().empty(); if (field == #p8) return !engine::script_type<t8>().empty(); if (field == #p9) return !engine::script_type<t9>().empty(); if (field == #p10) return !engine::script_type<t10>().empty(); if (field == #p11) return !engine::script_type<t11>().empty(); if (field == #p12) return !engine::script_type<t12>().empty(); \
        return false; \
    } \
    std::any getFieldDefaultValue(const std::string& field) { \
        if (field == #p1) return p1(); if (field == #p2) return p2(); if (field == #p3) return p3(); if (field == #p4) return p4(); if (field == #p5) return p5(); if (field == #p6) return p6(); if (field == #p7) return p7(); if (field == #p8) return p8(); if (field == #p9) return p9(); if (field == #p10) return p10(); if (field == #p11) return p11(); if (field == #p12) return p12(); \
        return {}; \
    } \
    void setFieldValue(const std::string& field, const std::any& value, const awe::overrides& overrides) { \
        if (field == #p1) p1(overrides) = std::any_cast<t1>(value); if (field == #p2) p2(overrides) = std::any_cast<t2>(value); if (field == #p3) p3(overrides) = std::any_cast<t3>(value); if (field == #p4) p4(overrides) = std::any_cast<t4>(value); if (field == #p5) p5(overrides) = std::any_cast<t5>(value); if (field == #p6) p6(overrides) = std::any_cast<t6>(value); if (field == #p7) p7(overrides) = std::any_cast<t7>(value); if (field == #p8) p8(overrides) = std::any_cast<t8>(value); if (field == #p9) p9(overrides) = std::any_cast<t9>(value); if (field == #p10) p10(overrides) = std::any_cast<t10>(value); if (field == #p11) p11(overrides) = std::any_cast<t11>(value); if (field == #p12) p12(overrides) = std::any_cast<t12>(value); \
    } \
    a \
};

#define GAME_PROPERTY_13(cc, ac, gp, i, p1, t1, o1, d1, e1, p2, t2, o2, d2, e2, p3, t3, o3, d3, e3, p4, t4, o4, d4, e4, p5, t5, o5, d5, e5, p6, t6, o6, d6, e6, p7, t7, o7, d7, e7, p8, t8, o8, d8, e8, p9, t9, o9, d9, e9, p10, t10, o10, d10, e10, p11, t11, o11, d11, e11, p12, t12, o12, d12, e12, p13, t13, o13, d13, e13, d, e, a) class cc { \
    std::string _scriptName; \
public: \
	inline static const std::string type = ac; \
	inline static const std::string global_property = gp; \
    inline static const std::array<std::string, 13> fields = { #p1, #p2, #p3, #p4, #p5, #p6, #p7, #p8, #p9, #p10, #p11, #p12, #p13, }; \
    inline static const std::size_t overrideID = i; \
    cc(const std::string& scriptName, engine::json& j, engine::logger& logger, const std::shared_ptr<engine::scripts>& scripts) : \
        p1(j, scriptName, logger, scripts), p2(j, scriptName, logger, scripts), p3(j, scriptName, logger, scripts), p4(j, scriptName, logger, scripts), p5(j, scriptName, logger, scripts), p6(j, scriptName, logger, scripts), p7(j, scriptName, logger, scripts), p8(j, scriptName, logger, scripts), p9(j, scriptName, logger, scripts), p10(j, scriptName, logger, scripts), p11(j, scriptName, logger, scripts), p12(j, scriptName, logger, scripts), p13(j, scriptName, logger, scripts), \
        _scriptName(scriptName) { e } \
	static void Register(asIScriptEngine* engine, const std::shared_ptr<DocumentationGenerator>& document) { \
        d \
		engine->RegisterObjectMethod(ac, "const string& scriptName() const", \
			asMETHOD(cc, scriptName), asCALL_THISCALL); \
        p1##_::Register(engine, document); p2##_::Register(engine, document); p3##_::Register(engine, document); p4##_::Register(engine, document); p5##_::Register(engine, document); p6##_::Register(engine, document); p7##_::Register(engine, document); p8##_::Register(engine, document); p9##_::Register(engine, document); p10##_::Register(engine, document); p11##_::Register(engine, document); p12##_::Register(engine, document); p13##_::Register(engine, document); \
    } \
	inline const std::string& scriptName() const { return _scriptName; } \
    PROPERTY(cc, ac, p1, t1, i, o1, d1, e1) PROPERTY(cc, ac, p2, t2, i, o2, d2, e2) PROPERTY(cc, ac, p3, t3, i, o3, d3, e3) PROPERTY(cc, ac, p4, t4, i, o4, d4, e4) PROPERTY(cc, ac, p5, t5, i, o5, d5, e5) PROPERTY(cc, ac, p6, t6, i, o6, d6, e6) PROPERTY(cc, ac, p7, t7, i, o7, d7, e7) PROPERTY(cc, ac, p8, t8, i, o8, d8, e8) PROPERTY(cc, ac, p9, t9, i, o9, d9, e9) PROPERTY(cc, ac, p10, t10, i, o10, d10, e10) PROPERTY(cc, ac, p11, t11, i, o11, d11, e11) PROPERTY(cc, ac, p12, t12, i, o12, d12, e12) PROPERTY(cc, ac, p13, t13, i, o13, d13, e13) \
    inline static bool hasField(const std::string_view field) { \
        return field == #p1 || field == #p2 || field == #p3 || field == #p4 || field == #p5 || field == #p6 || field == #p7 || field == #p8 || field == #p9 || field == #p10 || field == #p11 || field == #p12 || field == #p13 || false; \
    } \
	inline static std::string getFieldAngelScriptType(const std::string_view field) { \
		if (field == #p1) return engine::script_type<t1>(); if (field == #p2) return engine::script_type<t2>(); if (field == #p3) return engine::script_type<t3>(); if (field == #p4) return engine::script_type<t4>(); if (field == #p5) return engine::script_type<t5>(); if (field == #p6) return engine::script_type<t6>(); if (field == #p7) return engine::script_type<t7>(); if (field == #p8) return engine::script_type<t8>(); if (field == #p9) return engine::script_type<t9>(); if (field == #p10) return engine::script_type<t10>(); if (field == #p11) return engine::script_type<t11>(); if (field == #p12) return engine::script_type<t12>(); if (field == #p13) return engine::script_type<t13>(); \
		return ""; \
	} \
	static std::any readFieldOverrideVariable(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		const asUINT variable) { \
		if (field == #p1) return awe::OverrideVariable<t1>::read(scripts, variable); if (field == #p2) return awe::OverrideVariable<t2>::read(scripts, variable); if (field == #p3) return awe::OverrideVariable<t3>::read(scripts, variable); if (field == #p4) return awe::OverrideVariable<t4>::read(scripts, variable); if (field == #p5) return awe::OverrideVariable<t5>::read(scripts, variable); if (field == #p6) return awe::OverrideVariable<t6>::read(scripts, variable); if (field == #p7) return awe::OverrideVariable<t7>::read(scripts, variable); if (field == #p8) return awe::OverrideVariable<t8>::read(scripts, variable); if (field == #p9) return awe::OverrideVariable<t9>::read(scripts, variable); if (field == #p10) return awe::OverrideVariable<t10>::read(scripts, variable); if (field == #p11) return awe::OverrideVariable<t11>::read(scripts, variable); if (field == #p12) return awe::OverrideVariable<t12>::read(scripts, variable); if (field == #p13) return awe::OverrideVariable<t13>::read(scripts, variable); \
		return {}; \
	} \
	static std::any readFieldOverrideFunction(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		asIScriptFunction* const function, const std::any& parent) { \
		if (field == #p1) return awe::OverrideFunction<t1>::read(scripts, function, parent); if (field == #p2) return awe::OverrideFunction<t2>::read(scripts, function, parent); if (field == #p3) return awe::OverrideFunction<t3>::read(scripts, function, parent); if (field == #p4) return awe::OverrideFunction<t4>::read(scripts, function, parent); if (field == #p5) return awe::OverrideFunction<t5>::read(scripts, function, parent); if (field == #p6) return awe::OverrideFunction<t6>::read(scripts, function, parent); if (field == #p7) return awe::OverrideFunction<t7>::read(scripts, function, parent); if (field == #p8) return awe::OverrideFunction<t8>::read(scripts, function, parent); if (field == #p9) return awe::OverrideFunction<t9>::read(scripts, function, parent); if (field == #p10) return awe::OverrideFunction<t10>::read(scripts, function, parent); if (field == #p11) return awe::OverrideFunction<t11>::read(scripts, function, parent); if (field == #p12) return awe::OverrideFunction<t12>::read(scripts, function, parent); if (field == #p13) return awe::OverrideFunction<t13>::read(scripts, function, parent); \
		return {}; \
	} \
    static bool isFieldOverrideable(const std::string& field) { \
        if (field == #p1) return !engine::script_type<t1>().empty(); if (field == #p2) return !engine::script_type<t2>().empty(); if (field == #p3) return !engine::script_type<t3>().empty(); if (field == #p4) return !engine::script_type<t4>().empty(); if (field == #p5) return !engine::script_type<t5>().empty(); if (field == #p6) return !engine::script_type<t6>().empty(); if (field == #p7) return !engine::script_type<t7>().empty(); if (field == #p8) return !engine::script_type<t8>().empty(); if (field == #p9) return !engine::script_type<t9>().empty(); if (field == #p10) return !engine::script_type<t10>().empty(); if (field == #p11) return !engine::script_type<t11>().empty(); if (field == #p12) return !engine::script_type<t12>().empty(); if (field == #p13) return !engine::script_type<t13>().empty(); \
        return false; \
    } \
    std::any getFieldDefaultValue(const std::string& field) { \
        if (field == #p1) return p1(); if (field == #p2) return p2(); if (field == #p3) return p3(); if (field == #p4) return p4(); if (field == #p5) return p5(); if (field == #p6) return p6(); if (field == #p7) return p7(); if (field == #p8) return p8(); if (field == #p9) return p9(); if (field == #p10) return p10(); if (field == #p11) return p11(); if (field == #p12) return p12(); if (field == #p13) return p13(); \
        return {}; \
    } \
    void setFieldValue(const std::string& field, const std::any& value, const awe::overrides& overrides) { \
        if (field == #p1) p1(overrides) = std::any_cast<t1>(value); if (field == #p2) p2(overrides) = std::any_cast<t2>(value); if (field == #p3) p3(overrides) = std::any_cast<t3>(value); if (field == #p4) p4(overrides) = std::any_cast<t4>(value); if (field == #p5) p5(overrides) = std::any_cast<t5>(value); if (field == #p6) p6(overrides) = std::any_cast<t6>(value); if (field == #p7) p7(overrides) = std::any_cast<t7>(value); if (field == #p8) p8(overrides) = std::any_cast<t8>(value); if (field == #p9) p9(overrides) = std::any_cast<t9>(value); if (field == #p10) p10(overrides) = std::any_cast<t10>(value); if (field == #p11) p11(overrides) = std::any_cast<t11>(value); if (field == #p12) p12(overrides) = std::any_cast<t12>(value); if (field == #p13) p13(overrides) = std::any_cast<t13>(value); \
    } \
    a \
};

#define GAME_PROPERTY_14(cc, ac, gp, i, p1, t1, o1, d1, e1, p2, t2, o2, d2, e2, p3, t3, o3, d3, e3, p4, t4, o4, d4, e4, p5, t5, o5, d5, e5, p6, t6, o6, d6, e6, p7, t7, o7, d7, e7, p8, t8, o8, d8, e8, p9, t9, o9, d9, e9, p10, t10, o10, d10, e10, p11, t11, o11, d11, e11, p12, t12, o12, d12, e12, p13, t13, o13, d13, e13, p14, t14, o14, d14, e14, d, e, a) class cc { \
    std::string _scriptName; \
public: \
	inline static const std::string type = ac; \
	inline static const std::string global_property = gp; \
    inline static const std::array<std::string, 14> fields = { #p1, #p2, #p3, #p4, #p5, #p6, #p7, #p8, #p9, #p10, #p11, #p12, #p13, #p14, }; \
    inline static const std::size_t overrideID = i; \
    cc(const std::string& scriptName, engine::json& j, engine::logger& logger, const std::shared_ptr<engine::scripts>& scripts) : \
        p1(j, scriptName, logger, scripts), p2(j, scriptName, logger, scripts), p3(j, scriptName, logger, scripts), p4(j, scriptName, logger, scripts), p5(j, scriptName, logger, scripts), p6(j, scriptName, logger, scripts), p7(j, scriptName, logger, scripts), p8(j, scriptName, logger, scripts), p9(j, scriptName, logger, scripts), p10(j, scriptName, logger, scripts), p11(j, scriptName, logger, scripts), p12(j, scriptName, logger, scripts), p13(j, scriptName, logger, scripts), p14(j, scriptName, logger, scripts), \
        _scriptName(scriptName) { e } \
	static void Register(asIScriptEngine* engine, const std::shared_ptr<DocumentationGenerator>& document) { \
        d \
		engine->RegisterObjectMethod(ac, "const string& scriptName() const", \
			asMETHOD(cc, scriptName), asCALL_THISCALL); \
        p1##_::Register(engine, document); p2##_::Register(engine, document); p3##_::Register(engine, document); p4##_::Register(engine, document); p5##_::Register(engine, document); p6##_::Register(engine, document); p7##_::Register(engine, document); p8##_::Register(engine, document); p9##_::Register(engine, document); p10##_::Register(engine, document); p11##_::Register(engine, document); p12##_::Register(engine, document); p13##_::Register(engine, document); p14##_::Register(engine, document); \
    } \
	inline const std::string& scriptName() const { return _scriptName; } \
    PROPERTY(cc, ac, p1, t1, i, o1, d1, e1) PROPERTY(cc, ac, p2, t2, i, o2, d2, e2) PROPERTY(cc, ac, p3, t3, i, o3, d3, e3) PROPERTY(cc, ac, p4, t4, i, o4, d4, e4) PROPERTY(cc, ac, p5, t5, i, o5, d5, e5) PROPERTY(cc, ac, p6, t6, i, o6, d6, e6) PROPERTY(cc, ac, p7, t7, i, o7, d7, e7) PROPERTY(cc, ac, p8, t8, i, o8, d8, e8) PROPERTY(cc, ac, p9, t9, i, o9, d9, e9) PROPERTY(cc, ac, p10, t10, i, o10, d10, e10) PROPERTY(cc, ac, p11, t11, i, o11, d11, e11) PROPERTY(cc, ac, p12, t12, i, o12, d12, e12) PROPERTY(cc, ac, p13, t13, i, o13, d13, e13) PROPERTY(cc, ac, p14, t14, i, o14, d14, e14) \
    inline static bool hasField(const std::string_view field) { \
        return field == #p1 || field == #p2 || field == #p3 || field == #p4 || field == #p5 || field == #p6 || field == #p7 || field == #p8 || field == #p9 || field == #p10 || field == #p11 || field == #p12 || field == #p13 || field == #p14 || false; \
    } \
	inline static std::string getFieldAngelScriptType(const std::string_view field) { \
		if (field == #p1) return engine::script_type<t1>(); if (field == #p2) return engine::script_type<t2>(); if (field == #p3) return engine::script_type<t3>(); if (field == #p4) return engine::script_type<t4>(); if (field == #p5) return engine::script_type<t5>(); if (field == #p6) return engine::script_type<t6>(); if (field == #p7) return engine::script_type<t7>(); if (field == #p8) return engine::script_type<t8>(); if (field == #p9) return engine::script_type<t9>(); if (field == #p10) return engine::script_type<t10>(); if (field == #p11) return engine::script_type<t11>(); if (field == #p12) return engine::script_type<t12>(); if (field == #p13) return engine::script_type<t13>(); if (field == #p14) return engine::script_type<t14>(); \
		return ""; \
	} \
	static std::any readFieldOverrideVariable(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		const asUINT variable) { \
		if (field == #p1) return awe::OverrideVariable<t1>::read(scripts, variable); if (field == #p2) return awe::OverrideVariable<t2>::read(scripts, variable); if (field == #p3) return awe::OverrideVariable<t3>::read(scripts, variable); if (field == #p4) return awe::OverrideVariable<t4>::read(scripts, variable); if (field == #p5) return awe::OverrideVariable<t5>::read(scripts, variable); if (field == #p6) return awe::OverrideVariable<t6>::read(scripts, variable); if (field == #p7) return awe::OverrideVariable<t7>::read(scripts, variable); if (field == #p8) return awe::OverrideVariable<t8>::read(scripts, variable); if (field == #p9) return awe::OverrideVariable<t9>::read(scripts, variable); if (field == #p10) return awe::OverrideVariable<t10>::read(scripts, variable); if (field == #p11) return awe::OverrideVariable<t11>::read(scripts, variable); if (field == #p12) return awe::OverrideVariable<t12>::read(scripts, variable); if (field == #p13) return awe::OverrideVariable<t13>::read(scripts, variable); if (field == #p14) return awe::OverrideVariable<t14>::read(scripts, variable); \
		return {}; \
	} \
	static std::any readFieldOverrideFunction(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		asIScriptFunction* const function, const std::any& parent) { \
		if (field == #p1) return awe::OverrideFunction<t1>::read(scripts, function, parent); if (field == #p2) return awe::OverrideFunction<t2>::read(scripts, function, parent); if (field == #p3) return awe::OverrideFunction<t3>::read(scripts, function, parent); if (field == #p4) return awe::OverrideFunction<t4>::read(scripts, function, parent); if (field == #p5) return awe::OverrideFunction<t5>::read(scripts, function, parent); if (field == #p6) return awe::OverrideFunction<t6>::read(scripts, function, parent); if (field == #p7) return awe::OverrideFunction<t7>::read(scripts, function, parent); if (field == #p8) return awe::OverrideFunction<t8>::read(scripts, function, parent); if (field == #p9) return awe::OverrideFunction<t9>::read(scripts, function, parent); if (field == #p10) return awe::OverrideFunction<t10>::read(scripts, function, parent); if (field == #p11) return awe::OverrideFunction<t11>::read(scripts, function, parent); if (field == #p12) return awe::OverrideFunction<t12>::read(scripts, function, parent); if (field == #p13) return awe::OverrideFunction<t13>::read(scripts, function, parent); if (field == #p14) return awe::OverrideFunction<t14>::read(scripts, function, parent); \
		return {}; \
	} \
    static bool isFieldOverrideable(const std::string& field) { \
        if (field == #p1) return !engine::script_type<t1>().empty(); if (field == #p2) return !engine::script_type<t2>().empty(); if (field == #p3) return !engine::script_type<t3>().empty(); if (field == #p4) return !engine::script_type<t4>().empty(); if (field == #p5) return !engine::script_type<t5>().empty(); if (field == #p6) return !engine::script_type<t6>().empty(); if (field == #p7) return !engine::script_type<t7>().empty(); if (field == #p8) return !engine::script_type<t8>().empty(); if (field == #p9) return !engine::script_type<t9>().empty(); if (field == #p10) return !engine::script_type<t10>().empty(); if (field == #p11) return !engine::script_type<t11>().empty(); if (field == #p12) return !engine::script_type<t12>().empty(); if (field == #p13) return !engine::script_type<t13>().empty(); if (field == #p14) return !engine::script_type<t14>().empty(); \
        return false; \
    } \
    std::any getFieldDefaultValue(const std::string& field) { \
        if (field == #p1) return p1(); if (field == #p2) return p2(); if (field == #p3) return p3(); if (field == #p4) return p4(); if (field == #p5) return p5(); if (field == #p6) return p6(); if (field == #p7) return p7(); if (field == #p8) return p8(); if (field == #p9) return p9(); if (field == #p10) return p10(); if (field == #p11) return p11(); if (field == #p12) return p12(); if (field == #p13) return p13(); if (field == #p14) return p14(); \
        return {}; \
    } \
    void setFieldValue(const std::string& field, const std::any& value, const awe::overrides& overrides) { \
        if (field == #p1) p1(overrides) = std::any_cast<t1>(value); if (field == #p2) p2(overrides) = std::any_cast<t2>(value); if (field == #p3) p3(overrides) = std::any_cast<t3>(value); if (field == #p4) p4(overrides) = std::any_cast<t4>(value); if (field == #p5) p5(overrides) = std::any_cast<t5>(value); if (field == #p6) p6(overrides) = std::any_cast<t6>(value); if (field == #p7) p7(overrides) = std::any_cast<t7>(value); if (field == #p8) p8(overrides) = std::any_cast<t8>(value); if (field == #p9) p9(overrides) = std::any_cast<t9>(value); if (field == #p10) p10(overrides) = std::any_cast<t10>(value); if (field == #p11) p11(overrides) = std::any_cast<t11>(value); if (field == #p12) p12(overrides) = std::any_cast<t12>(value); if (field == #p13) p13(overrides) = std::any_cast<t13>(value); if (field == #p14) p14(overrides) = std::any_cast<t14>(value); \
    } \
    a \
};

#define GAME_PROPERTY_15(cc, ac, gp, i, p1, t1, o1, d1, e1, p2, t2, o2, d2, e2, p3, t3, o3, d3, e3, p4, t4, o4, d4, e4, p5, t5, o5, d5, e5, p6, t6, o6, d6, e6, p7, t7, o7, d7, e7, p8, t8, o8, d8, e8, p9, t9, o9, d9, e9, p10, t10, o10, d10, e10, p11, t11, o11, d11, e11, p12, t12, o12, d12, e12, p13, t13, o13, d13, e13, p14, t14, o14, d14, e14, p15, t15, o15, d15, e15, d, e, a) class cc { \
    std::string _scriptName; \
public: \
	inline static const std::string type = ac; \
	inline static const std::string global_property = gp; \
    inline static const std::array<std::string, 15> fields = { #p1, #p2, #p3, #p4, #p5, #p6, #p7, #p8, #p9, #p10, #p11, #p12, #p13, #p14, #p15, }; \
    inline static const std::size_t overrideID = i; \
    cc(const std::string& scriptName, engine::json& j, engine::logger& logger, const std::shared_ptr<engine::scripts>& scripts) : \
        p1(j, scriptName, logger, scripts), p2(j, scriptName, logger, scripts), p3(j, scriptName, logger, scripts), p4(j, scriptName, logger, scripts), p5(j, scriptName, logger, scripts), p6(j, scriptName, logger, scripts), p7(j, scriptName, logger, scripts), p8(j, scriptName, logger, scripts), p9(j, scriptName, logger, scripts), p10(j, scriptName, logger, scripts), p11(j, scriptName, logger, scripts), p12(j, scriptName, logger, scripts), p13(j, scriptName, logger, scripts), p14(j, scriptName, logger, scripts), p15(j, scriptName, logger, scripts), \
        _scriptName(scriptName) { e } \
	static void Register(asIScriptEngine* engine, const std::shared_ptr<DocumentationGenerator>& document) { \
        d \
		engine->RegisterObjectMethod(ac, "const string& scriptName() const", \
			asMETHOD(cc, scriptName), asCALL_THISCALL); \
        p1##_::Register(engine, document); p2##_::Register(engine, document); p3##_::Register(engine, document); p4##_::Register(engine, document); p5##_::Register(engine, document); p6##_::Register(engine, document); p7##_::Register(engine, document); p8##_::Register(engine, document); p9##_::Register(engine, document); p10##_::Register(engine, document); p11##_::Register(engine, document); p12##_::Register(engine, document); p13##_::Register(engine, document); p14##_::Register(engine, document); p15##_::Register(engine, document); \
    } \
	inline const std::string& scriptName() const { return _scriptName; } \
    PROPERTY(cc, ac, p1, t1, i, o1, d1, e1) PROPERTY(cc, ac, p2, t2, i, o2, d2, e2) PROPERTY(cc, ac, p3, t3, i, o3, d3, e3) PROPERTY(cc, ac, p4, t4, i, o4, d4, e4) PROPERTY(cc, ac, p5, t5, i, o5, d5, e5) PROPERTY(cc, ac, p6, t6, i, o6, d6, e6) PROPERTY(cc, ac, p7, t7, i, o7, d7, e7) PROPERTY(cc, ac, p8, t8, i, o8, d8, e8) PROPERTY(cc, ac, p9, t9, i, o9, d9, e9) PROPERTY(cc, ac, p10, t10, i, o10, d10, e10) PROPERTY(cc, ac, p11, t11, i, o11, d11, e11) PROPERTY(cc, ac, p12, t12, i, o12, d12, e12) PROPERTY(cc, ac, p13, t13, i, o13, d13, e13) PROPERTY(cc, ac, p14, t14, i, o14, d14, e14) PROPERTY(cc, ac, p15, t15, i, o15, d15, e15) \
    inline static bool hasField(const std::string_view field) { \
        return field == #p1 || field == #p2 || field == #p3 || field == #p4 || field == #p5 || field == #p6 || field == #p7 || field == #p8 || field == #p9 || field == #p10 || field == #p11 || field == #p12 || field == #p13 || field == #p14 || field == #p15 || false; \
    } \
	inline static std::string getFieldAngelScriptType(const std::string_view field) { \
		if (field == #p1) return engine::script_type<t1>(); if (field == #p2) return engine::script_type<t2>(); if (field == #p3) return engine::script_type<t3>(); if (field == #p4) return engine::script_type<t4>(); if (field == #p5) return engine::script_type<t5>(); if (field == #p6) return engine::script_type<t6>(); if (field == #p7) return engine::script_type<t7>(); if (field == #p8) return engine::script_type<t8>(); if (field == #p9) return engine::script_type<t9>(); if (field == #p10) return engine::script_type<t10>(); if (field == #p11) return engine::script_type<t11>(); if (field == #p12) return engine::script_type<t12>(); if (field == #p13) return engine::script_type<t13>(); if (field == #p14) return engine::script_type<t14>(); if (field == #p15) return engine::script_type<t15>(); \
		return ""; \
	} \
	static std::any readFieldOverrideVariable(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		const asUINT variable) { \
		if (field == #p1) return awe::OverrideVariable<t1>::read(scripts, variable); if (field == #p2) return awe::OverrideVariable<t2>::read(scripts, variable); if (field == #p3) return awe::OverrideVariable<t3>::read(scripts, variable); if (field == #p4) return awe::OverrideVariable<t4>::read(scripts, variable); if (field == #p5) return awe::OverrideVariable<t5>::read(scripts, variable); if (field == #p6) return awe::OverrideVariable<t6>::read(scripts, variable); if (field == #p7) return awe::OverrideVariable<t7>::read(scripts, variable); if (field == #p8) return awe::OverrideVariable<t8>::read(scripts, variable); if (field == #p9) return awe::OverrideVariable<t9>::read(scripts, variable); if (field == #p10) return awe::OverrideVariable<t10>::read(scripts, variable); if (field == #p11) return awe::OverrideVariable<t11>::read(scripts, variable); if (field == #p12) return awe::OverrideVariable<t12>::read(scripts, variable); if (field == #p13) return awe::OverrideVariable<t13>::read(scripts, variable); if (field == #p14) return awe::OverrideVariable<t14>::read(scripts, variable); if (field == #p15) return awe::OverrideVariable<t15>::read(scripts, variable); \
		return {}; \
	} \
	static std::any readFieldOverrideFunction(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		asIScriptFunction* const function, const std::any& parent) { \
		if (field == #p1) return awe::OverrideFunction<t1>::read(scripts, function, parent); if (field == #p2) return awe::OverrideFunction<t2>::read(scripts, function, parent); if (field == #p3) return awe::OverrideFunction<t3>::read(scripts, function, parent); if (field == #p4) return awe::OverrideFunction<t4>::read(scripts, function, parent); if (field == #p5) return awe::OverrideFunction<t5>::read(scripts, function, parent); if (field == #p6) return awe::OverrideFunction<t6>::read(scripts, function, parent); if (field == #p7) return awe::OverrideFunction<t7>::read(scripts, function, parent); if (field == #p8) return awe::OverrideFunction<t8>::read(scripts, function, parent); if (field == #p9) return awe::OverrideFunction<t9>::read(scripts, function, parent); if (field == #p10) return awe::OverrideFunction<t10>::read(scripts, function, parent); if (field == #p11) return awe::OverrideFunction<t11>::read(scripts, function, parent); if (field == #p12) return awe::OverrideFunction<t12>::read(scripts, function, parent); if (field == #p13) return awe::OverrideFunction<t13>::read(scripts, function, parent); if (field == #p14) return awe::OverrideFunction<t14>::read(scripts, function, parent); if (field == #p15) return awe::OverrideFunction<t15>::read(scripts, function, parent); \
		return {}; \
	} \
    static bool isFieldOverrideable(const std::string& field) { \
        if (field == #p1) return !engine::script_type<t1>().empty(); if (field == #p2) return !engine::script_type<t2>().empty(); if (field == #p3) return !engine::script_type<t3>().empty(); if (field == #p4) return !engine::script_type<t4>().empty(); if (field == #p5) return !engine::script_type<t5>().empty(); if (field == #p6) return !engine::script_type<t6>().empty(); if (field == #p7) return !engine::script_type<t7>().empty(); if (field == #p8) return !engine::script_type<t8>().empty(); if (field == #p9) return !engine::script_type<t9>().empty(); if (field == #p10) return !engine::script_type<t10>().empty(); if (field == #p11) return !engine::script_type<t11>().empty(); if (field == #p12) return !engine::script_type<t12>().empty(); if (field == #p13) return !engine::script_type<t13>().empty(); if (field == #p14) return !engine::script_type<t14>().empty(); if (field == #p15) return !engine::script_type<t15>().empty(); \
        return false; \
    } \
    std::any getFieldDefaultValue(const std::string& field) { \
        if (field == #p1) return p1(); if (field == #p2) return p2(); if (field == #p3) return p3(); if (field == #p4) return p4(); if (field == #p5) return p5(); if (field == #p6) return p6(); if (field == #p7) return p7(); if (field == #p8) return p8(); if (field == #p9) return p9(); if (field == #p10) return p10(); if (field == #p11) return p11(); if (field == #p12) return p12(); if (field == #p13) return p13(); if (field == #p14) return p14(); if (field == #p15) return p15(); \
        return {}; \
    } \
    void setFieldValue(const std::string& field, const std::any& value, const awe::overrides& overrides) { \
        if (field == #p1) p1(overrides) = std::any_cast<t1>(value); if (field == #p2) p2(overrides) = std::any_cast<t2>(value); if (field == #p3) p3(overrides) = std::any_cast<t3>(value); if (field == #p4) p4(overrides) = std::any_cast<t4>(value); if (field == #p5) p5(overrides) = std::any_cast<t5>(value); if (field == #p6) p6(overrides) = std::any_cast<t6>(value); if (field == #p7) p7(overrides) = std::any_cast<t7>(value); if (field == #p8) p8(overrides) = std::any_cast<t8>(value); if (field == #p9) p9(overrides) = std::any_cast<t9>(value); if (field == #p10) p10(overrides) = std::any_cast<t10>(value); if (field == #p11) p11(overrides) = std::any_cast<t11>(value); if (field == #p12) p12(overrides) = std::any_cast<t12>(value); if (field == #p13) p13(overrides) = std::any_cast<t13>(value); if (field == #p14) p14(overrides) = std::any_cast<t14>(value); if (field == #p15) p15(overrides) = std::any_cast<t15>(value); \
    } \
    a \
};

#define GAME_PROPERTY_16(cc, ac, gp, i, p1, t1, o1, d1, e1, p2, t2, o2, d2, e2, p3, t3, o3, d3, e3, p4, t4, o4, d4, e4, p5, t5, o5, d5, e5, p6, t6, o6, d6, e6, p7, t7, o7, d7, e7, p8, t8, o8, d8, e8, p9, t9, o9, d9, e9, p10, t10, o10, d10, e10, p11, t11, o11, d11, e11, p12, t12, o12, d12, e12, p13, t13, o13, d13, e13, p14, t14, o14, d14, e14, p15, t15, o15, d15, e15, p16, t16, o16, d16, e16, d, e, a) class cc { \
    std::string _scriptName; \
public: \
	inline static const std::string type = ac; \
	inline static const std::string global_property = gp; \
    inline static const std::array<std::string, 16> fields = { #p1, #p2, #p3, #p4, #p5, #p6, #p7, #p8, #p9, #p10, #p11, #p12, #p13, #p14, #p15, #p16, }; \
    inline static const std::size_t overrideID = i; \
    cc(const std::string& scriptName, engine::json& j, engine::logger& logger, const std::shared_ptr<engine::scripts>& scripts) : \
        p1(j, scriptName, logger, scripts), p2(j, scriptName, logger, scripts), p3(j, scriptName, logger, scripts), p4(j, scriptName, logger, scripts), p5(j, scriptName, logger, scripts), p6(j, scriptName, logger, scripts), p7(j, scriptName, logger, scripts), p8(j, scriptName, logger, scripts), p9(j, scriptName, logger, scripts), p10(j, scriptName, logger, scripts), p11(j, scriptName, logger, scripts), p12(j, scriptName, logger, scripts), p13(j, scriptName, logger, scripts), p14(j, scriptName, logger, scripts), p15(j, scriptName, logger, scripts), p16(j, scriptName, logger, scripts), \
        _scriptName(scriptName) { e } \
	static void Register(asIScriptEngine* engine, const std::shared_ptr<DocumentationGenerator>& document) { \
        d \
		engine->RegisterObjectMethod(ac, "const string& scriptName() const", \
			asMETHOD(cc, scriptName), asCALL_THISCALL); \
        p1##_::Register(engine, document); p2##_::Register(engine, document); p3##_::Register(engine, document); p4##_::Register(engine, document); p5##_::Register(engine, document); p6##_::Register(engine, document); p7##_::Register(engine, document); p8##_::Register(engine, document); p9##_::Register(engine, document); p10##_::Register(engine, document); p11##_::Register(engine, document); p12##_::Register(engine, document); p13##_::Register(engine, document); p14##_::Register(engine, document); p15##_::Register(engine, document); p16##_::Register(engine, document); \
    } \
	inline const std::string& scriptName() const { return _scriptName; } \
    PROPERTY(cc, ac, p1, t1, i, o1, d1, e1) PROPERTY(cc, ac, p2, t2, i, o2, d2, e2) PROPERTY(cc, ac, p3, t3, i, o3, d3, e3) PROPERTY(cc, ac, p4, t4, i, o4, d4, e4) PROPERTY(cc, ac, p5, t5, i, o5, d5, e5) PROPERTY(cc, ac, p6, t6, i, o6, d6, e6) PROPERTY(cc, ac, p7, t7, i, o7, d7, e7) PROPERTY(cc, ac, p8, t8, i, o8, d8, e8) PROPERTY(cc, ac, p9, t9, i, o9, d9, e9) PROPERTY(cc, ac, p10, t10, i, o10, d10, e10) PROPERTY(cc, ac, p11, t11, i, o11, d11, e11) PROPERTY(cc, ac, p12, t12, i, o12, d12, e12) PROPERTY(cc, ac, p13, t13, i, o13, d13, e13) PROPERTY(cc, ac, p14, t14, i, o14, d14, e14) PROPERTY(cc, ac, p15, t15, i, o15, d15, e15) PROPERTY(cc, ac, p16, t16, i, o16, d16, e16) \
    inline static bool hasField(const std::string_view field) { \
        return field == #p1 || field == #p2 || field == #p3 || field == #p4 || field == #p5 || field == #p6 || field == #p7 || field == #p8 || field == #p9 || field == #p10 || field == #p11 || field == #p12 || field == #p13 || field == #p14 || field == #p15 || field == #p16 || false; \
    } \
	inline static std::string getFieldAngelScriptType(const std::string_view field) { \
		if (field == #p1) return engine::script_type<t1>(); if (field == #p2) return engine::script_type<t2>(); if (field == #p3) return engine::script_type<t3>(); if (field == #p4) return engine::script_type<t4>(); if (field == #p5) return engine::script_type<t5>(); if (field == #p6) return engine::script_type<t6>(); if (field == #p7) return engine::script_type<t7>(); if (field == #p8) return engine::script_type<t8>(); if (field == #p9) return engine::script_type<t9>(); if (field == #p10) return engine::script_type<t10>(); if (field == #p11) return engine::script_type<t11>(); if (field == #p12) return engine::script_type<t12>(); if (field == #p13) return engine::script_type<t13>(); if (field == #p14) return engine::script_type<t14>(); if (field == #p15) return engine::script_type<t15>(); if (field == #p16) return engine::script_type<t16>(); \
		return ""; \
	} \
	static std::any readFieldOverrideVariable(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		const asUINT variable) { \
		if (field == #p1) return awe::OverrideVariable<t1>::read(scripts, variable); if (field == #p2) return awe::OverrideVariable<t2>::read(scripts, variable); if (field == #p3) return awe::OverrideVariable<t3>::read(scripts, variable); if (field == #p4) return awe::OverrideVariable<t4>::read(scripts, variable); if (field == #p5) return awe::OverrideVariable<t5>::read(scripts, variable); if (field == #p6) return awe::OverrideVariable<t6>::read(scripts, variable); if (field == #p7) return awe::OverrideVariable<t7>::read(scripts, variable); if (field == #p8) return awe::OverrideVariable<t8>::read(scripts, variable); if (field == #p9) return awe::OverrideVariable<t9>::read(scripts, variable); if (field == #p10) return awe::OverrideVariable<t10>::read(scripts, variable); if (field == #p11) return awe::OverrideVariable<t11>::read(scripts, variable); if (field == #p12) return awe::OverrideVariable<t12>::read(scripts, variable); if (field == #p13) return awe::OverrideVariable<t13>::read(scripts, variable); if (field == #p14) return awe::OverrideVariable<t14>::read(scripts, variable); if (field == #p15) return awe::OverrideVariable<t15>::read(scripts, variable); if (field == #p16) return awe::OverrideVariable<t16>::read(scripts, variable); \
		return {}; \
	} \
	static std::any readFieldOverrideFunction(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		asIScriptFunction* const function, const std::any& parent) { \
		if (field == #p1) return awe::OverrideFunction<t1>::read(scripts, function, parent); if (field == #p2) return awe::OverrideFunction<t2>::read(scripts, function, parent); if (field == #p3) return awe::OverrideFunction<t3>::read(scripts, function, parent); if (field == #p4) return awe::OverrideFunction<t4>::read(scripts, function, parent); if (field == #p5) return awe::OverrideFunction<t5>::read(scripts, function, parent); if (field == #p6) return awe::OverrideFunction<t6>::read(scripts, function, parent); if (field == #p7) return awe::OverrideFunction<t7>::read(scripts, function, parent); if (field == #p8) return awe::OverrideFunction<t8>::read(scripts, function, parent); if (field == #p9) return awe::OverrideFunction<t9>::read(scripts, function, parent); if (field == #p10) return awe::OverrideFunction<t10>::read(scripts, function, parent); if (field == #p11) return awe::OverrideFunction<t11>::read(scripts, function, parent); if (field == #p12) return awe::OverrideFunction<t12>::read(scripts, function, parent); if (field == #p13) return awe::OverrideFunction<t13>::read(scripts, function, parent); if (field == #p14) return awe::OverrideFunction<t14>::read(scripts, function, parent); if (field == #p15) return awe::OverrideFunction<t15>::read(scripts, function, parent); if (field == #p16) return awe::OverrideFunction<t16>::read(scripts, function, parent); \
		return {}; \
	} \
    static bool isFieldOverrideable(const std::string& field) { \
        if (field == #p1) return !engine::script_type<t1>().empty(); if (field == #p2) return !engine::script_type<t2>().empty(); if (field == #p3) return !engine::script_type<t3>().empty(); if (field == #p4) return !engine::script_type<t4>().empty(); if (field == #p5) return !engine::script_type<t5>().empty(); if (field == #p6) return !engine::script_type<t6>().empty(); if (field == #p7) return !engine::script_type<t7>().empty(); if (field == #p8) return !engine::script_type<t8>().empty(); if (field == #p9) return !engine::script_type<t9>().empty(); if (field == #p10) return !engine::script_type<t10>().empty(); if (field == #p11) return !engine::script_type<t11>().empty(); if (field == #p12) return !engine::script_type<t12>().empty(); if (field == #p13) return !engine::script_type<t13>().empty(); if (field == #p14) return !engine::script_type<t14>().empty(); if (field == #p15) return !engine::script_type<t15>().empty(); if (field == #p16) return !engine::script_type<t16>().empty(); \
        return false; \
    } \
    std::any getFieldDefaultValue(const std::string& field) { \
        if (field == #p1) return p1(); if (field == #p2) return p2(); if (field == #p3) return p3(); if (field == #p4) return p4(); if (field == #p5) return p5(); if (field == #p6) return p6(); if (field == #p7) return p7(); if (field == #p8) return p8(); if (field == #p9) return p9(); if (field == #p10) return p10(); if (field == #p11) return p11(); if (field == #p12) return p12(); if (field == #p13) return p13(); if (field == #p14) return p14(); if (field == #p15) return p15(); if (field == #p16) return p16(); \
        return {}; \
    } \
    void setFieldValue(const std::string& field, const std::any& value, const awe::overrides& overrides) { \
        if (field == #p1) p1(overrides) = std::any_cast<t1>(value); if (field == #p2) p2(overrides) = std::any_cast<t2>(value); if (field == #p3) p3(overrides) = std::any_cast<t3>(value); if (field == #p4) p4(overrides) = std::any_cast<t4>(value); if (field == #p5) p5(overrides) = std::any_cast<t5>(value); if (field == #p6) p6(overrides) = std::any_cast<t6>(value); if (field == #p7) p7(overrides) = std::any_cast<t7>(value); if (field == #p8) p8(overrides) = std::any_cast<t8>(value); if (field == #p9) p9(overrides) = std::any_cast<t9>(value); if (field == #p10) p10(overrides) = std::any_cast<t10>(value); if (field == #p11) p11(overrides) = std::any_cast<t11>(value); if (field == #p12) p12(overrides) = std::any_cast<t12>(value); if (field == #p13) p13(overrides) = std::any_cast<t13>(value); if (field == #p14) p14(overrides) = std::any_cast<t14>(value); if (field == #p15) p15(overrides) = std::any_cast<t15>(value); if (field == #p16) p16(overrides) = std::any_cast<t16>(value); \
    } \
    a \
};

#define GAME_PROPERTY_17(cc, ac, gp, i, p1, t1, o1, d1, e1, p2, t2, o2, d2, e2, p3, t3, o3, d3, e3, p4, t4, o4, d4, e4, p5, t5, o5, d5, e5, p6, t6, o6, d6, e6, p7, t7, o7, d7, e7, p8, t8, o8, d8, e8, p9, t9, o9, d9, e9, p10, t10, o10, d10, e10, p11, t11, o11, d11, e11, p12, t12, o12, d12, e12, p13, t13, o13, d13, e13, p14, t14, o14, d14, e14, p15, t15, o15, d15, e15, p16, t16, o16, d16, e16, p17, t17, o17, d17, e17, d, e, a) class cc { \
    std::string _scriptName; \
public: \
	inline static const std::string type = ac; \
	inline static const std::string global_property = gp; \
    inline static const std::array<std::string, 17> fields = { #p1, #p2, #p3, #p4, #p5, #p6, #p7, #p8, #p9, #p10, #p11, #p12, #p13, #p14, #p15, #p16, #p17, }; \
    inline static const std::size_t overrideID = i; \
    cc(const std::string& scriptName, engine::json& j, engine::logger& logger, const std::shared_ptr<engine::scripts>& scripts) : \
        p1(j, scriptName, logger, scripts), p2(j, scriptName, logger, scripts), p3(j, scriptName, logger, scripts), p4(j, scriptName, logger, scripts), p5(j, scriptName, logger, scripts), p6(j, scriptName, logger, scripts), p7(j, scriptName, logger, scripts), p8(j, scriptName, logger, scripts), p9(j, scriptName, logger, scripts), p10(j, scriptName, logger, scripts), p11(j, scriptName, logger, scripts), p12(j, scriptName, logger, scripts), p13(j, scriptName, logger, scripts), p14(j, scriptName, logger, scripts), p15(j, scriptName, logger, scripts), p16(j, scriptName, logger, scripts), p17(j, scriptName, logger, scripts), \
        _scriptName(scriptName) { e } \
	static void Register(asIScriptEngine* engine, const std::shared_ptr<DocumentationGenerator>& document) { \
        d \
		engine->RegisterObjectMethod(ac, "const string& scriptName() const", \
			asMETHOD(cc, scriptName), asCALL_THISCALL); \
        p1##_::Register(engine, document); p2##_::Register(engine, document); p3##_::Register(engine, document); p4##_::Register(engine, document); p5##_::Register(engine, document); p6##_::Register(engine, document); p7##_::Register(engine, document); p8##_::Register(engine, document); p9##_::Register(engine, document); p10##_::Register(engine, document); p11##_::Register(engine, document); p12##_::Register(engine, document); p13##_::Register(engine, document); p14##_::Register(engine, document); p15##_::Register(engine, document); p16##_::Register(engine, document); p17##_::Register(engine, document); \
    } \
	inline const std::string& scriptName() const { return _scriptName; } \
    PROPERTY(cc, ac, p1, t1, i, o1, d1, e1) PROPERTY(cc, ac, p2, t2, i, o2, d2, e2) PROPERTY(cc, ac, p3, t3, i, o3, d3, e3) PROPERTY(cc, ac, p4, t4, i, o4, d4, e4) PROPERTY(cc, ac, p5, t5, i, o5, d5, e5) PROPERTY(cc, ac, p6, t6, i, o6, d6, e6) PROPERTY(cc, ac, p7, t7, i, o7, d7, e7) PROPERTY(cc, ac, p8, t8, i, o8, d8, e8) PROPERTY(cc, ac, p9, t9, i, o9, d9, e9) PROPERTY(cc, ac, p10, t10, i, o10, d10, e10) PROPERTY(cc, ac, p11, t11, i, o11, d11, e11) PROPERTY(cc, ac, p12, t12, i, o12, d12, e12) PROPERTY(cc, ac, p13, t13, i, o13, d13, e13) PROPERTY(cc, ac, p14, t14, i, o14, d14, e14) PROPERTY(cc, ac, p15, t15, i, o15, d15, e15) PROPERTY(cc, ac, p16, t16, i, o16, d16, e16) PROPERTY(cc, ac, p17, t17, i, o17, d17, e17) \
    inline static bool hasField(const std::string_view field) { \
        return field == #p1 || field == #p2 || field == #p3 || field == #p4 || field == #p5 || field == #p6 || field == #p7 || field == #p8 || field == #p9 || field == #p10 || field == #p11 || field == #p12 || field == #p13 || field == #p14 || field == #p15 || field == #p16 || field == #p17 || false; \
    } \
	inline static std::string getFieldAngelScriptType(const std::string_view field) { \
		if (field == #p1) return engine::script_type<t1>(); if (field == #p2) return engine::script_type<t2>(); if (field == #p3) return engine::script_type<t3>(); if (field == #p4) return engine::script_type<t4>(); if (field == #p5) return engine::script_type<t5>(); if (field == #p6) return engine::script_type<t6>(); if (field == #p7) return engine::script_type<t7>(); if (field == #p8) return engine::script_type<t8>(); if (field == #p9) return engine::script_type<t9>(); if (field == #p10) return engine::script_type<t10>(); if (field == #p11) return engine::script_type<t11>(); if (field == #p12) return engine::script_type<t12>(); if (field == #p13) return engine::script_type<t13>(); if (field == #p14) return engine::script_type<t14>(); if (field == #p15) return engine::script_type<t15>(); if (field == #p16) return engine::script_type<t16>(); if (field == #p17) return engine::script_type<t17>(); \
		return ""; \
	} \
	static std::any readFieldOverrideVariable(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		const asUINT variable) { \
		if (field == #p1) return awe::OverrideVariable<t1>::read(scripts, variable); if (field == #p2) return awe::OverrideVariable<t2>::read(scripts, variable); if (field == #p3) return awe::OverrideVariable<t3>::read(scripts, variable); if (field == #p4) return awe::OverrideVariable<t4>::read(scripts, variable); if (field == #p5) return awe::OverrideVariable<t5>::read(scripts, variable); if (field == #p6) return awe::OverrideVariable<t6>::read(scripts, variable); if (field == #p7) return awe::OverrideVariable<t7>::read(scripts, variable); if (field == #p8) return awe::OverrideVariable<t8>::read(scripts, variable); if (field == #p9) return awe::OverrideVariable<t9>::read(scripts, variable); if (field == #p10) return awe::OverrideVariable<t10>::read(scripts, variable); if (field == #p11) return awe::OverrideVariable<t11>::read(scripts, variable); if (field == #p12) return awe::OverrideVariable<t12>::read(scripts, variable); if (field == #p13) return awe::OverrideVariable<t13>::read(scripts, variable); if (field == #p14) return awe::OverrideVariable<t14>::read(scripts, variable); if (field == #p15) return awe::OverrideVariable<t15>::read(scripts, variable); if (field == #p16) return awe::OverrideVariable<t16>::read(scripts, variable); if (field == #p17) return awe::OverrideVariable<t17>::read(scripts, variable); \
		return {}; \
	} \
	static std::any readFieldOverrideFunction(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		asIScriptFunction* const function, const std::any& parent) { \
		if (field == #p1) return awe::OverrideFunction<t1>::read(scripts, function, parent); if (field == #p2) return awe::OverrideFunction<t2>::read(scripts, function, parent); if (field == #p3) return awe::OverrideFunction<t3>::read(scripts, function, parent); if (field == #p4) return awe::OverrideFunction<t4>::read(scripts, function, parent); if (field == #p5) return awe::OverrideFunction<t5>::read(scripts, function, parent); if (field == #p6) return awe::OverrideFunction<t6>::read(scripts, function, parent); if (field == #p7) return awe::OverrideFunction<t7>::read(scripts, function, parent); if (field == #p8) return awe::OverrideFunction<t8>::read(scripts, function, parent); if (field == #p9) return awe::OverrideFunction<t9>::read(scripts, function, parent); if (field == #p10) return awe::OverrideFunction<t10>::read(scripts, function, parent); if (field == #p11) return awe::OverrideFunction<t11>::read(scripts, function, parent); if (field == #p12) return awe::OverrideFunction<t12>::read(scripts, function, parent); if (field == #p13) return awe::OverrideFunction<t13>::read(scripts, function, parent); if (field == #p14) return awe::OverrideFunction<t14>::read(scripts, function, parent); if (field == #p15) return awe::OverrideFunction<t15>::read(scripts, function, parent); if (field == #p16) return awe::OverrideFunction<t16>::read(scripts, function, parent); if (field == #p17) return awe::OverrideFunction<t17>::read(scripts, function, parent); \
		return {}; \
	} \
    static bool isFieldOverrideable(const std::string& field) { \
        if (field == #p1) return !engine::script_type<t1>().empty(); if (field == #p2) return !engine::script_type<t2>().empty(); if (field == #p3) return !engine::script_type<t3>().empty(); if (field == #p4) return !engine::script_type<t4>().empty(); if (field == #p5) return !engine::script_type<t5>().empty(); if (field == #p6) return !engine::script_type<t6>().empty(); if (field == #p7) return !engine::script_type<t7>().empty(); if (field == #p8) return !engine::script_type<t8>().empty(); if (field == #p9) return !engine::script_type<t9>().empty(); if (field == #p10) return !engine::script_type<t10>().empty(); if (field == #p11) return !engine::script_type<t11>().empty(); if (field == #p12) return !engine::script_type<t12>().empty(); if (field == #p13) return !engine::script_type<t13>().empty(); if (field == #p14) return !engine::script_type<t14>().empty(); if (field == #p15) return !engine::script_type<t15>().empty(); if (field == #p16) return !engine::script_type<t16>().empty(); if (field == #p17) return !engine::script_type<t17>().empty(); \
        return false; \
    } \
    std::any getFieldDefaultValue(const std::string& field) { \
        if (field == #p1) return p1(); if (field == #p2) return p2(); if (field == #p3) return p3(); if (field == #p4) return p4(); if (field == #p5) return p5(); if (field == #p6) return p6(); if (field == #p7) return p7(); if (field == #p8) return p8(); if (field == #p9) return p9(); if (field == #p10) return p10(); if (field == #p11) return p11(); if (field == #p12) return p12(); if (field == #p13) return p13(); if (field == #p14) return p14(); if (field == #p15) return p15(); if (field == #p16) return p16(); if (field == #p17) return p17(); \
        return {}; \
    } \
    void setFieldValue(const std::string& field, const std::any& value, const awe::overrides& overrides) { \
        if (field == #p1) p1(overrides) = std::any_cast<t1>(value); if (field == #p2) p2(overrides) = std::any_cast<t2>(value); if (field == #p3) p3(overrides) = std::any_cast<t3>(value); if (field == #p4) p4(overrides) = std::any_cast<t4>(value); if (field == #p5) p5(overrides) = std::any_cast<t5>(value); if (field == #p6) p6(overrides) = std::any_cast<t6>(value); if (field == #p7) p7(overrides) = std::any_cast<t7>(value); if (field == #p8) p8(overrides) = std::any_cast<t8>(value); if (field == #p9) p9(overrides) = std::any_cast<t9>(value); if (field == #p10) p10(overrides) = std::any_cast<t10>(value); if (field == #p11) p11(overrides) = std::any_cast<t11>(value); if (field == #p12) p12(overrides) = std::any_cast<t12>(value); if (field == #p13) p13(overrides) = std::any_cast<t13>(value); if (field == #p14) p14(overrides) = std::any_cast<t14>(value); if (field == #p15) p15(overrides) = std::any_cast<t15>(value); if (field == #p16) p16(overrides) = std::any_cast<t16>(value); if (field == #p17) p17(overrides) = std::any_cast<t17>(value); \
    } \
    a \
};

#define GAME_PROPERTY_18(cc, ac, gp, i, p1, t1, o1, d1, e1, p2, t2, o2, d2, e2, p3, t3, o3, d3, e3, p4, t4, o4, d4, e4, p5, t5, o5, d5, e5, p6, t6, o6, d6, e6, p7, t7, o7, d7, e7, p8, t8, o8, d8, e8, p9, t9, o9, d9, e9, p10, t10, o10, d10, e10, p11, t11, o11, d11, e11, p12, t12, o12, d12, e12, p13, t13, o13, d13, e13, p14, t14, o14, d14, e14, p15, t15, o15, d15, e15, p16, t16, o16, d16, e16, p17, t17, o17, d17, e17, p18, t18, o18, d18, e18, d, e, a) class cc { \
    std::string _scriptName; \
public: \
	inline static const std::string type = ac; \
	inline static const std::string global_property = gp; \
    inline static const std::array<std::string, 18> fields = { #p1, #p2, #p3, #p4, #p5, #p6, #p7, #p8, #p9, #p10, #p11, #p12, #p13, #p14, #p15, #p16, #p17, #p18, }; \
    inline static const std::size_t overrideID = i; \
    cc(const std::string& scriptName, engine::json& j, engine::logger& logger, const std::shared_ptr<engine::scripts>& scripts) : \
        p1(j, scriptName, logger, scripts), p2(j, scriptName, logger, scripts), p3(j, scriptName, logger, scripts), p4(j, scriptName, logger, scripts), p5(j, scriptName, logger, scripts), p6(j, scriptName, logger, scripts), p7(j, scriptName, logger, scripts), p8(j, scriptName, logger, scripts), p9(j, scriptName, logger, scripts), p10(j, scriptName, logger, scripts), p11(j, scriptName, logger, scripts), p12(j, scriptName, logger, scripts), p13(j, scriptName, logger, scripts), p14(j, scriptName, logger, scripts), p15(j, scriptName, logger, scripts), p16(j, scriptName, logger, scripts), p17(j, scriptName, logger, scripts), p18(j, scriptName, logger, scripts), \
        _scriptName(scriptName) { e } \
	static void Register(asIScriptEngine* engine, const std::shared_ptr<DocumentationGenerator>& document) { \
        d \
		engine->RegisterObjectMethod(ac, "const string& scriptName() const", \
			asMETHOD(cc, scriptName), asCALL_THISCALL); \
        p1##_::Register(engine, document); p2##_::Register(engine, document); p3##_::Register(engine, document); p4##_::Register(engine, document); p5##_::Register(engine, document); p6##_::Register(engine, document); p7##_::Register(engine, document); p8##_::Register(engine, document); p9##_::Register(engine, document); p10##_::Register(engine, document); p11##_::Register(engine, document); p12##_::Register(engine, document); p13##_::Register(engine, document); p14##_::Register(engine, document); p15##_::Register(engine, document); p16##_::Register(engine, document); p17##_::Register(engine, document); p18##_::Register(engine, document); \
    } \
	inline const std::string& scriptName() const { return _scriptName; } \
    PROPERTY(cc, ac, p1, t1, i, o1, d1, e1) PROPERTY(cc, ac, p2, t2, i, o2, d2, e2) PROPERTY(cc, ac, p3, t3, i, o3, d3, e3) PROPERTY(cc, ac, p4, t4, i, o4, d4, e4) PROPERTY(cc, ac, p5, t5, i, o5, d5, e5) PROPERTY(cc, ac, p6, t6, i, o6, d6, e6) PROPERTY(cc, ac, p7, t7, i, o7, d7, e7) PROPERTY(cc, ac, p8, t8, i, o8, d8, e8) PROPERTY(cc, ac, p9, t9, i, o9, d9, e9) PROPERTY(cc, ac, p10, t10, i, o10, d10, e10) PROPERTY(cc, ac, p11, t11, i, o11, d11, e11) PROPERTY(cc, ac, p12, t12, i, o12, d12, e12) PROPERTY(cc, ac, p13, t13, i, o13, d13, e13) PROPERTY(cc, ac, p14, t14, i, o14, d14, e14) PROPERTY(cc, ac, p15, t15, i, o15, d15, e15) PROPERTY(cc, ac, p16, t16, i, o16, d16, e16) PROPERTY(cc, ac, p17, t17, i, o17, d17, e17) PROPERTY(cc, ac, p18, t18, i, o18, d18, e18) \
    inline static bool hasField(const std::string_view field) { \
        return field == #p1 || field == #p2 || field == #p3 || field == #p4 || field == #p5 || field == #p6 || field == #p7 || field == #p8 || field == #p9 || field == #p10 || field == #p11 || field == #p12 || field == #p13 || field == #p14 || field == #p15 || field == #p16 || field == #p17 || field == #p18 || false; \
    } \
	inline static std::string getFieldAngelScriptType(const std::string_view field) { \
		if (field == #p1) return engine::script_type<t1>(); if (field == #p2) return engine::script_type<t2>(); if (field == #p3) return engine::script_type<t3>(); if (field == #p4) return engine::script_type<t4>(); if (field == #p5) return engine::script_type<t5>(); if (field == #p6) return engine::script_type<t6>(); if (field == #p7) return engine::script_type<t7>(); if (field == #p8) return engine::script_type<t8>(); if (field == #p9) return engine::script_type<t9>(); if (field == #p10) return engine::script_type<t10>(); if (field == #p11) return engine::script_type<t11>(); if (field == #p12) return engine::script_type<t12>(); if (field == #p13) return engine::script_type<t13>(); if (field == #p14) return engine::script_type<t14>(); if (field == #p15) return engine::script_type<t15>(); if (field == #p16) return engine::script_type<t16>(); if (field == #p17) return engine::script_type<t17>(); if (field == #p18) return engine::script_type<t18>(); \
		return ""; \
	} \
	static std::any readFieldOverrideVariable(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		const asUINT variable) { \
		if (field == #p1) return awe::OverrideVariable<t1>::read(scripts, variable); if (field == #p2) return awe::OverrideVariable<t2>::read(scripts, variable); if (field == #p3) return awe::OverrideVariable<t3>::read(scripts, variable); if (field == #p4) return awe::OverrideVariable<t4>::read(scripts, variable); if (field == #p5) return awe::OverrideVariable<t5>::read(scripts, variable); if (field == #p6) return awe::OverrideVariable<t6>::read(scripts, variable); if (field == #p7) return awe::OverrideVariable<t7>::read(scripts, variable); if (field == #p8) return awe::OverrideVariable<t8>::read(scripts, variable); if (field == #p9) return awe::OverrideVariable<t9>::read(scripts, variable); if (field == #p10) return awe::OverrideVariable<t10>::read(scripts, variable); if (field == #p11) return awe::OverrideVariable<t11>::read(scripts, variable); if (field == #p12) return awe::OverrideVariable<t12>::read(scripts, variable); if (field == #p13) return awe::OverrideVariable<t13>::read(scripts, variable); if (field == #p14) return awe::OverrideVariable<t14>::read(scripts, variable); if (field == #p15) return awe::OverrideVariable<t15>::read(scripts, variable); if (field == #p16) return awe::OverrideVariable<t16>::read(scripts, variable); if (field == #p17) return awe::OverrideVariable<t17>::read(scripts, variable); if (field == #p18) return awe::OverrideVariable<t18>::read(scripts, variable); \
		return {}; \
	} \
	static std::any readFieldOverrideFunction(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		asIScriptFunction* const function, const std::any& parent) { \
		if (field == #p1) return awe::OverrideFunction<t1>::read(scripts, function, parent); if (field == #p2) return awe::OverrideFunction<t2>::read(scripts, function, parent); if (field == #p3) return awe::OverrideFunction<t3>::read(scripts, function, parent); if (field == #p4) return awe::OverrideFunction<t4>::read(scripts, function, parent); if (field == #p5) return awe::OverrideFunction<t5>::read(scripts, function, parent); if (field == #p6) return awe::OverrideFunction<t6>::read(scripts, function, parent); if (field == #p7) return awe::OverrideFunction<t7>::read(scripts, function, parent); if (field == #p8) return awe::OverrideFunction<t8>::read(scripts, function, parent); if (field == #p9) return awe::OverrideFunction<t9>::read(scripts, function, parent); if (field == #p10) return awe::OverrideFunction<t10>::read(scripts, function, parent); if (field == #p11) return awe::OverrideFunction<t11>::read(scripts, function, parent); if (field == #p12) return awe::OverrideFunction<t12>::read(scripts, function, parent); if (field == #p13) return awe::OverrideFunction<t13>::read(scripts, function, parent); if (field == #p14) return awe::OverrideFunction<t14>::read(scripts, function, parent); if (field == #p15) return awe::OverrideFunction<t15>::read(scripts, function, parent); if (field == #p16) return awe::OverrideFunction<t16>::read(scripts, function, parent); if (field == #p17) return awe::OverrideFunction<t17>::read(scripts, function, parent); if (field == #p18) return awe::OverrideFunction<t18>::read(scripts, function, parent); \
		return {}; \
	} \
    static bool isFieldOverrideable(const std::string& field) { \
        if (field == #p1) return !engine::script_type<t1>().empty(); if (field == #p2) return !engine::script_type<t2>().empty(); if (field == #p3) return !engine::script_type<t3>().empty(); if (field == #p4) return !engine::script_type<t4>().empty(); if (field == #p5) return !engine::script_type<t5>().empty(); if (field == #p6) return !engine::script_type<t6>().empty(); if (field == #p7) return !engine::script_type<t7>().empty(); if (field == #p8) return !engine::script_type<t8>().empty(); if (field == #p9) return !engine::script_type<t9>().empty(); if (field == #p10) return !engine::script_type<t10>().empty(); if (field == #p11) return !engine::script_type<t11>().empty(); if (field == #p12) return !engine::script_type<t12>().empty(); if (field == #p13) return !engine::script_type<t13>().empty(); if (field == #p14) return !engine::script_type<t14>().empty(); if (field == #p15) return !engine::script_type<t15>().empty(); if (field == #p16) return !engine::script_type<t16>().empty(); if (field == #p17) return !engine::script_type<t17>().empty(); if (field == #p18) return !engine::script_type<t18>().empty(); \
        return false; \
    } \
    std::any getFieldDefaultValue(const std::string& field) { \
        if (field == #p1) return p1(); if (field == #p2) return p2(); if (field == #p3) return p3(); if (field == #p4) return p4(); if (field == #p5) return p5(); if (field == #p6) return p6(); if (field == #p7) return p7(); if (field == #p8) return p8(); if (field == #p9) return p9(); if (field == #p10) return p10(); if (field == #p11) return p11(); if (field == #p12) return p12(); if (field == #p13) return p13(); if (field == #p14) return p14(); if (field == #p15) return p15(); if (field == #p16) return p16(); if (field == #p17) return p17(); if (field == #p18) return p18(); \
        return {}; \
    } \
    void setFieldValue(const std::string& field, const std::any& value, const awe::overrides& overrides) { \
        if (field == #p1) p1(overrides) = std::any_cast<t1>(value); if (field == #p2) p2(overrides) = std::any_cast<t2>(value); if (field == #p3) p3(overrides) = std::any_cast<t3>(value); if (field == #p4) p4(overrides) = std::any_cast<t4>(value); if (field == #p5) p5(overrides) = std::any_cast<t5>(value); if (field == #p6) p6(overrides) = std::any_cast<t6>(value); if (field == #p7) p7(overrides) = std::any_cast<t7>(value); if (field == #p8) p8(overrides) = std::any_cast<t8>(value); if (field == #p9) p9(overrides) = std::any_cast<t9>(value); if (field == #p10) p10(overrides) = std::any_cast<t10>(value); if (field == #p11) p11(overrides) = std::any_cast<t11>(value); if (field == #p12) p12(overrides) = std::any_cast<t12>(value); if (field == #p13) p13(overrides) = std::any_cast<t13>(value); if (field == #p14) p14(overrides) = std::any_cast<t14>(value); if (field == #p15) p15(overrides) = std::any_cast<t15>(value); if (field == #p16) p16(overrides) = std::any_cast<t16>(value); if (field == #p17) p17(overrides) = std::any_cast<t17>(value); if (field == #p18) p18(overrides) = std::any_cast<t18>(value); \
    } \
    a \
};

#define GAME_PROPERTY_19(cc, ac, gp, i, p1, t1, o1, d1, e1, p2, t2, o2, d2, e2, p3, t3, o3, d3, e3, p4, t4, o4, d4, e4, p5, t5, o5, d5, e5, p6, t6, o6, d6, e6, p7, t7, o7, d7, e7, p8, t8, o8, d8, e8, p9, t9, o9, d9, e9, p10, t10, o10, d10, e10, p11, t11, o11, d11, e11, p12, t12, o12, d12, e12, p13, t13, o13, d13, e13, p14, t14, o14, d14, e14, p15, t15, o15, d15, e15, p16, t16, o16, d16, e16, p17, t17, o17, d17, e17, p18, t18, o18, d18, e18, p19, t19, o19, d19, e19, d, e, a) class cc { \
    std::string _scriptName; \
public: \
	inline static const std::string type = ac; \
	inline static const std::string global_property = gp; \
    inline static const std::array<std::string, 19> fields = { #p1, #p2, #p3, #p4, #p5, #p6, #p7, #p8, #p9, #p10, #p11, #p12, #p13, #p14, #p15, #p16, #p17, #p18, #p19, }; \
    inline static const std::size_t overrideID = i; \
    cc(const std::string& scriptName, engine::json& j, engine::logger& logger, const std::shared_ptr<engine::scripts>& scripts) : \
        p1(j, scriptName, logger, scripts), p2(j, scriptName, logger, scripts), p3(j, scriptName, logger, scripts), p4(j, scriptName, logger, scripts), p5(j, scriptName, logger, scripts), p6(j, scriptName, logger, scripts), p7(j, scriptName, logger, scripts), p8(j, scriptName, logger, scripts), p9(j, scriptName, logger, scripts), p10(j, scriptName, logger, scripts), p11(j, scriptName, logger, scripts), p12(j, scriptName, logger, scripts), p13(j, scriptName, logger, scripts), p14(j, scriptName, logger, scripts), p15(j, scriptName, logger, scripts), p16(j, scriptName, logger, scripts), p17(j, scriptName, logger, scripts), p18(j, scriptName, logger, scripts), p19(j, scriptName, logger, scripts), \
        _scriptName(scriptName) { e } \
	static void Register(asIScriptEngine* engine, const std::shared_ptr<DocumentationGenerator>& document) { \
        d \
		engine->RegisterObjectMethod(ac, "const string& scriptName() const", \
			asMETHOD(cc, scriptName), asCALL_THISCALL); \
        p1##_::Register(engine, document); p2##_::Register(engine, document); p3##_::Register(engine, document); p4##_::Register(engine, document); p5##_::Register(engine, document); p6##_::Register(engine, document); p7##_::Register(engine, document); p8##_::Register(engine, document); p9##_::Register(engine, document); p10##_::Register(engine, document); p11##_::Register(engine, document); p12##_::Register(engine, document); p13##_::Register(engine, document); p14##_::Register(engine, document); p15##_::Register(engine, document); p16##_::Register(engine, document); p17##_::Register(engine, document); p18##_::Register(engine, document); p19##_::Register(engine, document); \
    } \
	inline const std::string& scriptName() const { return _scriptName; } \
    PROPERTY(cc, ac, p1, t1, i, o1, d1, e1) PROPERTY(cc, ac, p2, t2, i, o2, d2, e2) PROPERTY(cc, ac, p3, t3, i, o3, d3, e3) PROPERTY(cc, ac, p4, t4, i, o4, d4, e4) PROPERTY(cc, ac, p5, t5, i, o5, d5, e5) PROPERTY(cc, ac, p6, t6, i, o6, d6, e6) PROPERTY(cc, ac, p7, t7, i, o7, d7, e7) PROPERTY(cc, ac, p8, t8, i, o8, d8, e8) PROPERTY(cc, ac, p9, t9, i, o9, d9, e9) PROPERTY(cc, ac, p10, t10, i, o10, d10, e10) PROPERTY(cc, ac, p11, t11, i, o11, d11, e11) PROPERTY(cc, ac, p12, t12, i, o12, d12, e12) PROPERTY(cc, ac, p13, t13, i, o13, d13, e13) PROPERTY(cc, ac, p14, t14, i, o14, d14, e14) PROPERTY(cc, ac, p15, t15, i, o15, d15, e15) PROPERTY(cc, ac, p16, t16, i, o16, d16, e16) PROPERTY(cc, ac, p17, t17, i, o17, d17, e17) PROPERTY(cc, ac, p18, t18, i, o18, d18, e18) PROPERTY(cc, ac, p19, t19, i, o19, d19, e19) \
    inline static bool hasField(const std::string_view field) { \
        return field == #p1 || field == #p2 || field == #p3 || field == #p4 || field == #p5 || field == #p6 || field == #p7 || field == #p8 || field == #p9 || field == #p10 || field == #p11 || field == #p12 || field == #p13 || field == #p14 || field == #p15 || field == #p16 || field == #p17 || field == #p18 || field == #p19 || false; \
    } \
	inline static std::string getFieldAngelScriptType(const std::string_view field) { \
		if (field == #p1) return engine::script_type<t1>(); if (field == #p2) return engine::script_type<t2>(); if (field == #p3) return engine::script_type<t3>(); if (field == #p4) return engine::script_type<t4>(); if (field == #p5) return engine::script_type<t5>(); if (field == #p6) return engine::script_type<t6>(); if (field == #p7) return engine::script_type<t7>(); if (field == #p8) return engine::script_type<t8>(); if (field == #p9) return engine::script_type<t9>(); if (field == #p10) return engine::script_type<t10>(); if (field == #p11) return engine::script_type<t11>(); if (field == #p12) return engine::script_type<t12>(); if (field == #p13) return engine::script_type<t13>(); if (field == #p14) return engine::script_type<t14>(); if (field == #p15) return engine::script_type<t15>(); if (field == #p16) return engine::script_type<t16>(); if (field == #p17) return engine::script_type<t17>(); if (field == #p18) return engine::script_type<t18>(); if (field == #p19) return engine::script_type<t19>(); \
		return ""; \
	} \
	static std::any readFieldOverrideVariable(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		const asUINT variable) { \
		if (field == #p1) return awe::OverrideVariable<t1>::read(scripts, variable); if (field == #p2) return awe::OverrideVariable<t2>::read(scripts, variable); if (field == #p3) return awe::OverrideVariable<t3>::read(scripts, variable); if (field == #p4) return awe::OverrideVariable<t4>::read(scripts, variable); if (field == #p5) return awe::OverrideVariable<t5>::read(scripts, variable); if (field == #p6) return awe::OverrideVariable<t6>::read(scripts, variable); if (field == #p7) return awe::OverrideVariable<t7>::read(scripts, variable); if (field == #p8) return awe::OverrideVariable<t8>::read(scripts, variable); if (field == #p9) return awe::OverrideVariable<t9>::read(scripts, variable); if (field == #p10) return awe::OverrideVariable<t10>::read(scripts, variable); if (field == #p11) return awe::OverrideVariable<t11>::read(scripts, variable); if (field == #p12) return awe::OverrideVariable<t12>::read(scripts, variable); if (field == #p13) return awe::OverrideVariable<t13>::read(scripts, variable); if (field == #p14) return awe::OverrideVariable<t14>::read(scripts, variable); if (field == #p15) return awe::OverrideVariable<t15>::read(scripts, variable); if (field == #p16) return awe::OverrideVariable<t16>::read(scripts, variable); if (field == #p17) return awe::OverrideVariable<t17>::read(scripts, variable); if (field == #p18) return awe::OverrideVariable<t18>::read(scripts, variable); if (field == #p19) return awe::OverrideVariable<t19>::read(scripts, variable); \
		return {}; \
	} \
	static std::any readFieldOverrideFunction(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		asIScriptFunction* const function, const std::any& parent) { \
		if (field == #p1) return awe::OverrideFunction<t1>::read(scripts, function, parent); if (field == #p2) return awe::OverrideFunction<t2>::read(scripts, function, parent); if (field == #p3) return awe::OverrideFunction<t3>::read(scripts, function, parent); if (field == #p4) return awe::OverrideFunction<t4>::read(scripts, function, parent); if (field == #p5) return awe::OverrideFunction<t5>::read(scripts, function, parent); if (field == #p6) return awe::OverrideFunction<t6>::read(scripts, function, parent); if (field == #p7) return awe::OverrideFunction<t7>::read(scripts, function, parent); if (field == #p8) return awe::OverrideFunction<t8>::read(scripts, function, parent); if (field == #p9) return awe::OverrideFunction<t9>::read(scripts, function, parent); if (field == #p10) return awe::OverrideFunction<t10>::read(scripts, function, parent); if (field == #p11) return awe::OverrideFunction<t11>::read(scripts, function, parent); if (field == #p12) return awe::OverrideFunction<t12>::read(scripts, function, parent); if (field == #p13) return awe::OverrideFunction<t13>::read(scripts, function, parent); if (field == #p14) return awe::OverrideFunction<t14>::read(scripts, function, parent); if (field == #p15) return awe::OverrideFunction<t15>::read(scripts, function, parent); if (field == #p16) return awe::OverrideFunction<t16>::read(scripts, function, parent); if (field == #p17) return awe::OverrideFunction<t17>::read(scripts, function, parent); if (field == #p18) return awe::OverrideFunction<t18>::read(scripts, function, parent); if (field == #p19) return awe::OverrideFunction<t19>::read(scripts, function, parent); \
		return {}; \
	} \
    static bool isFieldOverrideable(const std::string& field) { \
        if (field == #p1) return !engine::script_type<t1>().empty(); if (field == #p2) return !engine::script_type<t2>().empty(); if (field == #p3) return !engine::script_type<t3>().empty(); if (field == #p4) return !engine::script_type<t4>().empty(); if (field == #p5) return !engine::script_type<t5>().empty(); if (field == #p6) return !engine::script_type<t6>().empty(); if (field == #p7) return !engine::script_type<t7>().empty(); if (field == #p8) return !engine::script_type<t8>().empty(); if (field == #p9) return !engine::script_type<t9>().empty(); if (field == #p10) return !engine::script_type<t10>().empty(); if (field == #p11) return !engine::script_type<t11>().empty(); if (field == #p12) return !engine::script_type<t12>().empty(); if (field == #p13) return !engine::script_type<t13>().empty(); if (field == #p14) return !engine::script_type<t14>().empty(); if (field == #p15) return !engine::script_type<t15>().empty(); if (field == #p16) return !engine::script_type<t16>().empty(); if (field == #p17) return !engine::script_type<t17>().empty(); if (field == #p18) return !engine::script_type<t18>().empty(); if (field == #p19) return !engine::script_type<t19>().empty(); \
        return false; \
    } \
    std::any getFieldDefaultValue(const std::string& field) { \
        if (field == #p1) return p1(); if (field == #p2) return p2(); if (field == #p3) return p3(); if (field == #p4) return p4(); if (field == #p5) return p5(); if (field == #p6) return p6(); if (field == #p7) return p7(); if (field == #p8) return p8(); if (field == #p9) return p9(); if (field == #p10) return p10(); if (field == #p11) return p11(); if (field == #p12) return p12(); if (field == #p13) return p13(); if (field == #p14) return p14(); if (field == #p15) return p15(); if (field == #p16) return p16(); if (field == #p17) return p17(); if (field == #p18) return p18(); if (field == #p19) return p19(); \
        return {}; \
    } \
    void setFieldValue(const std::string& field, const std::any& value, const awe::overrides& overrides) { \
        if (field == #p1) p1(overrides) = std::any_cast<t1>(value); if (field == #p2) p2(overrides) = std::any_cast<t2>(value); if (field == #p3) p3(overrides) = std::any_cast<t3>(value); if (field == #p4) p4(overrides) = std::any_cast<t4>(value); if (field == #p5) p5(overrides) = std::any_cast<t5>(value); if (field == #p6) p6(overrides) = std::any_cast<t6>(value); if (field == #p7) p7(overrides) = std::any_cast<t7>(value); if (field == #p8) p8(overrides) = std::any_cast<t8>(value); if (field == #p9) p9(overrides) = std::any_cast<t9>(value); if (field == #p10) p10(overrides) = std::any_cast<t10>(value); if (field == #p11) p11(overrides) = std::any_cast<t11>(value); if (field == #p12) p12(overrides) = std::any_cast<t12>(value); if (field == #p13) p13(overrides) = std::any_cast<t13>(value); if (field == #p14) p14(overrides) = std::any_cast<t14>(value); if (field == #p15) p15(overrides) = std::any_cast<t15>(value); if (field == #p16) p16(overrides) = std::any_cast<t16>(value); if (field == #p17) p17(overrides) = std::any_cast<t17>(value); if (field == #p18) p18(overrides) = std::any_cast<t18>(value); if (field == #p19) p19(overrides) = std::any_cast<t19>(value); \
    } \
    a \
};

#define GAME_PROPERTY_20(cc, ac, gp, i, p1, t1, o1, d1, e1, p2, t2, o2, d2, e2, p3, t3, o3, d3, e3, p4, t4, o4, d4, e4, p5, t5, o5, d5, e5, p6, t6, o6, d6, e6, p7, t7, o7, d7, e7, p8, t8, o8, d8, e8, p9, t9, o9, d9, e9, p10, t10, o10, d10, e10, p11, t11, o11, d11, e11, p12, t12, o12, d12, e12, p13, t13, o13, d13, e13, p14, t14, o14, d14, e14, p15, t15, o15, d15, e15, p16, t16, o16, d16, e16, p17, t17, o17, d17, e17, p18, t18, o18, d18, e18, p19, t19, o19, d19, e19, p20, t20, o20, d20, e20, d, e, a) class cc { \
    std::string _scriptName; \
public: \
	inline static const std::string type = ac; \
	inline static const std::string global_property = gp; \
    inline static const std::array<std::string, 20> fields = { #p1, #p2, #p3, #p4, #p5, #p6, #p7, #p8, #p9, #p10, #p11, #p12, #p13, #p14, #p15, #p16, #p17, #p18, #p19, #p20, }; \
    inline static const std::size_t overrideID = i; \
    cc(const std::string& scriptName, engine::json& j, engine::logger& logger, const std::shared_ptr<engine::scripts>& scripts) : \
        p1(j, scriptName, logger, scripts), p2(j, scriptName, logger, scripts), p3(j, scriptName, logger, scripts), p4(j, scriptName, logger, scripts), p5(j, scriptName, logger, scripts), p6(j, scriptName, logger, scripts), p7(j, scriptName, logger, scripts), p8(j, scriptName, logger, scripts), p9(j, scriptName, logger, scripts), p10(j, scriptName, logger, scripts), p11(j, scriptName, logger, scripts), p12(j, scriptName, logger, scripts), p13(j, scriptName, logger, scripts), p14(j, scriptName, logger, scripts), p15(j, scriptName, logger, scripts), p16(j, scriptName, logger, scripts), p17(j, scriptName, logger, scripts), p18(j, scriptName, logger, scripts), p19(j, scriptName, logger, scripts), p20(j, scriptName, logger, scripts), \
        _scriptName(scriptName) { e } \
	static void Register(asIScriptEngine* engine, const std::shared_ptr<DocumentationGenerator>& document) { \
        d \
		engine->RegisterObjectMethod(ac, "const string& scriptName() const", \
			asMETHOD(cc, scriptName), asCALL_THISCALL); \
        p1##_::Register(engine, document); p2##_::Register(engine, document); p3##_::Register(engine, document); p4##_::Register(engine, document); p5##_::Register(engine, document); p6##_::Register(engine, document); p7##_::Register(engine, document); p8##_::Register(engine, document); p9##_::Register(engine, document); p10##_::Register(engine, document); p11##_::Register(engine, document); p12##_::Register(engine, document); p13##_::Register(engine, document); p14##_::Register(engine, document); p15##_::Register(engine, document); p16##_::Register(engine, document); p17##_::Register(engine, document); p18##_::Register(engine, document); p19##_::Register(engine, document); p20##_::Register(engine, document); \
    } \
	inline const std::string& scriptName() const { return _scriptName; } \
    PROPERTY(cc, ac, p1, t1, i, o1, d1, e1) PROPERTY(cc, ac, p2, t2, i, o2, d2, e2) PROPERTY(cc, ac, p3, t3, i, o3, d3, e3) PROPERTY(cc, ac, p4, t4, i, o4, d4, e4) PROPERTY(cc, ac, p5, t5, i, o5, d5, e5) PROPERTY(cc, ac, p6, t6, i, o6, d6, e6) PROPERTY(cc, ac, p7, t7, i, o7, d7, e7) PROPERTY(cc, ac, p8, t8, i, o8, d8, e8) PROPERTY(cc, ac, p9, t9, i, o9, d9, e9) PROPERTY(cc, ac, p10, t10, i, o10, d10, e10) PROPERTY(cc, ac, p11, t11, i, o11, d11, e11) PROPERTY(cc, ac, p12, t12, i, o12, d12, e12) PROPERTY(cc, ac, p13, t13, i, o13, d13, e13) PROPERTY(cc, ac, p14, t14, i, o14, d14, e14) PROPERTY(cc, ac, p15, t15, i, o15, d15, e15) PROPERTY(cc, ac, p16, t16, i, o16, d16, e16) PROPERTY(cc, ac, p17, t17, i, o17, d17, e17) PROPERTY(cc, ac, p18, t18, i, o18, d18, e18) PROPERTY(cc, ac, p19, t19, i, o19, d19, e19) PROPERTY(cc, ac, p20, t20, i, o20, d20, e20) \
    inline static bool hasField(const std::string_view field) { \
        return field == #p1 || field == #p2 || field == #p3 || field == #p4 || field == #p5 || field == #p6 || field == #p7 || field == #p8 || field == #p9 || field == #p10 || field == #p11 || field == #p12 || field == #p13 || field == #p14 || field == #p15 || field == #p16 || field == #p17 || field == #p18 || field == #p19 || field == #p20 || false; \
    } \
	inline static std::string getFieldAngelScriptType(const std::string_view field) { \
		if (field == #p1) return engine::script_type<t1>(); if (field == #p2) return engine::script_type<t2>(); if (field == #p3) return engine::script_type<t3>(); if (field == #p4) return engine::script_type<t4>(); if (field == #p5) return engine::script_type<t5>(); if (field == #p6) return engine::script_type<t6>(); if (field == #p7) return engine::script_type<t7>(); if (field == #p8) return engine::script_type<t8>(); if (field == #p9) return engine::script_type<t9>(); if (field == #p10) return engine::script_type<t10>(); if (field == #p11) return engine::script_type<t11>(); if (field == #p12) return engine::script_type<t12>(); if (field == #p13) return engine::script_type<t13>(); if (field == #p14) return engine::script_type<t14>(); if (field == #p15) return engine::script_type<t15>(); if (field == #p16) return engine::script_type<t16>(); if (field == #p17) return engine::script_type<t17>(); if (field == #p18) return engine::script_type<t18>(); if (field == #p19) return engine::script_type<t19>(); if (field == #p20) return engine::script_type<t20>(); \
		return ""; \
	} \
	static std::any readFieldOverrideVariable(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		const asUINT variable) { \
		if (field == #p1) return awe::OverrideVariable<t1>::read(scripts, variable); if (field == #p2) return awe::OverrideVariable<t2>::read(scripts, variable); if (field == #p3) return awe::OverrideVariable<t3>::read(scripts, variable); if (field == #p4) return awe::OverrideVariable<t4>::read(scripts, variable); if (field == #p5) return awe::OverrideVariable<t5>::read(scripts, variable); if (field == #p6) return awe::OverrideVariable<t6>::read(scripts, variable); if (field == #p7) return awe::OverrideVariable<t7>::read(scripts, variable); if (field == #p8) return awe::OverrideVariable<t8>::read(scripts, variable); if (field == #p9) return awe::OverrideVariable<t9>::read(scripts, variable); if (field == #p10) return awe::OverrideVariable<t10>::read(scripts, variable); if (field == #p11) return awe::OverrideVariable<t11>::read(scripts, variable); if (field == #p12) return awe::OverrideVariable<t12>::read(scripts, variable); if (field == #p13) return awe::OverrideVariable<t13>::read(scripts, variable); if (field == #p14) return awe::OverrideVariable<t14>::read(scripts, variable); if (field == #p15) return awe::OverrideVariable<t15>::read(scripts, variable); if (field == #p16) return awe::OverrideVariable<t16>::read(scripts, variable); if (field == #p17) return awe::OverrideVariable<t17>::read(scripts, variable); if (field == #p18) return awe::OverrideVariable<t18>::read(scripts, variable); if (field == #p19) return awe::OverrideVariable<t19>::read(scripts, variable); if (field == #p20) return awe::OverrideVariable<t20>::read(scripts, variable); \
		return {}; \
	} \
	static std::any readFieldOverrideFunction(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		asIScriptFunction* const function, const std::any& parent) { \
		if (field == #p1) return awe::OverrideFunction<t1>::read(scripts, function, parent); if (field == #p2) return awe::OverrideFunction<t2>::read(scripts, function, parent); if (field == #p3) return awe::OverrideFunction<t3>::read(scripts, function, parent); if (field == #p4) return awe::OverrideFunction<t4>::read(scripts, function, parent); if (field == #p5) return awe::OverrideFunction<t5>::read(scripts, function, parent); if (field == #p6) return awe::OverrideFunction<t6>::read(scripts, function, parent); if (field == #p7) return awe::OverrideFunction<t7>::read(scripts, function, parent); if (field == #p8) return awe::OverrideFunction<t8>::read(scripts, function, parent); if (field == #p9) return awe::OverrideFunction<t9>::read(scripts, function, parent); if (field == #p10) return awe::OverrideFunction<t10>::read(scripts, function, parent); if (field == #p11) return awe::OverrideFunction<t11>::read(scripts, function, parent); if (field == #p12) return awe::OverrideFunction<t12>::read(scripts, function, parent); if (field == #p13) return awe::OverrideFunction<t13>::read(scripts, function, parent); if (field == #p14) return awe::OverrideFunction<t14>::read(scripts, function, parent); if (field == #p15) return awe::OverrideFunction<t15>::read(scripts, function, parent); if (field == #p16) return awe::OverrideFunction<t16>::read(scripts, function, parent); if (field == #p17) return awe::OverrideFunction<t17>::read(scripts, function, parent); if (field == #p18) return awe::OverrideFunction<t18>::read(scripts, function, parent); if (field == #p19) return awe::OverrideFunction<t19>::read(scripts, function, parent); if (field == #p20) return awe::OverrideFunction<t20>::read(scripts, function, parent); \
		return {}; \
	} \
    static bool isFieldOverrideable(const std::string& field) { \
        if (field == #p1) return !engine::script_type<t1>().empty(); if (field == #p2) return !engine::script_type<t2>().empty(); if (field == #p3) return !engine::script_type<t3>().empty(); if (field == #p4) return !engine::script_type<t4>().empty(); if (field == #p5) return !engine::script_type<t5>().empty(); if (field == #p6) return !engine::script_type<t6>().empty(); if (field == #p7) return !engine::script_type<t7>().empty(); if (field == #p8) return !engine::script_type<t8>().empty(); if (field == #p9) return !engine::script_type<t9>().empty(); if (field == #p10) return !engine::script_type<t10>().empty(); if (field == #p11) return !engine::script_type<t11>().empty(); if (field == #p12) return !engine::script_type<t12>().empty(); if (field == #p13) return !engine::script_type<t13>().empty(); if (field == #p14) return !engine::script_type<t14>().empty(); if (field == #p15) return !engine::script_type<t15>().empty(); if (field == #p16) return !engine::script_type<t16>().empty(); if (field == #p17) return !engine::script_type<t17>().empty(); if (field == #p18) return !engine::script_type<t18>().empty(); if (field == #p19) return !engine::script_type<t19>().empty(); if (field == #p20) return !engine::script_type<t20>().empty(); \
        return false; \
    } \
    std::any getFieldDefaultValue(const std::string& field) { \
        if (field == #p1) return p1(); if (field == #p2) return p2(); if (field == #p3) return p3(); if (field == #p4) return p4(); if (field == #p5) return p5(); if (field == #p6) return p6(); if (field == #p7) return p7(); if (field == #p8) return p8(); if (field == #p9) return p9(); if (field == #p10) return p10(); if (field == #p11) return p11(); if (field == #p12) return p12(); if (field == #p13) return p13(); if (field == #p14) return p14(); if (field == #p15) return p15(); if (field == #p16) return p16(); if (field == #p17) return p17(); if (field == #p18) return p18(); if (field == #p19) return p19(); if (field == #p20) return p20(); \
        return {}; \
    } \
    void setFieldValue(const std::string& field, const std::any& value, const awe::overrides& overrides) { \
        if (field == #p1) p1(overrides) = std::any_cast<t1>(value); if (field == #p2) p2(overrides) = std::any_cast<t2>(value); if (field == #p3) p3(overrides) = std::any_cast<t3>(value); if (field == #p4) p4(overrides) = std::any_cast<t4>(value); if (field == #p5) p5(overrides) = std::any_cast<t5>(value); if (field == #p6) p6(overrides) = std::any_cast<t6>(value); if (field == #p7) p7(overrides) = std::any_cast<t7>(value); if (field == #p8) p8(overrides) = std::any_cast<t8>(value); if (field == #p9) p9(overrides) = std::any_cast<t9>(value); if (field == #p10) p10(overrides) = std::any_cast<t10>(value); if (field == #p11) p11(overrides) = std::any_cast<t11>(value); if (field == #p12) p12(overrides) = std::any_cast<t12>(value); if (field == #p13) p13(overrides) = std::any_cast<t13>(value); if (field == #p14) p14(overrides) = std::any_cast<t14>(value); if (field == #p15) p15(overrides) = std::any_cast<t15>(value); if (field == #p16) p16(overrides) = std::any_cast<t16>(value); if (field == #p17) p17(overrides) = std::any_cast<t17>(value); if (field == #p18) p18(overrides) = std::any_cast<t18>(value); if (field == #p19) p19(overrides) = std::any_cast<t19>(value); if (field == #p20) p20(overrides) = std::any_cast<t20>(value); \
    } \
    a \
};

#define GAME_PROPERTY_21(cc, ac, gp, i, p1, t1, o1, d1, e1, p2, t2, o2, d2, e2, p3, t3, o3, d3, e3, p4, t4, o4, d4, e4, p5, t5, o5, d5, e5, p6, t6, o6, d6, e6, p7, t7, o7, d7, e7, p8, t8, o8, d8, e8, p9, t9, o9, d9, e9, p10, t10, o10, d10, e10, p11, t11, o11, d11, e11, p12, t12, o12, d12, e12, p13, t13, o13, d13, e13, p14, t14, o14, d14, e14, p15, t15, o15, d15, e15, p16, t16, o16, d16, e16, p17, t17, o17, d17, e17, p18, t18, o18, d18, e18, p19, t19, o19, d19, e19, p20, t20, o20, d20, e20, p21, t21, o21, d21, e21, d, e, a) class cc { \
    std::string _scriptName; \
public: \
	inline static const std::string type = ac; \
	inline static const std::string global_property = gp; \
    inline static const std::array<std::string, 21> fields = { #p1, #p2, #p3, #p4, #p5, #p6, #p7, #p8, #p9, #p10, #p11, #p12, #p13, #p14, #p15, #p16, #p17, #p18, #p19, #p20, #p21, }; \
    inline static const std::size_t overrideID = i; \
    cc(const std::string& scriptName, engine::json& j, engine::logger& logger, const std::shared_ptr<engine::scripts>& scripts) : \
        p1(j, scriptName, logger, scripts), p2(j, scriptName, logger, scripts), p3(j, scriptName, logger, scripts), p4(j, scriptName, logger, scripts), p5(j, scriptName, logger, scripts), p6(j, scriptName, logger, scripts), p7(j, scriptName, logger, scripts), p8(j, scriptName, logger, scripts), p9(j, scriptName, logger, scripts), p10(j, scriptName, logger, scripts), p11(j, scriptName, logger, scripts), p12(j, scriptName, logger, scripts), p13(j, scriptName, logger, scripts), p14(j, scriptName, logger, scripts), p15(j, scriptName, logger, scripts), p16(j, scriptName, logger, scripts), p17(j, scriptName, logger, scripts), p18(j, scriptName, logger, scripts), p19(j, scriptName, logger, scripts), p20(j, scriptName, logger, scripts), p21(j, scriptName, logger, scripts), \
        _scriptName(scriptName) { e } \
	static void Register(asIScriptEngine* engine, const std::shared_ptr<DocumentationGenerator>& document) { \
        d \
		engine->RegisterObjectMethod(ac, "const string& scriptName() const", \
			asMETHOD(cc, scriptName), asCALL_THISCALL); \
        p1##_::Register(engine, document); p2##_::Register(engine, document); p3##_::Register(engine, document); p4##_::Register(engine, document); p5##_::Register(engine, document); p6##_::Register(engine, document); p7##_::Register(engine, document); p8##_::Register(engine, document); p9##_::Register(engine, document); p10##_::Register(engine, document); p11##_::Register(engine, document); p12##_::Register(engine, document); p13##_::Register(engine, document); p14##_::Register(engine, document); p15##_::Register(engine, document); p16##_::Register(engine, document); p17##_::Register(engine, document); p18##_::Register(engine, document); p19##_::Register(engine, document); p20##_::Register(engine, document); p21##_::Register(engine, document); \
    } \
	inline const std::string& scriptName() const { return _scriptName; } \
    PROPERTY(cc, ac, p1, t1, i, o1, d1, e1) PROPERTY(cc, ac, p2, t2, i, o2, d2, e2) PROPERTY(cc, ac, p3, t3, i, o3, d3, e3) PROPERTY(cc, ac, p4, t4, i, o4, d4, e4) PROPERTY(cc, ac, p5, t5, i, o5, d5, e5) PROPERTY(cc, ac, p6, t6, i, o6, d6, e6) PROPERTY(cc, ac, p7, t7, i, o7, d7, e7) PROPERTY(cc, ac, p8, t8, i, o8, d8, e8) PROPERTY(cc, ac, p9, t9, i, o9, d9, e9) PROPERTY(cc, ac, p10, t10, i, o10, d10, e10) PROPERTY(cc, ac, p11, t11, i, o11, d11, e11) PROPERTY(cc, ac, p12, t12, i, o12, d12, e12) PROPERTY(cc, ac, p13, t13, i, o13, d13, e13) PROPERTY(cc, ac, p14, t14, i, o14, d14, e14) PROPERTY(cc, ac, p15, t15, i, o15, d15, e15) PROPERTY(cc, ac, p16, t16, i, o16, d16, e16) PROPERTY(cc, ac, p17, t17, i, o17, d17, e17) PROPERTY(cc, ac, p18, t18, i, o18, d18, e18) PROPERTY(cc, ac, p19, t19, i, o19, d19, e19) PROPERTY(cc, ac, p20, t20, i, o20, d20, e20) PROPERTY(cc, ac, p21, t21, i, o21, d21, e21) \
    inline static bool hasField(const std::string_view field) { \
        return field == #p1 || field == #p2 || field == #p3 || field == #p4 || field == #p5 || field == #p6 || field == #p7 || field == #p8 || field == #p9 || field == #p10 || field == #p11 || field == #p12 || field == #p13 || field == #p14 || field == #p15 || field == #p16 || field == #p17 || field == #p18 || field == #p19 || field == #p20 || field == #p21 || false; \
    } \
	inline static std::string getFieldAngelScriptType(const std::string_view field) { \
		if (field == #p1) return engine::script_type<t1>(); if (field == #p2) return engine::script_type<t2>(); if (field == #p3) return engine::script_type<t3>(); if (field == #p4) return engine::script_type<t4>(); if (field == #p5) return engine::script_type<t5>(); if (field == #p6) return engine::script_type<t6>(); if (field == #p7) return engine::script_type<t7>(); if (field == #p8) return engine::script_type<t8>(); if (field == #p9) return engine::script_type<t9>(); if (field == #p10) return engine::script_type<t10>(); if (field == #p11) return engine::script_type<t11>(); if (field == #p12) return engine::script_type<t12>(); if (field == #p13) return engine::script_type<t13>(); if (field == #p14) return engine::script_type<t14>(); if (field == #p15) return engine::script_type<t15>(); if (field == #p16) return engine::script_type<t16>(); if (field == #p17) return engine::script_type<t17>(); if (field == #p18) return engine::script_type<t18>(); if (field == #p19) return engine::script_type<t19>(); if (field == #p20) return engine::script_type<t20>(); if (field == #p21) return engine::script_type<t21>(); \
		return ""; \
	} \
	static std::any readFieldOverrideVariable(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		const asUINT variable) { \
		if (field == #p1) return awe::OverrideVariable<t1>::read(scripts, variable); if (field == #p2) return awe::OverrideVariable<t2>::read(scripts, variable); if (field == #p3) return awe::OverrideVariable<t3>::read(scripts, variable); if (field == #p4) return awe::OverrideVariable<t4>::read(scripts, variable); if (field == #p5) return awe::OverrideVariable<t5>::read(scripts, variable); if (field == #p6) return awe::OverrideVariable<t6>::read(scripts, variable); if (field == #p7) return awe::OverrideVariable<t7>::read(scripts, variable); if (field == #p8) return awe::OverrideVariable<t8>::read(scripts, variable); if (field == #p9) return awe::OverrideVariable<t9>::read(scripts, variable); if (field == #p10) return awe::OverrideVariable<t10>::read(scripts, variable); if (field == #p11) return awe::OverrideVariable<t11>::read(scripts, variable); if (field == #p12) return awe::OverrideVariable<t12>::read(scripts, variable); if (field == #p13) return awe::OverrideVariable<t13>::read(scripts, variable); if (field == #p14) return awe::OverrideVariable<t14>::read(scripts, variable); if (field == #p15) return awe::OverrideVariable<t15>::read(scripts, variable); if (field == #p16) return awe::OverrideVariable<t16>::read(scripts, variable); if (field == #p17) return awe::OverrideVariable<t17>::read(scripts, variable); if (field == #p18) return awe::OverrideVariable<t18>::read(scripts, variable); if (field == #p19) return awe::OverrideVariable<t19>::read(scripts, variable); if (field == #p20) return awe::OverrideVariable<t20>::read(scripts, variable); if (field == #p21) return awe::OverrideVariable<t21>::read(scripts, variable); \
		return {}; \
	} \
	static std::any readFieldOverrideFunction(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		asIScriptFunction* const function, const std::any& parent) { \
		if (field == #p1) return awe::OverrideFunction<t1>::read(scripts, function, parent); if (field == #p2) return awe::OverrideFunction<t2>::read(scripts, function, parent); if (field == #p3) return awe::OverrideFunction<t3>::read(scripts, function, parent); if (field == #p4) return awe::OverrideFunction<t4>::read(scripts, function, parent); if (field == #p5) return awe::OverrideFunction<t5>::read(scripts, function, parent); if (field == #p6) return awe::OverrideFunction<t6>::read(scripts, function, parent); if (field == #p7) return awe::OverrideFunction<t7>::read(scripts, function, parent); if (field == #p8) return awe::OverrideFunction<t8>::read(scripts, function, parent); if (field == #p9) return awe::OverrideFunction<t9>::read(scripts, function, parent); if (field == #p10) return awe::OverrideFunction<t10>::read(scripts, function, parent); if (field == #p11) return awe::OverrideFunction<t11>::read(scripts, function, parent); if (field == #p12) return awe::OverrideFunction<t12>::read(scripts, function, parent); if (field == #p13) return awe::OverrideFunction<t13>::read(scripts, function, parent); if (field == #p14) return awe::OverrideFunction<t14>::read(scripts, function, parent); if (field == #p15) return awe::OverrideFunction<t15>::read(scripts, function, parent); if (field == #p16) return awe::OverrideFunction<t16>::read(scripts, function, parent); if (field == #p17) return awe::OverrideFunction<t17>::read(scripts, function, parent); if (field == #p18) return awe::OverrideFunction<t18>::read(scripts, function, parent); if (field == #p19) return awe::OverrideFunction<t19>::read(scripts, function, parent); if (field == #p20) return awe::OverrideFunction<t20>::read(scripts, function, parent); if (field == #p21) return awe::OverrideFunction<t21>::read(scripts, function, parent); \
		return {}; \
	} \
    static bool isFieldOverrideable(const std::string& field) { \
        if (field == #p1) return !engine::script_type<t1>().empty(); if (field == #p2) return !engine::script_type<t2>().empty(); if (field == #p3) return !engine::script_type<t3>().empty(); if (field == #p4) return !engine::script_type<t4>().empty(); if (field == #p5) return !engine::script_type<t5>().empty(); if (field == #p6) return !engine::script_type<t6>().empty(); if (field == #p7) return !engine::script_type<t7>().empty(); if (field == #p8) return !engine::script_type<t8>().empty(); if (field == #p9) return !engine::script_type<t9>().empty(); if (field == #p10) return !engine::script_type<t10>().empty(); if (field == #p11) return !engine::script_type<t11>().empty(); if (field == #p12) return !engine::script_type<t12>().empty(); if (field == #p13) return !engine::script_type<t13>().empty(); if (field == #p14) return !engine::script_type<t14>().empty(); if (field == #p15) return !engine::script_type<t15>().empty(); if (field == #p16) return !engine::script_type<t16>().empty(); if (field == #p17) return !engine::script_type<t17>().empty(); if (field == #p18) return !engine::script_type<t18>().empty(); if (field == #p19) return !engine::script_type<t19>().empty(); if (field == #p20) return !engine::script_type<t20>().empty(); if (field == #p21) return !engine::script_type<t21>().empty(); \
        return false; \
    } \
    std::any getFieldDefaultValue(const std::string& field) { \
        if (field == #p1) return p1(); if (field == #p2) return p2(); if (field == #p3) return p3(); if (field == #p4) return p4(); if (field == #p5) return p5(); if (field == #p6) return p6(); if (field == #p7) return p7(); if (field == #p8) return p8(); if (field == #p9) return p9(); if (field == #p10) return p10(); if (field == #p11) return p11(); if (field == #p12) return p12(); if (field == #p13) return p13(); if (field == #p14) return p14(); if (field == #p15) return p15(); if (field == #p16) return p16(); if (field == #p17) return p17(); if (field == #p18) return p18(); if (field == #p19) return p19(); if (field == #p20) return p20(); if (field == #p21) return p21(); \
        return {}; \
    } \
    void setFieldValue(const std::string& field, const std::any& value, const awe::overrides& overrides) { \
        if (field == #p1) p1(overrides) = std::any_cast<t1>(value); if (field == #p2) p2(overrides) = std::any_cast<t2>(value); if (field == #p3) p3(overrides) = std::any_cast<t3>(value); if (field == #p4) p4(overrides) = std::any_cast<t4>(value); if (field == #p5) p5(overrides) = std::any_cast<t5>(value); if (field == #p6) p6(overrides) = std::any_cast<t6>(value); if (field == #p7) p7(overrides) = std::any_cast<t7>(value); if (field == #p8) p8(overrides) = std::any_cast<t8>(value); if (field == #p9) p9(overrides) = std::any_cast<t9>(value); if (field == #p10) p10(overrides) = std::any_cast<t10>(value); if (field == #p11) p11(overrides) = std::any_cast<t11>(value); if (field == #p12) p12(overrides) = std::any_cast<t12>(value); if (field == #p13) p13(overrides) = std::any_cast<t13>(value); if (field == #p14) p14(overrides) = std::any_cast<t14>(value); if (field == #p15) p15(overrides) = std::any_cast<t15>(value); if (field == #p16) p16(overrides) = std::any_cast<t16>(value); if (field == #p17) p17(overrides) = std::any_cast<t17>(value); if (field == #p18) p18(overrides) = std::any_cast<t18>(value); if (field == #p19) p19(overrides) = std::any_cast<t19>(value); if (field == #p20) p20(overrides) = std::any_cast<t20>(value); if (field == #p21) p21(overrides) = std::any_cast<t21>(value); \
    } \
    a \
};

#define GAME_PROPERTY_22(cc, ac, gp, i, p1, t1, o1, d1, e1, p2, t2, o2, d2, e2, p3, t3, o3, d3, e3, p4, t4, o4, d4, e4, p5, t5, o5, d5, e5, p6, t6, o6, d6, e6, p7, t7, o7, d7, e7, p8, t8, o8, d8, e8, p9, t9, o9, d9, e9, p10, t10, o10, d10, e10, p11, t11, o11, d11, e11, p12, t12, o12, d12, e12, p13, t13, o13, d13, e13, p14, t14, o14, d14, e14, p15, t15, o15, d15, e15, p16, t16, o16, d16, e16, p17, t17, o17, d17, e17, p18, t18, o18, d18, e18, p19, t19, o19, d19, e19, p20, t20, o20, d20, e20, p21, t21, o21, d21, e21, p22, t22, o22, d22, e22, d, e, a) class cc { \
    std::string _scriptName; \
public: \
	inline static const std::string type = ac; \
	inline static const std::string global_property = gp; \
    inline static const std::array<std::string, 22> fields = { #p1, #p2, #p3, #p4, #p5, #p6, #p7, #p8, #p9, #p10, #p11, #p12, #p13, #p14, #p15, #p16, #p17, #p18, #p19, #p20, #p21, #p22, }; \
    inline static const std::size_t overrideID = i; \
    cc(const std::string& scriptName, engine::json& j, engine::logger& logger, const std::shared_ptr<engine::scripts>& scripts) : \
        p1(j, scriptName, logger, scripts), p2(j, scriptName, logger, scripts), p3(j, scriptName, logger, scripts), p4(j, scriptName, logger, scripts), p5(j, scriptName, logger, scripts), p6(j, scriptName, logger, scripts), p7(j, scriptName, logger, scripts), p8(j, scriptName, logger, scripts), p9(j, scriptName, logger, scripts), p10(j, scriptName, logger, scripts), p11(j, scriptName, logger, scripts), p12(j, scriptName, logger, scripts), p13(j, scriptName, logger, scripts), p14(j, scriptName, logger, scripts), p15(j, scriptName, logger, scripts), p16(j, scriptName, logger, scripts), p17(j, scriptName, logger, scripts), p18(j, scriptName, logger, scripts), p19(j, scriptName, logger, scripts), p20(j, scriptName, logger, scripts), p21(j, scriptName, logger, scripts), p22(j, scriptName, logger, scripts), \
        _scriptName(scriptName) { e } \
	static void Register(asIScriptEngine* engine, const std::shared_ptr<DocumentationGenerator>& document) { \
        d \
		engine->RegisterObjectMethod(ac, "const string& scriptName() const", \
			asMETHOD(cc, scriptName), asCALL_THISCALL); \
        p1##_::Register(engine, document); p2##_::Register(engine, document); p3##_::Register(engine, document); p4##_::Register(engine, document); p5##_::Register(engine, document); p6##_::Register(engine, document); p7##_::Register(engine, document); p8##_::Register(engine, document); p9##_::Register(engine, document); p10##_::Register(engine, document); p11##_::Register(engine, document); p12##_::Register(engine, document); p13##_::Register(engine, document); p14##_::Register(engine, document); p15##_::Register(engine, document); p16##_::Register(engine, document); p17##_::Register(engine, document); p18##_::Register(engine, document); p19##_::Register(engine, document); p20##_::Register(engine, document); p21##_::Register(engine, document); p22##_::Register(engine, document); \
    } \
	inline const std::string& scriptName() const { return _scriptName; } \
    PROPERTY(cc, ac, p1, t1, i, o1, d1, e1) PROPERTY(cc, ac, p2, t2, i, o2, d2, e2) PROPERTY(cc, ac, p3, t3, i, o3, d3, e3) PROPERTY(cc, ac, p4, t4, i, o4, d4, e4) PROPERTY(cc, ac, p5, t5, i, o5, d5, e5) PROPERTY(cc, ac, p6, t6, i, o6, d6, e6) PROPERTY(cc, ac, p7, t7, i, o7, d7, e7) PROPERTY(cc, ac, p8, t8, i, o8, d8, e8) PROPERTY(cc, ac, p9, t9, i, o9, d9, e9) PROPERTY(cc, ac, p10, t10, i, o10, d10, e10) PROPERTY(cc, ac, p11, t11, i, o11, d11, e11) PROPERTY(cc, ac, p12, t12, i, o12, d12, e12) PROPERTY(cc, ac, p13, t13, i, o13, d13, e13) PROPERTY(cc, ac, p14, t14, i, o14, d14, e14) PROPERTY(cc, ac, p15, t15, i, o15, d15, e15) PROPERTY(cc, ac, p16, t16, i, o16, d16, e16) PROPERTY(cc, ac, p17, t17, i, o17, d17, e17) PROPERTY(cc, ac, p18, t18, i, o18, d18, e18) PROPERTY(cc, ac, p19, t19, i, o19, d19, e19) PROPERTY(cc, ac, p20, t20, i, o20, d20, e20) PROPERTY(cc, ac, p21, t21, i, o21, d21, e21) PROPERTY(cc, ac, p22, t22, i, o22, d22, e22) \
    inline static bool hasField(const std::string_view field) { \
        return field == #p1 || field == #p2 || field == #p3 || field == #p4 || field == #p5 || field == #p6 || field == #p7 || field == #p8 || field == #p9 || field == #p10 || field == #p11 || field == #p12 || field == #p13 || field == #p14 || field == #p15 || field == #p16 || field == #p17 || field == #p18 || field == #p19 || field == #p20 || field == #p21 || field == #p22 || false; \
    } \
	inline static std::string getFieldAngelScriptType(const std::string_view field) { \
		if (field == #p1) return engine::script_type<t1>(); if (field == #p2) return engine::script_type<t2>(); if (field == #p3) return engine::script_type<t3>(); if (field == #p4) return engine::script_type<t4>(); if (field == #p5) return engine::script_type<t5>(); if (field == #p6) return engine::script_type<t6>(); if (field == #p7) return engine::script_type<t7>(); if (field == #p8) return engine::script_type<t8>(); if (field == #p9) return engine::script_type<t9>(); if (field == #p10) return engine::script_type<t10>(); if (field == #p11) return engine::script_type<t11>(); if (field == #p12) return engine::script_type<t12>(); if (field == #p13) return engine::script_type<t13>(); if (field == #p14) return engine::script_type<t14>(); if (field == #p15) return engine::script_type<t15>(); if (field == #p16) return engine::script_type<t16>(); if (field == #p17) return engine::script_type<t17>(); if (field == #p18) return engine::script_type<t18>(); if (field == #p19) return engine::script_type<t19>(); if (field == #p20) return engine::script_type<t20>(); if (field == #p21) return engine::script_type<t21>(); if (field == #p22) return engine::script_type<t22>(); \
		return ""; \
	} \
	static std::any readFieldOverrideVariable(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		const asUINT variable) { \
		if (field == #p1) return awe::OverrideVariable<t1>::read(scripts, variable); if (field == #p2) return awe::OverrideVariable<t2>::read(scripts, variable); if (field == #p3) return awe::OverrideVariable<t3>::read(scripts, variable); if (field == #p4) return awe::OverrideVariable<t4>::read(scripts, variable); if (field == #p5) return awe::OverrideVariable<t5>::read(scripts, variable); if (field == #p6) return awe::OverrideVariable<t6>::read(scripts, variable); if (field == #p7) return awe::OverrideVariable<t7>::read(scripts, variable); if (field == #p8) return awe::OverrideVariable<t8>::read(scripts, variable); if (field == #p9) return awe::OverrideVariable<t9>::read(scripts, variable); if (field == #p10) return awe::OverrideVariable<t10>::read(scripts, variable); if (field == #p11) return awe::OverrideVariable<t11>::read(scripts, variable); if (field == #p12) return awe::OverrideVariable<t12>::read(scripts, variable); if (field == #p13) return awe::OverrideVariable<t13>::read(scripts, variable); if (field == #p14) return awe::OverrideVariable<t14>::read(scripts, variable); if (field == #p15) return awe::OverrideVariable<t15>::read(scripts, variable); if (field == #p16) return awe::OverrideVariable<t16>::read(scripts, variable); if (field == #p17) return awe::OverrideVariable<t17>::read(scripts, variable); if (field == #p18) return awe::OverrideVariable<t18>::read(scripts, variable); if (field == #p19) return awe::OverrideVariable<t19>::read(scripts, variable); if (field == #p20) return awe::OverrideVariable<t20>::read(scripts, variable); if (field == #p21) return awe::OverrideVariable<t21>::read(scripts, variable); if (field == #p22) return awe::OverrideVariable<t22>::read(scripts, variable); \
		return {}; \
	} \
	static std::any readFieldOverrideFunction(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		asIScriptFunction* const function, const std::any& parent) { \
		if (field == #p1) return awe::OverrideFunction<t1>::read(scripts, function, parent); if (field == #p2) return awe::OverrideFunction<t2>::read(scripts, function, parent); if (field == #p3) return awe::OverrideFunction<t3>::read(scripts, function, parent); if (field == #p4) return awe::OverrideFunction<t4>::read(scripts, function, parent); if (field == #p5) return awe::OverrideFunction<t5>::read(scripts, function, parent); if (field == #p6) return awe::OverrideFunction<t6>::read(scripts, function, parent); if (field == #p7) return awe::OverrideFunction<t7>::read(scripts, function, parent); if (field == #p8) return awe::OverrideFunction<t8>::read(scripts, function, parent); if (field == #p9) return awe::OverrideFunction<t9>::read(scripts, function, parent); if (field == #p10) return awe::OverrideFunction<t10>::read(scripts, function, parent); if (field == #p11) return awe::OverrideFunction<t11>::read(scripts, function, parent); if (field == #p12) return awe::OverrideFunction<t12>::read(scripts, function, parent); if (field == #p13) return awe::OverrideFunction<t13>::read(scripts, function, parent); if (field == #p14) return awe::OverrideFunction<t14>::read(scripts, function, parent); if (field == #p15) return awe::OverrideFunction<t15>::read(scripts, function, parent); if (field == #p16) return awe::OverrideFunction<t16>::read(scripts, function, parent); if (field == #p17) return awe::OverrideFunction<t17>::read(scripts, function, parent); if (field == #p18) return awe::OverrideFunction<t18>::read(scripts, function, parent); if (field == #p19) return awe::OverrideFunction<t19>::read(scripts, function, parent); if (field == #p20) return awe::OverrideFunction<t20>::read(scripts, function, parent); if (field == #p21) return awe::OverrideFunction<t21>::read(scripts, function, parent); if (field == #p22) return awe::OverrideFunction<t22>::read(scripts, function, parent); \
		return {}; \
	} \
    static bool isFieldOverrideable(const std::string& field) { \
        if (field == #p1) return !engine::script_type<t1>().empty(); if (field == #p2) return !engine::script_type<t2>().empty(); if (field == #p3) return !engine::script_type<t3>().empty(); if (field == #p4) return !engine::script_type<t4>().empty(); if (field == #p5) return !engine::script_type<t5>().empty(); if (field == #p6) return !engine::script_type<t6>().empty(); if (field == #p7) return !engine::script_type<t7>().empty(); if (field == #p8) return !engine::script_type<t8>().empty(); if (field == #p9) return !engine::script_type<t9>().empty(); if (field == #p10) return !engine::script_type<t10>().empty(); if (field == #p11) return !engine::script_type<t11>().empty(); if (field == #p12) return !engine::script_type<t12>().empty(); if (field == #p13) return !engine::script_type<t13>().empty(); if (field == #p14) return !engine::script_type<t14>().empty(); if (field == #p15) return !engine::script_type<t15>().empty(); if (field == #p16) return !engine::script_type<t16>().empty(); if (field == #p17) return !engine::script_type<t17>().empty(); if (field == #p18) return !engine::script_type<t18>().empty(); if (field == #p19) return !engine::script_type<t19>().empty(); if (field == #p20) return !engine::script_type<t20>().empty(); if (field == #p21) return !engine::script_type<t21>().empty(); if (field == #p22) return !engine::script_type<t22>().empty(); \
        return false; \
    } \
    std::any getFieldDefaultValue(const std::string& field) { \
        if (field == #p1) return p1(); if (field == #p2) return p2(); if (field == #p3) return p3(); if (field == #p4) return p4(); if (field == #p5) return p5(); if (field == #p6) return p6(); if (field == #p7) return p7(); if (field == #p8) return p8(); if (field == #p9) return p9(); if (field == #p10) return p10(); if (field == #p11) return p11(); if (field == #p12) return p12(); if (field == #p13) return p13(); if (field == #p14) return p14(); if (field == #p15) return p15(); if (field == #p16) return p16(); if (field == #p17) return p17(); if (field == #p18) return p18(); if (field == #p19) return p19(); if (field == #p20) return p20(); if (field == #p21) return p21(); if (field == #p22) return p22(); \
        return {}; \
    } \
    void setFieldValue(const std::string& field, const std::any& value, const awe::overrides& overrides) { \
        if (field == #p1) p1(overrides) = std::any_cast<t1>(value); if (field == #p2) p2(overrides) = std::any_cast<t2>(value); if (field == #p3) p3(overrides) = std::any_cast<t3>(value); if (field == #p4) p4(overrides) = std::any_cast<t4>(value); if (field == #p5) p5(overrides) = std::any_cast<t5>(value); if (field == #p6) p6(overrides) = std::any_cast<t6>(value); if (field == #p7) p7(overrides) = std::any_cast<t7>(value); if (field == #p8) p8(overrides) = std::any_cast<t8>(value); if (field == #p9) p9(overrides) = std::any_cast<t9>(value); if (field == #p10) p10(overrides) = std::any_cast<t10>(value); if (field == #p11) p11(overrides) = std::any_cast<t11>(value); if (field == #p12) p12(overrides) = std::any_cast<t12>(value); if (field == #p13) p13(overrides) = std::any_cast<t13>(value); if (field == #p14) p14(overrides) = std::any_cast<t14>(value); if (field == #p15) p15(overrides) = std::any_cast<t15>(value); if (field == #p16) p16(overrides) = std::any_cast<t16>(value); if (field == #p17) p17(overrides) = std::any_cast<t17>(value); if (field == #p18) p18(overrides) = std::any_cast<t18>(value); if (field == #p19) p19(overrides) = std::any_cast<t19>(value); if (field == #p20) p20(overrides) = std::any_cast<t20>(value); if (field == #p21) p21(overrides) = std::any_cast<t21>(value); if (field == #p22) p22(overrides) = std::any_cast<t22>(value); \
    } \
    a \
};

#define GAME_PROPERTY_23(cc, ac, gp, i, p1, t1, o1, d1, e1, p2, t2, o2, d2, e2, p3, t3, o3, d3, e3, p4, t4, o4, d4, e4, p5, t5, o5, d5, e5, p6, t6, o6, d6, e6, p7, t7, o7, d7, e7, p8, t8, o8, d8, e8, p9, t9, o9, d9, e9, p10, t10, o10, d10, e10, p11, t11, o11, d11, e11, p12, t12, o12, d12, e12, p13, t13, o13, d13, e13, p14, t14, o14, d14, e14, p15, t15, o15, d15, e15, p16, t16, o16, d16, e16, p17, t17, o17, d17, e17, p18, t18, o18, d18, e18, p19, t19, o19, d19, e19, p20, t20, o20, d20, e20, p21, t21, o21, d21, e21, p22, t22, o22, d22, e22, p23, t23, o23, d23, e23, d, e, a) class cc { \
    std::string _scriptName; \
public: \
	inline static const std::string type = ac; \
	inline static const std::string global_property = gp; \
    inline static const std::array<std::string, 23> fields = { #p1, #p2, #p3, #p4, #p5, #p6, #p7, #p8, #p9, #p10, #p11, #p12, #p13, #p14, #p15, #p16, #p17, #p18, #p19, #p20, #p21, #p22, #p23, }; \
    inline static const std::size_t overrideID = i; \
    cc(const std::string& scriptName, engine::json& j, engine::logger& logger, const std::shared_ptr<engine::scripts>& scripts) : \
        p1(j, scriptName, logger, scripts), p2(j, scriptName, logger, scripts), p3(j, scriptName, logger, scripts), p4(j, scriptName, logger, scripts), p5(j, scriptName, logger, scripts), p6(j, scriptName, logger, scripts), p7(j, scriptName, logger, scripts), p8(j, scriptName, logger, scripts), p9(j, scriptName, logger, scripts), p10(j, scriptName, logger, scripts), p11(j, scriptName, logger, scripts), p12(j, scriptName, logger, scripts), p13(j, scriptName, logger, scripts), p14(j, scriptName, logger, scripts), p15(j, scriptName, logger, scripts), p16(j, scriptName, logger, scripts), p17(j, scriptName, logger, scripts), p18(j, scriptName, logger, scripts), p19(j, scriptName, logger, scripts), p20(j, scriptName, logger, scripts), p21(j, scriptName, logger, scripts), p22(j, scriptName, logger, scripts), p23(j, scriptName, logger, scripts), \
        _scriptName(scriptName) { e } \
	static void Register(asIScriptEngine* engine, const std::shared_ptr<DocumentationGenerator>& document) { \
        d \
		engine->RegisterObjectMethod(ac, "const string& scriptName() const", \
			asMETHOD(cc, scriptName), asCALL_THISCALL); \
        p1##_::Register(engine, document); p2##_::Register(engine, document); p3##_::Register(engine, document); p4##_::Register(engine, document); p5##_::Register(engine, document); p6##_::Register(engine, document); p7##_::Register(engine, document); p8##_::Register(engine, document); p9##_::Register(engine, document); p10##_::Register(engine, document); p11##_::Register(engine, document); p12##_::Register(engine, document); p13##_::Register(engine, document); p14##_::Register(engine, document); p15##_::Register(engine, document); p16##_::Register(engine, document); p17##_::Register(engine, document); p18##_::Register(engine, document); p19##_::Register(engine, document); p20##_::Register(engine, document); p21##_::Register(engine, document); p22##_::Register(engine, document); p23##_::Register(engine, document); \
    } \
	inline const std::string& scriptName() const { return _scriptName; } \
    PROPERTY(cc, ac, p1, t1, i, o1, d1, e1) PROPERTY(cc, ac, p2, t2, i, o2, d2, e2) PROPERTY(cc, ac, p3, t3, i, o3, d3, e3) PROPERTY(cc, ac, p4, t4, i, o4, d4, e4) PROPERTY(cc, ac, p5, t5, i, o5, d5, e5) PROPERTY(cc, ac, p6, t6, i, o6, d6, e6) PROPERTY(cc, ac, p7, t7, i, o7, d7, e7) PROPERTY(cc, ac, p8, t8, i, o8, d8, e8) PROPERTY(cc, ac, p9, t9, i, o9, d9, e9) PROPERTY(cc, ac, p10, t10, i, o10, d10, e10) PROPERTY(cc, ac, p11, t11, i, o11, d11, e11) PROPERTY(cc, ac, p12, t12, i, o12, d12, e12) PROPERTY(cc, ac, p13, t13, i, o13, d13, e13) PROPERTY(cc, ac, p14, t14, i, o14, d14, e14) PROPERTY(cc, ac, p15, t15, i, o15, d15, e15) PROPERTY(cc, ac, p16, t16, i, o16, d16, e16) PROPERTY(cc, ac, p17, t17, i, o17, d17, e17) PROPERTY(cc, ac, p18, t18, i, o18, d18, e18) PROPERTY(cc, ac, p19, t19, i, o19, d19, e19) PROPERTY(cc, ac, p20, t20, i, o20, d20, e20) PROPERTY(cc, ac, p21, t21, i, o21, d21, e21) PROPERTY(cc, ac, p22, t22, i, o22, d22, e22) PROPERTY(cc, ac, p23, t23, i, o23, d23, e23) \
    inline static bool hasField(const std::string_view field) { \
        return field == #p1 || field == #p2 || field == #p3 || field == #p4 || field == #p5 || field == #p6 || field == #p7 || field == #p8 || field == #p9 || field == #p10 || field == #p11 || field == #p12 || field == #p13 || field == #p14 || field == #p15 || field == #p16 || field == #p17 || field == #p18 || field == #p19 || field == #p20 || field == #p21 || field == #p22 || field == #p23 || false; \
    } \
	inline static std::string getFieldAngelScriptType(const std::string_view field) { \
		if (field == #p1) return engine::script_type<t1>(); if (field == #p2) return engine::script_type<t2>(); if (field == #p3) return engine::script_type<t3>(); if (field == #p4) return engine::script_type<t4>(); if (field == #p5) return engine::script_type<t5>(); if (field == #p6) return engine::script_type<t6>(); if (field == #p7) return engine::script_type<t7>(); if (field == #p8) return engine::script_type<t8>(); if (field == #p9) return engine::script_type<t9>(); if (field == #p10) return engine::script_type<t10>(); if (field == #p11) return engine::script_type<t11>(); if (field == #p12) return engine::script_type<t12>(); if (field == #p13) return engine::script_type<t13>(); if (field == #p14) return engine::script_type<t14>(); if (field == #p15) return engine::script_type<t15>(); if (field == #p16) return engine::script_type<t16>(); if (field == #p17) return engine::script_type<t17>(); if (field == #p18) return engine::script_type<t18>(); if (field == #p19) return engine::script_type<t19>(); if (field == #p20) return engine::script_type<t20>(); if (field == #p21) return engine::script_type<t21>(); if (field == #p22) return engine::script_type<t22>(); if (field == #p23) return engine::script_type<t23>(); \
		return ""; \
	} \
	static std::any readFieldOverrideVariable(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		const asUINT variable) { \
		if (field == #p1) return awe::OverrideVariable<t1>::read(scripts, variable); if (field == #p2) return awe::OverrideVariable<t2>::read(scripts, variable); if (field == #p3) return awe::OverrideVariable<t3>::read(scripts, variable); if (field == #p4) return awe::OverrideVariable<t4>::read(scripts, variable); if (field == #p5) return awe::OverrideVariable<t5>::read(scripts, variable); if (field == #p6) return awe::OverrideVariable<t6>::read(scripts, variable); if (field == #p7) return awe::OverrideVariable<t7>::read(scripts, variable); if (field == #p8) return awe::OverrideVariable<t8>::read(scripts, variable); if (field == #p9) return awe::OverrideVariable<t9>::read(scripts, variable); if (field == #p10) return awe::OverrideVariable<t10>::read(scripts, variable); if (field == #p11) return awe::OverrideVariable<t11>::read(scripts, variable); if (field == #p12) return awe::OverrideVariable<t12>::read(scripts, variable); if (field == #p13) return awe::OverrideVariable<t13>::read(scripts, variable); if (field == #p14) return awe::OverrideVariable<t14>::read(scripts, variable); if (field == #p15) return awe::OverrideVariable<t15>::read(scripts, variable); if (field == #p16) return awe::OverrideVariable<t16>::read(scripts, variable); if (field == #p17) return awe::OverrideVariable<t17>::read(scripts, variable); if (field == #p18) return awe::OverrideVariable<t18>::read(scripts, variable); if (field == #p19) return awe::OverrideVariable<t19>::read(scripts, variable); if (field == #p20) return awe::OverrideVariable<t20>::read(scripts, variable); if (field == #p21) return awe::OverrideVariable<t21>::read(scripts, variable); if (field == #p22) return awe::OverrideVariable<t22>::read(scripts, variable); if (field == #p23) return awe::OverrideVariable<t23>::read(scripts, variable); \
		return {}; \
	} \
	static std::any readFieldOverrideFunction(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		asIScriptFunction* const function, const std::any& parent) { \
		if (field == #p1) return awe::OverrideFunction<t1>::read(scripts, function, parent); if (field == #p2) return awe::OverrideFunction<t2>::read(scripts, function, parent); if (field == #p3) return awe::OverrideFunction<t3>::read(scripts, function, parent); if (field == #p4) return awe::OverrideFunction<t4>::read(scripts, function, parent); if (field == #p5) return awe::OverrideFunction<t5>::read(scripts, function, parent); if (field == #p6) return awe::OverrideFunction<t6>::read(scripts, function, parent); if (field == #p7) return awe::OverrideFunction<t7>::read(scripts, function, parent); if (field == #p8) return awe::OverrideFunction<t8>::read(scripts, function, parent); if (field == #p9) return awe::OverrideFunction<t9>::read(scripts, function, parent); if (field == #p10) return awe::OverrideFunction<t10>::read(scripts, function, parent); if (field == #p11) return awe::OverrideFunction<t11>::read(scripts, function, parent); if (field == #p12) return awe::OverrideFunction<t12>::read(scripts, function, parent); if (field == #p13) return awe::OverrideFunction<t13>::read(scripts, function, parent); if (field == #p14) return awe::OverrideFunction<t14>::read(scripts, function, parent); if (field == #p15) return awe::OverrideFunction<t15>::read(scripts, function, parent); if (field == #p16) return awe::OverrideFunction<t16>::read(scripts, function, parent); if (field == #p17) return awe::OverrideFunction<t17>::read(scripts, function, parent); if (field == #p18) return awe::OverrideFunction<t18>::read(scripts, function, parent); if (field == #p19) return awe::OverrideFunction<t19>::read(scripts, function, parent); if (field == #p20) return awe::OverrideFunction<t20>::read(scripts, function, parent); if (field == #p21) return awe::OverrideFunction<t21>::read(scripts, function, parent); if (field == #p22) return awe::OverrideFunction<t22>::read(scripts, function, parent); if (field == #p23) return awe::OverrideFunction<t23>::read(scripts, function, parent); \
		return {}; \
	} \
    static bool isFieldOverrideable(const std::string& field) { \
        if (field == #p1) return !engine::script_type<t1>().empty(); if (field == #p2) return !engine::script_type<t2>().empty(); if (field == #p3) return !engine::script_type<t3>().empty(); if (field == #p4) return !engine::script_type<t4>().empty(); if (field == #p5) return !engine::script_type<t5>().empty(); if (field == #p6) return !engine::script_type<t6>().empty(); if (field == #p7) return !engine::script_type<t7>().empty(); if (field == #p8) return !engine::script_type<t8>().empty(); if (field == #p9) return !engine::script_type<t9>().empty(); if (field == #p10) return !engine::script_type<t10>().empty(); if (field == #p11) return !engine::script_type<t11>().empty(); if (field == #p12) return !engine::script_type<t12>().empty(); if (field == #p13) return !engine::script_type<t13>().empty(); if (field == #p14) return !engine::script_type<t14>().empty(); if (field == #p15) return !engine::script_type<t15>().empty(); if (field == #p16) return !engine::script_type<t16>().empty(); if (field == #p17) return !engine::script_type<t17>().empty(); if (field == #p18) return !engine::script_type<t18>().empty(); if (field == #p19) return !engine::script_type<t19>().empty(); if (field == #p20) return !engine::script_type<t20>().empty(); if (field == #p21) return !engine::script_type<t21>().empty(); if (field == #p22) return !engine::script_type<t22>().empty(); if (field == #p23) return !engine::script_type<t23>().empty(); \
        return false; \
    } \
    std::any getFieldDefaultValue(const std::string& field) { \
        if (field == #p1) return p1(); if (field == #p2) return p2(); if (field == #p3) return p3(); if (field == #p4) return p4(); if (field == #p5) return p5(); if (field == #p6) return p6(); if (field == #p7) return p7(); if (field == #p8) return p8(); if (field == #p9) return p9(); if (field == #p10) return p10(); if (field == #p11) return p11(); if (field == #p12) return p12(); if (field == #p13) return p13(); if (field == #p14) return p14(); if (field == #p15) return p15(); if (field == #p16) return p16(); if (field == #p17) return p17(); if (field == #p18) return p18(); if (field == #p19) return p19(); if (field == #p20) return p20(); if (field == #p21) return p21(); if (field == #p22) return p22(); if (field == #p23) return p23(); \
        return {}; \
    } \
    void setFieldValue(const std::string& field, const std::any& value, const awe::overrides& overrides) { \
        if (field == #p1) p1(overrides) = std::any_cast<t1>(value); if (field == #p2) p2(overrides) = std::any_cast<t2>(value); if (field == #p3) p3(overrides) = std::any_cast<t3>(value); if (field == #p4) p4(overrides) = std::any_cast<t4>(value); if (field == #p5) p5(overrides) = std::any_cast<t5>(value); if (field == #p6) p6(overrides) = std::any_cast<t6>(value); if (field == #p7) p7(overrides) = std::any_cast<t7>(value); if (field == #p8) p8(overrides) = std::any_cast<t8>(value); if (field == #p9) p9(overrides) = std::any_cast<t9>(value); if (field == #p10) p10(overrides) = std::any_cast<t10>(value); if (field == #p11) p11(overrides) = std::any_cast<t11>(value); if (field == #p12) p12(overrides) = std::any_cast<t12>(value); if (field == #p13) p13(overrides) = std::any_cast<t13>(value); if (field == #p14) p14(overrides) = std::any_cast<t14>(value); if (field == #p15) p15(overrides) = std::any_cast<t15>(value); if (field == #p16) p16(overrides) = std::any_cast<t16>(value); if (field == #p17) p17(overrides) = std::any_cast<t17>(value); if (field == #p18) p18(overrides) = std::any_cast<t18>(value); if (field == #p19) p19(overrides) = std::any_cast<t19>(value); if (field == #p20) p20(overrides) = std::any_cast<t20>(value); if (field == #p21) p21(overrides) = std::any_cast<t21>(value); if (field == #p22) p22(overrides) = std::any_cast<t22>(value); if (field == #p23) p23(overrides) = std::any_cast<t23>(value); \
    } \
    a \
};

#define GAME_PROPERTY_24(cc, ac, gp, i, p1, t1, o1, d1, e1, p2, t2, o2, d2, e2, p3, t3, o3, d3, e3, p4, t4, o4, d4, e4, p5, t5, o5, d5, e5, p6, t6, o6, d6, e6, p7, t7, o7, d7, e7, p8, t8, o8, d8, e8, p9, t9, o9, d9, e9, p10, t10, o10, d10, e10, p11, t11, o11, d11, e11, p12, t12, o12, d12, e12, p13, t13, o13, d13, e13, p14, t14, o14, d14, e14, p15, t15, o15, d15, e15, p16, t16, o16, d16, e16, p17, t17, o17, d17, e17, p18, t18, o18, d18, e18, p19, t19, o19, d19, e19, p20, t20, o20, d20, e20, p21, t21, o21, d21, e21, p22, t22, o22, d22, e22, p23, t23, o23, d23, e23, p24, t24, o24, d24, e24, d, e, a) class cc { \
    std::string _scriptName; \
public: \
	inline static const std::string type = ac; \
	inline static const std::string global_property = gp; \
    inline static const std::array<std::string, 24> fields = { #p1, #p2, #p3, #p4, #p5, #p6, #p7, #p8, #p9, #p10, #p11, #p12, #p13, #p14, #p15, #p16, #p17, #p18, #p19, #p20, #p21, #p22, #p23, #p24, }; \
    inline static const std::size_t overrideID = i; \
    cc(const std::string& scriptName, engine::json& j, engine::logger& logger, const std::shared_ptr<engine::scripts>& scripts) : \
        p1(j, scriptName, logger, scripts), p2(j, scriptName, logger, scripts), p3(j, scriptName, logger, scripts), p4(j, scriptName, logger, scripts), p5(j, scriptName, logger, scripts), p6(j, scriptName, logger, scripts), p7(j, scriptName, logger, scripts), p8(j, scriptName, logger, scripts), p9(j, scriptName, logger, scripts), p10(j, scriptName, logger, scripts), p11(j, scriptName, logger, scripts), p12(j, scriptName, logger, scripts), p13(j, scriptName, logger, scripts), p14(j, scriptName, logger, scripts), p15(j, scriptName, logger, scripts), p16(j, scriptName, logger, scripts), p17(j, scriptName, logger, scripts), p18(j, scriptName, logger, scripts), p19(j, scriptName, logger, scripts), p20(j, scriptName, logger, scripts), p21(j, scriptName, logger, scripts), p22(j, scriptName, logger, scripts), p23(j, scriptName, logger, scripts), p24(j, scriptName, logger, scripts), \
        _scriptName(scriptName) { e } \
	static void Register(asIScriptEngine* engine, const std::shared_ptr<DocumentationGenerator>& document) { \
        d \
		engine->RegisterObjectMethod(ac, "const string& scriptName() const", \
			asMETHOD(cc, scriptName), asCALL_THISCALL); \
        p1##_::Register(engine, document); p2##_::Register(engine, document); p3##_::Register(engine, document); p4##_::Register(engine, document); p5##_::Register(engine, document); p6##_::Register(engine, document); p7##_::Register(engine, document); p8##_::Register(engine, document); p9##_::Register(engine, document); p10##_::Register(engine, document); p11##_::Register(engine, document); p12##_::Register(engine, document); p13##_::Register(engine, document); p14##_::Register(engine, document); p15##_::Register(engine, document); p16##_::Register(engine, document); p17##_::Register(engine, document); p18##_::Register(engine, document); p19##_::Register(engine, document); p20##_::Register(engine, document); p21##_::Register(engine, document); p22##_::Register(engine, document); p23##_::Register(engine, document); p24##_::Register(engine, document); \
    } \
	inline const std::string& scriptName() const { return _scriptName; } \
    PROPERTY(cc, ac, p1, t1, i, o1, d1, e1) PROPERTY(cc, ac, p2, t2, i, o2, d2, e2) PROPERTY(cc, ac, p3, t3, i, o3, d3, e3) PROPERTY(cc, ac, p4, t4, i, o4, d4, e4) PROPERTY(cc, ac, p5, t5, i, o5, d5, e5) PROPERTY(cc, ac, p6, t6, i, o6, d6, e6) PROPERTY(cc, ac, p7, t7, i, o7, d7, e7) PROPERTY(cc, ac, p8, t8, i, o8, d8, e8) PROPERTY(cc, ac, p9, t9, i, o9, d9, e9) PROPERTY(cc, ac, p10, t10, i, o10, d10, e10) PROPERTY(cc, ac, p11, t11, i, o11, d11, e11) PROPERTY(cc, ac, p12, t12, i, o12, d12, e12) PROPERTY(cc, ac, p13, t13, i, o13, d13, e13) PROPERTY(cc, ac, p14, t14, i, o14, d14, e14) PROPERTY(cc, ac, p15, t15, i, o15, d15, e15) PROPERTY(cc, ac, p16, t16, i, o16, d16, e16) PROPERTY(cc, ac, p17, t17, i, o17, d17, e17) PROPERTY(cc, ac, p18, t18, i, o18, d18, e18) PROPERTY(cc, ac, p19, t19, i, o19, d19, e19) PROPERTY(cc, ac, p20, t20, i, o20, d20, e20) PROPERTY(cc, ac, p21, t21, i, o21, d21, e21) PROPERTY(cc, ac, p22, t22, i, o22, d22, e22) PROPERTY(cc, ac, p23, t23, i, o23, d23, e23) PROPERTY(cc, ac, p24, t24, i, o24, d24, e24) \
    inline static bool hasField(const std::string_view field) { \
        return field == #p1 || field == #p2 || field == #p3 || field == #p4 || field == #p5 || field == #p6 || field == #p7 || field == #p8 || field == #p9 || field == #p10 || field == #p11 || field == #p12 || field == #p13 || field == #p14 || field == #p15 || field == #p16 || field == #p17 || field == #p18 || field == #p19 || field == #p20 || field == #p21 || field == #p22 || field == #p23 || field == #p24 || false; \
    } \
	inline static std::string getFieldAngelScriptType(const std::string_view field) { \
		if (field == #p1) return engine::script_type<t1>(); if (field == #p2) return engine::script_type<t2>(); if (field == #p3) return engine::script_type<t3>(); if (field == #p4) return engine::script_type<t4>(); if (field == #p5) return engine::script_type<t5>(); if (field == #p6) return engine::script_type<t6>(); if (field == #p7) return engine::script_type<t7>(); if (field == #p8) return engine::script_type<t8>(); if (field == #p9) return engine::script_type<t9>(); if (field == #p10) return engine::script_type<t10>(); if (field == #p11) return engine::script_type<t11>(); if (field == #p12) return engine::script_type<t12>(); if (field == #p13) return engine::script_type<t13>(); if (field == #p14) return engine::script_type<t14>(); if (field == #p15) return engine::script_type<t15>(); if (field == #p16) return engine::script_type<t16>(); if (field == #p17) return engine::script_type<t17>(); if (field == #p18) return engine::script_type<t18>(); if (field == #p19) return engine::script_type<t19>(); if (field == #p20) return engine::script_type<t20>(); if (field == #p21) return engine::script_type<t21>(); if (field == #p22) return engine::script_type<t22>(); if (field == #p23) return engine::script_type<t23>(); if (field == #p24) return engine::script_type<t24>(); \
		return ""; \
	} \
	static std::any readFieldOverrideVariable(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		const asUINT variable) { \
		if (field == #p1) return awe::OverrideVariable<t1>::read(scripts, variable); if (field == #p2) return awe::OverrideVariable<t2>::read(scripts, variable); if (field == #p3) return awe::OverrideVariable<t3>::read(scripts, variable); if (field == #p4) return awe::OverrideVariable<t4>::read(scripts, variable); if (field == #p5) return awe::OverrideVariable<t5>::read(scripts, variable); if (field == #p6) return awe::OverrideVariable<t6>::read(scripts, variable); if (field == #p7) return awe::OverrideVariable<t7>::read(scripts, variable); if (field == #p8) return awe::OverrideVariable<t8>::read(scripts, variable); if (field == #p9) return awe::OverrideVariable<t9>::read(scripts, variable); if (field == #p10) return awe::OverrideVariable<t10>::read(scripts, variable); if (field == #p11) return awe::OverrideVariable<t11>::read(scripts, variable); if (field == #p12) return awe::OverrideVariable<t12>::read(scripts, variable); if (field == #p13) return awe::OverrideVariable<t13>::read(scripts, variable); if (field == #p14) return awe::OverrideVariable<t14>::read(scripts, variable); if (field == #p15) return awe::OverrideVariable<t15>::read(scripts, variable); if (field == #p16) return awe::OverrideVariable<t16>::read(scripts, variable); if (field == #p17) return awe::OverrideVariable<t17>::read(scripts, variable); if (field == #p18) return awe::OverrideVariable<t18>::read(scripts, variable); if (field == #p19) return awe::OverrideVariable<t19>::read(scripts, variable); if (field == #p20) return awe::OverrideVariable<t20>::read(scripts, variable); if (field == #p21) return awe::OverrideVariable<t21>::read(scripts, variable); if (field == #p22) return awe::OverrideVariable<t22>::read(scripts, variable); if (field == #p23) return awe::OverrideVariable<t23>::read(scripts, variable); if (field == #p24) return awe::OverrideVariable<t24>::read(scripts, variable); \
		return {}; \
	} \
	static std::any readFieldOverrideFunction(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		asIScriptFunction* const function, const std::any& parent) { \
		if (field == #p1) return awe::OverrideFunction<t1>::read(scripts, function, parent); if (field == #p2) return awe::OverrideFunction<t2>::read(scripts, function, parent); if (field == #p3) return awe::OverrideFunction<t3>::read(scripts, function, parent); if (field == #p4) return awe::OverrideFunction<t4>::read(scripts, function, parent); if (field == #p5) return awe::OverrideFunction<t5>::read(scripts, function, parent); if (field == #p6) return awe::OverrideFunction<t6>::read(scripts, function, parent); if (field == #p7) return awe::OverrideFunction<t7>::read(scripts, function, parent); if (field == #p8) return awe::OverrideFunction<t8>::read(scripts, function, parent); if (field == #p9) return awe::OverrideFunction<t9>::read(scripts, function, parent); if (field == #p10) return awe::OverrideFunction<t10>::read(scripts, function, parent); if (field == #p11) return awe::OverrideFunction<t11>::read(scripts, function, parent); if (field == #p12) return awe::OverrideFunction<t12>::read(scripts, function, parent); if (field == #p13) return awe::OverrideFunction<t13>::read(scripts, function, parent); if (field == #p14) return awe::OverrideFunction<t14>::read(scripts, function, parent); if (field == #p15) return awe::OverrideFunction<t15>::read(scripts, function, parent); if (field == #p16) return awe::OverrideFunction<t16>::read(scripts, function, parent); if (field == #p17) return awe::OverrideFunction<t17>::read(scripts, function, parent); if (field == #p18) return awe::OverrideFunction<t18>::read(scripts, function, parent); if (field == #p19) return awe::OverrideFunction<t19>::read(scripts, function, parent); if (field == #p20) return awe::OverrideFunction<t20>::read(scripts, function, parent); if (field == #p21) return awe::OverrideFunction<t21>::read(scripts, function, parent); if (field == #p22) return awe::OverrideFunction<t22>::read(scripts, function, parent); if (field == #p23) return awe::OverrideFunction<t23>::read(scripts, function, parent); if (field == #p24) return awe::OverrideFunction<t24>::read(scripts, function, parent); \
		return {}; \
	} \
    static bool isFieldOverrideable(const std::string& field) { \
        if (field == #p1) return !engine::script_type<t1>().empty(); if (field == #p2) return !engine::script_type<t2>().empty(); if (field == #p3) return !engine::script_type<t3>().empty(); if (field == #p4) return !engine::script_type<t4>().empty(); if (field == #p5) return !engine::script_type<t5>().empty(); if (field == #p6) return !engine::script_type<t6>().empty(); if (field == #p7) return !engine::script_type<t7>().empty(); if (field == #p8) return !engine::script_type<t8>().empty(); if (field == #p9) return !engine::script_type<t9>().empty(); if (field == #p10) return !engine::script_type<t10>().empty(); if (field == #p11) return !engine::script_type<t11>().empty(); if (field == #p12) return !engine::script_type<t12>().empty(); if (field == #p13) return !engine::script_type<t13>().empty(); if (field == #p14) return !engine::script_type<t14>().empty(); if (field == #p15) return !engine::script_type<t15>().empty(); if (field == #p16) return !engine::script_type<t16>().empty(); if (field == #p17) return !engine::script_type<t17>().empty(); if (field == #p18) return !engine::script_type<t18>().empty(); if (field == #p19) return !engine::script_type<t19>().empty(); if (field == #p20) return !engine::script_type<t20>().empty(); if (field == #p21) return !engine::script_type<t21>().empty(); if (field == #p22) return !engine::script_type<t22>().empty(); if (field == #p23) return !engine::script_type<t23>().empty(); if (field == #p24) return !engine::script_type<t24>().empty(); \
        return false; \
    } \
    std::any getFieldDefaultValue(const std::string& field) { \
        if (field == #p1) return p1(); if (field == #p2) return p2(); if (field == #p3) return p3(); if (field == #p4) return p4(); if (field == #p5) return p5(); if (field == #p6) return p6(); if (field == #p7) return p7(); if (field == #p8) return p8(); if (field == #p9) return p9(); if (field == #p10) return p10(); if (field == #p11) return p11(); if (field == #p12) return p12(); if (field == #p13) return p13(); if (field == #p14) return p14(); if (field == #p15) return p15(); if (field == #p16) return p16(); if (field == #p17) return p17(); if (field == #p18) return p18(); if (field == #p19) return p19(); if (field == #p20) return p20(); if (field == #p21) return p21(); if (field == #p22) return p22(); if (field == #p23) return p23(); if (field == #p24) return p24(); \
        return {}; \
    } \
    void setFieldValue(const std::string& field, const std::any& value, const awe::overrides& overrides) { \
        if (field == #p1) p1(overrides) = std::any_cast<t1>(value); if (field == #p2) p2(overrides) = std::any_cast<t2>(value); if (field == #p3) p3(overrides) = std::any_cast<t3>(value); if (field == #p4) p4(overrides) = std::any_cast<t4>(value); if (field == #p5) p5(overrides) = std::any_cast<t5>(value); if (field == #p6) p6(overrides) = std::any_cast<t6>(value); if (field == #p7) p7(overrides) = std::any_cast<t7>(value); if (field == #p8) p8(overrides) = std::any_cast<t8>(value); if (field == #p9) p9(overrides) = std::any_cast<t9>(value); if (field == #p10) p10(overrides) = std::any_cast<t10>(value); if (field == #p11) p11(overrides) = std::any_cast<t11>(value); if (field == #p12) p12(overrides) = std::any_cast<t12>(value); if (field == #p13) p13(overrides) = std::any_cast<t13>(value); if (field == #p14) p14(overrides) = std::any_cast<t14>(value); if (field == #p15) p15(overrides) = std::any_cast<t15>(value); if (field == #p16) p16(overrides) = std::any_cast<t16>(value); if (field == #p17) p17(overrides) = std::any_cast<t17>(value); if (field == #p18) p18(overrides) = std::any_cast<t18>(value); if (field == #p19) p19(overrides) = std::any_cast<t19>(value); if (field == #p20) p20(overrides) = std::any_cast<t20>(value); if (field == #p21) p21(overrides) = std::any_cast<t21>(value); if (field == #p22) p22(overrides) = std::any_cast<t22>(value); if (field == #p23) p23(overrides) = std::any_cast<t23>(value); if (field == #p24) p24(overrides) = std::any_cast<t24>(value); \
    } \
    a \
};
