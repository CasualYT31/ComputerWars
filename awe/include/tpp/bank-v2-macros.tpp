/*Copyright 2019-2024 CasualYouTuber31 <naysar@protonmail.com>

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify,
merge, publish, distribute, sublicense, and/or sell copies of the
Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

/**@file bank-v2-macros.hpp
 * This header file was generated by the macgen.py tool.
 * It contains macros used to define game property classes.
 */

/* Generates code necessary to define a field in a game property class.
	cc: C++ game property class the field belongs to.
	ac: String literal containing the game property class's AngelScript typename.
	 n: The name of the property in C++ and AngelScript.
	ct: The C++ type of the property, without qualifiers.
	 i: Depth of the hierarchy desired (see awe::property_field).
	 e: Extra processing that's applied to the property. Can be nothing.
*/
#define PROPERTY(cc, ac, n, ct, i, e) class n##_ { \
	awe::property_field<ct, i> _##n; \
public: \
	n##_(engine::json& j, engine::logger& logger) : _##n(j, { #n }, logger) { e } \
	static void Register(asIScriptEngine* engine) { \
		if constexpr (awe::AngelScriptType<ct>::value[0] == '\0') return; \
		std::stringstream builder; \
		builder << "const "; \
		builder << awe::AngelScriptType<ct>::value; \
		builder << " " #n "(const Overrides&in) const"; \
		engine->RegisterObjectMethod(ac, builder.str().c_str(), \
			asMETHODPR(n##_, operator(), (const awe::overrides&) const, \
				typename boost::call_traits<ct>::const_reference), \
			asCALL_THISCALL, nullptr, asOFFSET(cc, n), false); \
	} \
	typename boost::call_traits<ct>::reference operator()( \
		const awe::overrides& overrides = {}) { \
		return _##n[overrides]; \
	} \
	typename boost::call_traits<ct>::const_reference operator()( \
		const awe::overrides& overrides = {}) const { \
		return _##n[overrides]; \
	} \
} n;

/* These macros generate a game property class with N fields.
	Unfortunately, I can't come up with a cleaner solution to support variable
	numbers of fields in macros beyond manually defining each N-field macro. To
	simplify the process, I've written a Python script that can generate them.
	cc: C++ name of the game property type.
	ac: String literal containing the typename to give this game property in AS.
	gp: String literal containing the name of the global property of the bank type
	    that stores this game property type.
	 i: Depth of the hierarchy desired for every field (see awe::property_field).
	p1: The name of the first field.
	t1: The C++ type of the first field, without qualifiers.
	e1: Extra processing that's applied to the first field.
	 e: Extra processing that's applied to every field after every field has been
	    processed. Can be nothing.
	 a: Append extra code to the end of the class.
*/

#define GAME_PROPERTY_4(cc, ac, gp, i, p1, t1, e1, p2, t2, e2, p3, t3, e3, p4, t4, e4, e, a) class cc { \
    std::string _scriptName; \
public: \
	static constexpr char* const type = ac; \
	static constexpr char* const global_property = gp; \
    static constexpr std::array<const char* const, 4> fields = { #p1, #p2, #p3, #p4, }; \
    static constexpr std::size_t overrideID = i; \
    cc(const std::string& scriptName, engine::json& j, engine::logger& logger) : \
        p1(j, logger), p2(j, logger), p3(j, logger), p4(j, logger), \
        _scriptName(scriptName) { e } \
	static void Register(asIScriptEngine* engine) { \
		engine->RegisterObjectMethod(ac, "const string& scriptName() const", \
			asMETHOD(cc, scriptName), asCALL_THISCALL); \
        p1##_::Register(engine); p2##_::Register(engine); p3##_::Register(engine); p4##_::Register(engine); \
    } \
	inline const std::string& scriptName() const { return _scriptName; } \
    PROPERTY(cc, ac, p1, t1, i, e1) PROPERTY(cc, ac, p2, t2, i, e2) PROPERTY(cc, ac, p3, t3, i, e3) PROPERTY(cc, ac, p4, t4, i, e4) \
    static constexpr bool hasField(const std::string_view field) { \
        return field == #p1 || field == #p2 || field == #p3 || field == #p4 || false; \
    } \
	static constexpr const char* const getFieldAngelScriptType(const std::string_view field) { \
		if (field == #p1) return awe::AngelScriptOverrideType<t1>::value; if (field == #p2) return awe::AngelScriptOverrideType<t2>::value; if (field == #p3) return awe::AngelScriptOverrideType<t3>::value; if (field == #p4) return awe::AngelScriptOverrideType<t4>::value; \
		return ""; \
	} \
	static std::any readFieldOverrideVariable(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		const asUINT variable) { \
		if (field == #p1) return awe::OverrideVariable<t1>::read(scripts, variable); if (field == #p2) return awe::OverrideVariable<t2>::read(scripts, variable); if (field == #p3) return awe::OverrideVariable<t3>::read(scripts, variable); if (field == #p4) return awe::OverrideVariable<t4>::read(scripts, variable); \
		return {}; \
	} \
	static std::any readFieldOverrideFunction(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		asIScriptFunction* const function, const std::any& parent) { \
		if (field == #p1) return awe::OverrideFunction<t1>::read(scripts, function, parent); if (field == #p2) return awe::OverrideFunction<t2>::read(scripts, function, parent); if (field == #p3) return awe::OverrideFunction<t3>::read(scripts, function, parent); if (field == #p4) return awe::OverrideFunction<t4>::read(scripts, function, parent); \
		return {}; \
	} \
    std::any getFieldDefaultValue(const std::string& field) { \
        if (field == #p1) return p1(); if (field == #p2) return p2(); if (field == #p3) return p3(); if (field == #p4) return p4(); \
        return {}; \
    } \
    void setFieldValue(const std::string& field, const std::any& value, const awe::overrides& overrides) { \
        if (field == #p1) p1(overrides) = std::any_cast<t1>(value); if (field == #p2) p2(overrides) = std::any_cast<t2>(value); if (field == #p3) p3(overrides) = std::any_cast<t3>(value); if (field == #p4) p4(overrides) = std::any_cast<t4>(value);  \
    } \
    a \
};

#define GAME_PROPERTY_5(cc, ac, gp, i, p1, t1, e1, p2, t2, e2, p3, t3, e3, p4, t4, e4, p5, t5, e5, e, a) class cc { \
    std::string _scriptName; \
public: \
	static constexpr char* const type = ac; \
	static constexpr char* const global_property = gp; \
    static constexpr std::array<const char* const, 5> fields = { #p1, #p2, #p3, #p4, #p5, }; \
    static constexpr std::size_t overrideID = i; \
    cc(const std::string& scriptName, engine::json& j, engine::logger& logger) : \
        p1(j, logger), p2(j, logger), p3(j, logger), p4(j, logger), p5(j, logger), \
        _scriptName(scriptName) { e } \
	static void Register(asIScriptEngine* engine) { \
		engine->RegisterObjectMethod(ac, "const string& scriptName() const", \
			asMETHOD(cc, scriptName), asCALL_THISCALL); \
        p1##_::Register(engine); p2##_::Register(engine); p3##_::Register(engine); p4##_::Register(engine); p5##_::Register(engine); \
    } \
	inline const std::string& scriptName() const { return _scriptName; } \
    PROPERTY(cc, ac, p1, t1, i, e1) PROPERTY(cc, ac, p2, t2, i, e2) PROPERTY(cc, ac, p3, t3, i, e3) PROPERTY(cc, ac, p4, t4, i, e4) PROPERTY(cc, ac, p5, t5, i, e5) \
    static constexpr bool hasField(const std::string_view field) { \
        return field == #p1 || field == #p2 || field == #p3 || field == #p4 || field == #p5 || false; \
    } \
	static constexpr const char* const getFieldAngelScriptType(const std::string_view field) { \
		if (field == #p1) return awe::AngelScriptOverrideType<t1>::value; if (field == #p2) return awe::AngelScriptOverrideType<t2>::value; if (field == #p3) return awe::AngelScriptOverrideType<t3>::value; if (field == #p4) return awe::AngelScriptOverrideType<t4>::value; if (field == #p5) return awe::AngelScriptOverrideType<t5>::value; \
		return ""; \
	} \
	static std::any readFieldOverrideVariable(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		const asUINT variable) { \
		if (field == #p1) return awe::OverrideVariable<t1>::read(scripts, variable); if (field == #p2) return awe::OverrideVariable<t2>::read(scripts, variable); if (field == #p3) return awe::OverrideVariable<t3>::read(scripts, variable); if (field == #p4) return awe::OverrideVariable<t4>::read(scripts, variable); if (field == #p5) return awe::OverrideVariable<t5>::read(scripts, variable); \
		return {}; \
	} \
	static std::any readFieldOverrideFunction(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		asIScriptFunction* const function, const std::any& parent) { \
		if (field == #p1) return awe::OverrideFunction<t1>::read(scripts, function, parent); if (field == #p2) return awe::OverrideFunction<t2>::read(scripts, function, parent); if (field == #p3) return awe::OverrideFunction<t3>::read(scripts, function, parent); if (field == #p4) return awe::OverrideFunction<t4>::read(scripts, function, parent); if (field == #p5) return awe::OverrideFunction<t5>::read(scripts, function, parent); \
		return {}; \
	} \
    std::any getFieldDefaultValue(const std::string& field) { \
        if (field == #p1) return p1(); if (field == #p2) return p2(); if (field == #p3) return p3(); if (field == #p4) return p4(); if (field == #p5) return p5(); \
        return {}; \
    } \
    void setFieldValue(const std::string& field, const std::any& value, const awe::overrides& overrides) { \
        if (field == #p1) p1(overrides) = std::any_cast<t1>(value); if (field == #p2) p2(overrides) = std::any_cast<t2>(value); if (field == #p3) p3(overrides) = std::any_cast<t3>(value); if (field == #p4) p4(overrides) = std::any_cast<t4>(value); if (field == #p5) p5(overrides) = std::any_cast<t5>(value);  \
    } \
    a \
};

#define GAME_PROPERTY_6(cc, ac, gp, i, p1, t1, e1, p2, t2, e2, p3, t3, e3, p4, t4, e4, p5, t5, e5, p6, t6, e6, e, a) class cc { \
    std::string _scriptName; \
public: \
	static constexpr char* const type = ac; \
	static constexpr char* const global_property = gp; \
    static constexpr std::array<const char* const, 6> fields = { #p1, #p2, #p3, #p4, #p5, #p6, }; \
    static constexpr std::size_t overrideID = i; \
    cc(const std::string& scriptName, engine::json& j, engine::logger& logger) : \
        p1(j, logger), p2(j, logger), p3(j, logger), p4(j, logger), p5(j, logger), p6(j, logger), \
        _scriptName(scriptName) { e } \
	static void Register(asIScriptEngine* engine) { \
		engine->RegisterObjectMethod(ac, "const string& scriptName() const", \
			asMETHOD(cc, scriptName), asCALL_THISCALL); \
        p1##_::Register(engine); p2##_::Register(engine); p3##_::Register(engine); p4##_::Register(engine); p5##_::Register(engine); p6##_::Register(engine); \
    } \
	inline const std::string& scriptName() const { return _scriptName; } \
    PROPERTY(cc, ac, p1, t1, i, e1) PROPERTY(cc, ac, p2, t2, i, e2) PROPERTY(cc, ac, p3, t3, i, e3) PROPERTY(cc, ac, p4, t4, i, e4) PROPERTY(cc, ac, p5, t5, i, e5) PROPERTY(cc, ac, p6, t6, i, e6) \
    static constexpr bool hasField(const std::string_view field) { \
        return field == #p1 || field == #p2 || field == #p3 || field == #p4 || field == #p5 || field == #p6 || false; \
    } \
	static constexpr const char* const getFieldAngelScriptType(const std::string_view field) { \
		if (field == #p1) return awe::AngelScriptOverrideType<t1>::value; if (field == #p2) return awe::AngelScriptOverrideType<t2>::value; if (field == #p3) return awe::AngelScriptOverrideType<t3>::value; if (field == #p4) return awe::AngelScriptOverrideType<t4>::value; if (field == #p5) return awe::AngelScriptOverrideType<t5>::value; if (field == #p6) return awe::AngelScriptOverrideType<t6>::value; \
		return ""; \
	} \
	static std::any readFieldOverrideVariable(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		const asUINT variable) { \
		if (field == #p1) return awe::OverrideVariable<t1>::read(scripts, variable); if (field == #p2) return awe::OverrideVariable<t2>::read(scripts, variable); if (field == #p3) return awe::OverrideVariable<t3>::read(scripts, variable); if (field == #p4) return awe::OverrideVariable<t4>::read(scripts, variable); if (field == #p5) return awe::OverrideVariable<t5>::read(scripts, variable); if (field == #p6) return awe::OverrideVariable<t6>::read(scripts, variable); \
		return {}; \
	} \
	static std::any readFieldOverrideFunction(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		asIScriptFunction* const function, const std::any& parent) { \
		if (field == #p1) return awe::OverrideFunction<t1>::read(scripts, function, parent); if (field == #p2) return awe::OverrideFunction<t2>::read(scripts, function, parent); if (field == #p3) return awe::OverrideFunction<t3>::read(scripts, function, parent); if (field == #p4) return awe::OverrideFunction<t4>::read(scripts, function, parent); if (field == #p5) return awe::OverrideFunction<t5>::read(scripts, function, parent); if (field == #p6) return awe::OverrideFunction<t6>::read(scripts, function, parent); \
		return {}; \
	} \
    std::any getFieldDefaultValue(const std::string& field) { \
        if (field == #p1) return p1(); if (field == #p2) return p2(); if (field == #p3) return p3(); if (field == #p4) return p4(); if (field == #p5) return p5(); if (field == #p6) return p6(); \
        return {}; \
    } \
    void setFieldValue(const std::string& field, const std::any& value, const awe::overrides& overrides) { \
        if (field == #p1) p1(overrides) = std::any_cast<t1>(value); if (field == #p2) p2(overrides) = std::any_cast<t2>(value); if (field == #p3) p3(overrides) = std::any_cast<t3>(value); if (field == #p4) p4(overrides) = std::any_cast<t4>(value); if (field == #p5) p5(overrides) = std::any_cast<t5>(value); if (field == #p6) p6(overrides) = std::any_cast<t6>(value);  \
    } \
    a \
};

#define GAME_PROPERTY_7(cc, ac, gp, i, p1, t1, e1, p2, t2, e2, p3, t3, e3, p4, t4, e4, p5, t5, e5, p6, t6, e6, p7, t7, e7, e, a) class cc { \
    std::string _scriptName; \
public: \
	static constexpr char* const type = ac; \
	static constexpr char* const global_property = gp; \
    static constexpr std::array<const char* const, 7> fields = { #p1, #p2, #p3, #p4, #p5, #p6, #p7, }; \
    static constexpr std::size_t overrideID = i; \
    cc(const std::string& scriptName, engine::json& j, engine::logger& logger) : \
        p1(j, logger), p2(j, logger), p3(j, logger), p4(j, logger), p5(j, logger), p6(j, logger), p7(j, logger), \
        _scriptName(scriptName) { e } \
	static void Register(asIScriptEngine* engine) { \
		engine->RegisterObjectMethod(ac, "const string& scriptName() const", \
			asMETHOD(cc, scriptName), asCALL_THISCALL); \
        p1##_::Register(engine); p2##_::Register(engine); p3##_::Register(engine); p4##_::Register(engine); p5##_::Register(engine); p6##_::Register(engine); p7##_::Register(engine); \
    } \
	inline const std::string& scriptName() const { return _scriptName; } \
    PROPERTY(cc, ac, p1, t1, i, e1) PROPERTY(cc, ac, p2, t2, i, e2) PROPERTY(cc, ac, p3, t3, i, e3) PROPERTY(cc, ac, p4, t4, i, e4) PROPERTY(cc, ac, p5, t5, i, e5) PROPERTY(cc, ac, p6, t6, i, e6) PROPERTY(cc, ac, p7, t7, i, e7) \
    static constexpr bool hasField(const std::string_view field) { \
        return field == #p1 || field == #p2 || field == #p3 || field == #p4 || field == #p5 || field == #p6 || field == #p7 || false; \
    } \
	static constexpr const char* const getFieldAngelScriptType(const std::string_view field) { \
		if (field == #p1) return awe::AngelScriptOverrideType<t1>::value; if (field == #p2) return awe::AngelScriptOverrideType<t2>::value; if (field == #p3) return awe::AngelScriptOverrideType<t3>::value; if (field == #p4) return awe::AngelScriptOverrideType<t4>::value; if (field == #p5) return awe::AngelScriptOverrideType<t5>::value; if (field == #p6) return awe::AngelScriptOverrideType<t6>::value; if (field == #p7) return awe::AngelScriptOverrideType<t7>::value; \
		return ""; \
	} \
	static std::any readFieldOverrideVariable(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		const asUINT variable) { \
		if (field == #p1) return awe::OverrideVariable<t1>::read(scripts, variable); if (field == #p2) return awe::OverrideVariable<t2>::read(scripts, variable); if (field == #p3) return awe::OverrideVariable<t3>::read(scripts, variable); if (field == #p4) return awe::OverrideVariable<t4>::read(scripts, variable); if (field == #p5) return awe::OverrideVariable<t5>::read(scripts, variable); if (field == #p6) return awe::OverrideVariable<t6>::read(scripts, variable); if (field == #p7) return awe::OverrideVariable<t7>::read(scripts, variable); \
		return {}; \
	} \
	static std::any readFieldOverrideFunction(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		asIScriptFunction* const function, const std::any& parent) { \
		if (field == #p1) return awe::OverrideFunction<t1>::read(scripts, function, parent); if (field == #p2) return awe::OverrideFunction<t2>::read(scripts, function, parent); if (field == #p3) return awe::OverrideFunction<t3>::read(scripts, function, parent); if (field == #p4) return awe::OverrideFunction<t4>::read(scripts, function, parent); if (field == #p5) return awe::OverrideFunction<t5>::read(scripts, function, parent); if (field == #p6) return awe::OverrideFunction<t6>::read(scripts, function, parent); if (field == #p7) return awe::OverrideFunction<t7>::read(scripts, function, parent); \
		return {}; \
	} \
    std::any getFieldDefaultValue(const std::string& field) { \
        if (field == #p1) return p1(); if (field == #p2) return p2(); if (field == #p3) return p3(); if (field == #p4) return p4(); if (field == #p5) return p5(); if (field == #p6) return p6(); if (field == #p7) return p7(); \
        return {}; \
    } \
    void setFieldValue(const std::string& field, const std::any& value, const awe::overrides& overrides) { \
        if (field == #p1) p1(overrides) = std::any_cast<t1>(value); if (field == #p2) p2(overrides) = std::any_cast<t2>(value); if (field == #p3) p3(overrides) = std::any_cast<t3>(value); if (field == #p4) p4(overrides) = std::any_cast<t4>(value); if (field == #p5) p5(overrides) = std::any_cast<t5>(value); if (field == #p6) p6(overrides) = std::any_cast<t6>(value); if (field == #p7) p7(overrides) = std::any_cast<t7>(value);  \
    } \
    a \
};

#define GAME_PROPERTY_10(cc, ac, gp, i, p1, t1, e1, p2, t2, e2, p3, t3, e3, p4, t4, e4, p5, t5, e5, p6, t6, e6, p7, t7, e7, p8, t8, e8, p9, t9, e9, p10, t10, e10, e, a) class cc { \
    std::string _scriptName; \
public: \
	static constexpr char* const type = ac; \
	static constexpr char* const global_property = gp; \
    static constexpr std::array<const char* const, 10> fields = { #p1, #p2, #p3, #p4, #p5, #p6, #p7, #p8, #p9, #p10, }; \
    static constexpr std::size_t overrideID = i; \
    cc(const std::string& scriptName, engine::json& j, engine::logger& logger) : \
        p1(j, logger), p2(j, logger), p3(j, logger), p4(j, logger), p5(j, logger), p6(j, logger), p7(j, logger), p8(j, logger), p9(j, logger), p10(j, logger), \
        _scriptName(scriptName) { e } \
	static void Register(asIScriptEngine* engine) { \
		engine->RegisterObjectMethod(ac, "const string& scriptName() const", \
			asMETHOD(cc, scriptName), asCALL_THISCALL); \
        p1##_::Register(engine); p2##_::Register(engine); p3##_::Register(engine); p4##_::Register(engine); p5##_::Register(engine); p6##_::Register(engine); p7##_::Register(engine); p8##_::Register(engine); p9##_::Register(engine); p10##_::Register(engine); \
    } \
	inline const std::string& scriptName() const { return _scriptName; } \
    PROPERTY(cc, ac, p1, t1, i, e1) PROPERTY(cc, ac, p2, t2, i, e2) PROPERTY(cc, ac, p3, t3, i, e3) PROPERTY(cc, ac, p4, t4, i, e4) PROPERTY(cc, ac, p5, t5, i, e5) PROPERTY(cc, ac, p6, t6, i, e6) PROPERTY(cc, ac, p7, t7, i, e7) PROPERTY(cc, ac, p8, t8, i, e8) PROPERTY(cc, ac, p9, t9, i, e9) PROPERTY(cc, ac, p10, t10, i, e10) \
    static constexpr bool hasField(const std::string_view field) { \
        return field == #p1 || field == #p2 || field == #p3 || field == #p4 || field == #p5 || field == #p6 || field == #p7 || field == #p8 || field == #p9 || field == #p10 || false; \
    } \
	static constexpr const char* const getFieldAngelScriptType(const std::string_view field) { \
		if (field == #p1) return awe::AngelScriptOverrideType<t1>::value; if (field == #p2) return awe::AngelScriptOverrideType<t2>::value; if (field == #p3) return awe::AngelScriptOverrideType<t3>::value; if (field == #p4) return awe::AngelScriptOverrideType<t4>::value; if (field == #p5) return awe::AngelScriptOverrideType<t5>::value; if (field == #p6) return awe::AngelScriptOverrideType<t6>::value; if (field == #p7) return awe::AngelScriptOverrideType<t7>::value; if (field == #p8) return awe::AngelScriptOverrideType<t8>::value; if (field == #p9) return awe::AngelScriptOverrideType<t9>::value; if (field == #p10) return awe::AngelScriptOverrideType<t10>::value; \
		return ""; \
	} \
	static std::any readFieldOverrideVariable(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		const asUINT variable) { \
		if (field == #p1) return awe::OverrideVariable<t1>::read(scripts, variable); if (field == #p2) return awe::OverrideVariable<t2>::read(scripts, variable); if (field == #p3) return awe::OverrideVariable<t3>::read(scripts, variable); if (field == #p4) return awe::OverrideVariable<t4>::read(scripts, variable); if (field == #p5) return awe::OverrideVariable<t5>::read(scripts, variable); if (field == #p6) return awe::OverrideVariable<t6>::read(scripts, variable); if (field == #p7) return awe::OverrideVariable<t7>::read(scripts, variable); if (field == #p8) return awe::OverrideVariable<t8>::read(scripts, variable); if (field == #p9) return awe::OverrideVariable<t9>::read(scripts, variable); if (field == #p10) return awe::OverrideVariable<t10>::read(scripts, variable); \
		return {}; \
	} \
	static std::any readFieldOverrideFunction(const std::string& field, \
		const std::shared_ptr<engine::scripts>& scripts, \
		asIScriptFunction* const function, const std::any& parent) { \
		if (field == #p1) return awe::OverrideFunction<t1>::read(scripts, function, parent); if (field == #p2) return awe::OverrideFunction<t2>::read(scripts, function, parent); if (field == #p3) return awe::OverrideFunction<t3>::read(scripts, function, parent); if (field == #p4) return awe::OverrideFunction<t4>::read(scripts, function, parent); if (field == #p5) return awe::OverrideFunction<t5>::read(scripts, function, parent); if (field == #p6) return awe::OverrideFunction<t6>::read(scripts, function, parent); if (field == #p7) return awe::OverrideFunction<t7>::read(scripts, function, parent); if (field == #p8) return awe::OverrideFunction<t8>::read(scripts, function, parent); if (field == #p9) return awe::OverrideFunction<t9>::read(scripts, function, parent); if (field == #p10) return awe::OverrideFunction<t10>::read(scripts, function, parent); \
		return {}; \
	} \
    std::any getFieldDefaultValue(const std::string& field) { \
        if (field == #p1) return p1(); if (field == #p2) return p2(); if (field == #p3) return p3(); if (field == #p4) return p4(); if (field == #p5) return p5(); if (field == #p6) return p6(); if (field == #p7) return p7(); if (field == #p8) return p8(); if (field == #p9) return p9(); if (field == #p10) return p10(); \
        return {}; \
    } \
    void setFieldValue(const std::string& field, const std::any& value, const awe::overrides& overrides) { \
        if (field == #p1) p1(overrides) = std::any_cast<t1>(value); if (field == #p2) p2(overrides) = std::any_cast<t2>(value); if (field == #p3) p3(overrides) = std::any_cast<t3>(value); if (field == #p4) p4(overrides) = std::any_cast<t4>(value); if (field == #p5) p5(overrides) = std::any_cast<t5>(value); if (field == #p6) p6(overrides) = std::any_cast<t6>(value); if (field == #p7) p7(overrides) = std::any_cast<t7>(value); if (field == #p8) p8(overrides) = std::any_cast<t8>(value); if (field == #p9) p9(overrides) = std::any_cast<t9>(value); if (field == #p10) p10(overrides) = std::any_cast<t10>(value);  \
    } \
    a \
};
