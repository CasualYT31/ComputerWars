USAGE: str = """
Small script that generates macros that define a Game Property Class with the given number of fields.
Usage: py ./macgen.py 7
Will generate a macro defining a class with 7 fields, and copy it to the clipboard.
py ./macgen.py 2 7 10
Will generate three macros defining classes with 2, 7, and 10 fields respectively, and copy it to the clipboard.
"""

HEADER: str = """/*Copyright 2019-2024 CasualYouTuber31 <naysar@protonmail.com>

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify,
merge, publish, distribute, sublicense, and/or sell copies of the
Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

/**@file bank-v2-macros.hpp
 * This header file was generated by the macgen.py tool.
 * It contains macros used to define game property classes.
 */

/* Generates code necessary to define a field in a game property class.
	cc: C++ game property class the field belongs to.
	ac: String literal containing the game property class's AngelScript typename.
	 n: The name of the property in C++ and AngelScript.
	ct: The C++ type of the property, without qualifiers.
	 i: Depth of the hierarchy desired (see awe::property_field).
	 e: Extra processing that's applied to the property. Can be nothing.
*/
#define PROPERTY(cc, ac, n, ct, i, e) class n##_ { \\
	awe::property_field<ct, i> _##n; \\
public: \\
	n##_(engine::json& j, engine::logger& logger) : _##n(j, { #n }, logger) { e } \\
	static void Register(asIScriptEngine* engine) { \\
		if constexpr (awe::AngelScriptType<ct>::value[0] == '\\0') return; \\
		std::stringstream builder; \\
		builder << "const "; \\
		builder << awe::AngelScriptType<ct>::value; \\
		builder << " " #n "(const Overrides&in) const"; \\
		engine->RegisterObjectMethod(ac, builder.str().c_str(), \\
			asMETHODPR(n##_, operator(), (const awe::overrides&) const, \\
				typename boost::call_traits<ct>::const_reference), \\
			asCALL_THISCALL, nullptr, asOFFSET(cc, n), false); \\
	} \\
	typename boost::call_traits<ct>::reference operator()( \\
		const awe::overrides& overrides = {}) { \\
		return _##n[overrides]; \\
	} \\
	typename boost::call_traits<ct>::const_reference operator()( \\
		const awe::overrides& overrides = {}) const { \\
		return _##n[overrides]; \\
	} \\
} n;

/* These macros generate a game property class with N fields.
	Unfortunately, I can't come up with a cleaner solution to support variable
	numbers of fields in macros beyond manually defining each N-field macro. To
	simplify the process, I've written a Python script that can generate them.
	cc: C++ name of the game property type.
	ac: String literal containing the typename to give this game property in AS.
	gp: String literal containing the name of the global property of the bank type
	    that stores this game property type.
	 i: Depth of the hierarchy desired for every field (see awe::property_field).
	p1: The name of the first field.
	t1: The C++ type of the first field, without qualifiers.
	e1: Extra processing that's applied to the first field.
	 e: Extra processing that's applied to every field after every field has been
	    processed. Can be nothing.
	 a: Append extra code to the end of the class.
*/
"""

TEMPLATE_PATH = "./macgen.cpp"
try:
    with open(TEMPLATE_PATH, mode="r", encoding="utf-8") as f:
        TEMPLATE_SRC: str = f.read()
except:
    print(f"Couldn't load template file {TEMPLATE_PATH}:")
    raise
# Split template on backticks (`).
# Everything between backticks is repeated FC times.
TEMPLATE = TEMPLATE_SRC.split('`')

from sys import argv

try:
    for p in argv[1:]:
        test = int(p)
        if test < 1: raise SystemExit
except:
    print(USAGE)
    raise SystemExit

def generate(FC: int) -> str:
    # Build macro using the template.
    macro: str = ""
    for i, t in enumerate(TEMPLATE):
        if i % 2 == 0:
            # Every element with an even index uses $ substitution as normal,
            # where every occurrence of $ is replaced with FC.
            macro += t.replace('$', f'{FC}')
        else:
            # Every element with an odd index also uses $ substitution,
            # but the string is also repeated FC times. Each iteration has a
            # different $ substitution, starting with 1 and ending with FC.
            # E.g. first iteration replaces $ with 1, second with 2, etc.
            # `p$, t$` with FC of 3 becomes: p1, t1p2, t2p3, t3
            for x in range(1, FC + 1): macro += t.replace('$', f'{x}')
    return macro

GENERATED_FILE: str = HEADER

for p in argv[1:]: GENERATED_FILE += f"\n{generate(int(p))}"

PATH = "./awe/include/tpp/bank-v2-macros.tpp"
try:
    with open(PATH, mode='w', encoding='utf-8') as f: f.write(GENERATED_FILE)
except:
    print(f"Couldn't write to {PATH}:")
    raise

print(f"Macro{'s have' if len(argv) > 2 else ' has'} now been written to {PATH}!")
